---
title: Smartsheet API 2.0 Documentation

language_tabs:
  - shell: cURL
  - csharp: C#
  - java: Java
  - javascript: Node.js
  - python: Python
  
toc_footers:

includes:

search: false
---

<% OBJECTS = "Objects" %>
<% RELATED = "Related Items" %>
<% METHOD = "**HTTP Request**" %>
<% SCOPE = "**Access Scope**" %>
<% HEADERS = "**Headers**" %>
<% PARAMETERS = "**Parameters**" %>
<% REQUEST = "**Request Body**" %>
<% RETURNS = "**Returns**" %>
<% ERRORS = "**Errors**" %>
<% HEADER_AUTH = "**Authorization**: Bearer ll352u9jujauoqz4gstvsae05" %>
<% HEADER_CT_JSON = "**Content-Type**: application/json" %>
<% PARAMETER_ALLOW_PARTIAL_SUCCESS = "**allowPartialSuccess** (optional): when specified with a value of `true`, enables partial success for this bulk operation.  See Partial Success for more information." %>
<% PARAMETER_MODIFIEDSINCE = "**modifiedSince** (optional): when specified with a <a href='#dates-and-times'>date and time</a> value, response only includes the objects that are modified on or after the date and time specified." %>
<% PARAMETER_OVERRIDE_VALIDATION = "**overrideValidation** (optional): You may use the query string parameter <b>overrideValidation</b> with a value of <code>true</code> to allow a cell value outside of the validation limits. You must specify **strict** with a value of `false` to bypass value type checking."  %>
<% PAGING_PARAMETERS = "This operation supports query string parameters for pagination of results. For more information, see Paging Query String Parameters." %>
<% SUPPORTS_PAGING = "This operation supports pagination of results. For more information, see <a href='#paging'>Paging</a>." %>
<% SUPPORTS_BULK_INSERT = "This operation supports both single-object and bulk semantics." %>
<% SUPPORTS_OPTIONAL_BULK = "This operation supports both single-object and bulk semantics.  For more information, see <a href='#optional-bulk-operations'>Optional Bulk Operations</a>." %>
<% SUPPORTS_NUMERICDATES = "You may use the query string parameter <b>numericDates</b> with a value of <code>true</code> to enable strict parsing of dates in numeric format.  See <a href='#dates-and-times'>Dates and Times</a> for more information." %>
<% REQUEST_ONLY_ATTRIBUTE = "This attribute can be specified in a request, but is never present in a response." %>
<% PARTIAL_SUCCESS = "When partial success is enabled, and one or more of the objects in the request fail to be added/updated/deleted, a standard Result Object is returned, but with a **message** of 'PARTIAL_SUCCESS' (instead of 'SUCCESS'), and a **resultCode** of 3. Additionally, the object contains a **failedItems** attribute -- an array of BulkItemFailure Objects that contains an item for each object in the request that failed to be added/updated/deleted." %>
<% SHARING_ERRORS = "If called with a single Share Object, and that user or group share already exists, error code **1025** is returned.  If called with an array of Share Objects, and one or more user or group shares in the array already exist, they are ignored and omitted from the response." %>
<% LIST_SHARES_RESPONSE_DESC = "By default, this operation returns only <i>item-level</i> shares (<b><a href='#share-object'>scope</b></a>='ITEM'). Use the <b>include</b> parameter to request that <i>workspace-level</i> shares (<b><a href='#share-object'>scope</b></a>=='WORKSPACE') also be returned." %>
<% WEBHOOKS_INTRO = "Webhooks provide a way for Smartsheet to automatically notify your external application or service when certain events occur in Smartsheet. Webhooks offer a more efficient alternative to using the API to periodically <i>poll</i> for changes." %>
<% CUSTOM_WELCOME_SCREEN_URL = "https://help.smartsheet.com/articles/1392225-customizing-a-welcome-message-upgrade-screen-enterprise-only-#welcomescreen" %>
<% USER_AUTO_PROVISIONING_URL = "https://help.smartsheet.com/articles/2072731-user-auto-provisioning-enterprise-only-" %>
<% PERSONAL_SETTINGS_MANAGE_EMAIL_URL = "https://help.smartsheet.com/articles/2392037-change-the-email-address-used-with-your-smartsheet-account#manageemails" %>
# <span class="customTOCSectionHeading">Smartsheet API 2.0</span>
Updated 2017-06-29

# Overview
## Introduction
> Click the corresponding tab above to see sample code in the language of your choice. For more detail, see Sample Code and SDKs)
[Smartsheet](https://www.smartsheet.com/) API 2.0 allows you to programmatically access and manage your organization's Smartsheet data and account information. The API allows you to do the following:

* Read and update sheets
* Manage folders and workspaces
* Administer users and accounts

You can view code examples in the programming language of your choice by clicking the corresponding tab in the dark-blue area in the rightmost pane.

## How Do I Start?

This documentation provides two Getting Started tutorials that walk you through making your first API call and interpreting the response to a GET sheet request. You may also want to bookmark or note the following resources:

* [Smartsheet Developer Portal:](http://developers.smartsheet.com) If registering, use a different email address from your paid Smartsheet account so you can test the API and make API calls
* Developer Newsletter (subscribe while at the Developer Portal using the <i>Get Developer Updates</i> form)
* [StackOverflow](https://stackoverflow.com/questions/tagged/smartsheet-api) using the "smartsheet-api" tag
* Additional [Getting Started documentation on GitHub](https://github.com/smartsheet-platform/getting-started)
* Contact us at [api@smartsheet.com](mailto:api@smartsheet.com)

## HTTP and REST

### RESTful Architecture

The REST URL structure follows typical resource-oriented conventions.

To get a list of sheets, use the following:

 `GET https://api.smartsheet.com/2.0/sheets`

This returns a list of Sheet Objects, where each Sheet has an “id” attribute.

To get details on the sheet with id 123456, use the following:

 `GET https://api.smartsheet.com/2.0/sheets/123456`

This Id pattern is repeated throughout the API. Columns, rows, cells, comments, attachments, or any other data element have a unique Id.

If you don't want to make raw HTTP calls, Smartsheet also has several software development kits (SDKs) that provide a higher level interface for popular programming languages. For more information, see Sample Code and SDKs.

### HTTP Verbs

Call the API using the following [standard HTTP methods](https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html):

* GET (to retrieve an object or multiple objects in a specific category)
* POST (to create)
* PUT (to modify)
* DELETE

### HTTP Status Codes

<%= partial "snippets/errorHandling.md.erb" %>

<aside class="notice">Smartsheet has custom error codes to help you troubleshoot issues. See the <a href="#complete-error-code-list">Complete Error Code List.</a></aside>

### HTTP Headers

Unless otherwise specified, all API endpoints expect request body data to be in [JSON](https://en.wikipedia.org/wiki/JSON), and the response body data is returned as JSON.

The following HTTP request headers may be required, depending on the operation and endpoint being invoked:

Header | Definition | Example |
-----|-----|-----|
*Authorization* | Required for all endpoints, except for POST /token. The access token. | Bearer ll352u9jujauoqz4gstvsae05
*Content-Type* | Required for POST and PUT requests. Defines the structure for the response. | application/json
*Assume-User* | Optional. Allows an admin to act on behalf of the user to make API calls. The email address used to identify the user must be URI-encoded. | jane.doe%40smartsheet.com

### Query Strings

Many API calls can be modified by including one or more of these common query strings:

Query String | Type | Description | More Info |
-----|-----|-----|-----|
pageSize | Number | Specifies the maximum integer of items to return per page, for example, pageSize=25. | Paging
page | String | Specifies which page to return, for example, page=4. | Paging
includeAll | boolean | If true, includes all results, for example, includeAll=true. | Paging
allowPartialSuccess | boolean | If true, allows bulk operations to process even if one or more operations are invalid for some reason, for example, allowPartialSuccess=true. | Bulk Operations
numericDates | boolean | If true, allows you to input or receive dates in numeric format, for example, numericDates=true. | Dates and Times
include/exclude | String | When applicable for a specific object, various include or exclude parameters are available, for example, include=formatting. | Object reference or Formatting

## Authentication and Access Tokens

> Example Request: Authentication and Access Tokens

```shell
curl https://api.smartsheet.com/2.0/users/me \
`-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05"
```
> Example Response:
The Smartsheet API uses OAuth 2.0 for Authentication and Authorization. An HTTP header containing an Access Token is required to authenticate each request.

If you want to get started quickly, or are developing a standalone application that can run with your credentials, follow these instructions:

1. Open the Account/Personal Settings form and click the "API Access" tab.
2. Click the "Generate new access token" button to obtain an access token.

The access token must be sent with every API call in an HTTP authorization header. Once you have an Access Token, include it in the **Authorization** header for every request you make:

`Authorization: Bearer ll352u9jujauoqz4gstvsae05`

The header name is <b>Authorization</b> and the value of the header is <b>Bearer ll352u9jujauoqz4gstvsae05</b>. Since the access token is being transmitted in clear text, all API calls are done over HTTPS.

<aside class="warning">The token generated runs with your credentials. Be sure to secure your tokens and do not share tokens with anyone.</aside>

<aside class="notice">If your application requires users to be able to login with their own account, you must implement the full OAuth flow. See the documentation for <a href="#third-party-app-development">Third-party App Development</a> and <a href="http://developers.smartsheet.com/register">Developer Registration</a>.</aside>

## Dates and Times

The Smartsheet API returns all dates and times in the [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) time zone in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format, that is, YYYY-MM-DDTHH:MM:SSZ.  If a date/time needs to be
displayed to an end-user in their local time zone, you must do the conversion using the user's time zone, which you can obtain by getting the current user.

You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter **numericDates** with a value of `true`.
This flag works for any API request.

## Sheets/Columns/Rows/Cells

Sheets are composed of rows, columns, and cells. A cell is identified by the Id of its row and column. The following table defines these terms and points you to places in this documentation where you can find more information:

UI Element | Description | More Info
-----|-----|-----|
Sheet | A Sheet can exist in a user's **Sheets** folder (Home), in a Folder, or in a Workspace. It is comprised of Columns, Rows, and Cells, and may optionally contain Attachments and/or Discussions. | Sheet Object
Column | A Column Object *defines* the type of the column, but does not actually contain cells. The Column Id identifies the cells in a row. | Column Object, Column types
Row | A Row is a component of a Sheet or Report. Each Row is composed of a collection of Cells, and may optionally contain Attachments and/or Discussions. | Row Object
Cell | A Cell is a location within a Sheet that may contain a value. A collection of Cells comprises each Row in a Sheet. | Cell Object, Cell reference

## Versioning and Changes

Smartsheet will add new functionality and bug fixes to the API over time. Make sure that your code can handle new JSON properties gracefully.
Also, make sure your code does not depend on the order in which JSON objects are returned, unless it is explicitly stated in this documentation.

# Getting Started

## Make Your First API Call

Before you write any code, try executing API requests using a tool like [cURL](https://curl.haxx.se/) or [Postman](https://www.getpostman.com/). By taking your code out of the equation, you can isolate troubleshooting to the raw Request and Response.

You must use an access token. See instructions at Authentication and Access Tokens. In the examples below, replace this sample token, "ll352u9jujauoqz4gstvsae05", with your actual token value.

To get a list of all your sheets, try the following command:

`curl -X GET -H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" "https://api.smartsheet.com/2.0/sheets"`

In Postman, the request looks like this:

<img src="images/postman-sampleb.png" alt="Postman screen shot">

The JSON result should look something like this (after formatting):
<pre class="center-column">
{
	"pageNumber": 1,
	"pageSize": 100,
	"totalPages": 1,
	"totalCount": 2,
	"data": [{
			"id": 6141831453927300,
			"name": "My first sheet",
			"accessLevel": "ADMIN",
			"permalink": "https://app.smartsheet.com/b/home?lx=8enlO7GkdYSz-cHHVus33A",
			"createdAt": "2016-01-28T22:02:35Z",
			"modifiedAt": "2016-08-09T17:50:06Z"
		},
		{
			"id": 6141831453927300,
			"name": "Sheet shared to me",
			"accessLevel": "VIEWER",
			"permalink": "https://app.smartsheet.com/b/home?lx=8enlO7GkdYSz-cHHVus33A",
			"createdAt": "2016-01-28T22:02:35Z",
			"modifiedAt": "2016-08-09T17:50:06Z"
		}
	]
}
</pre>

## How to Read a Sheet Response

Many Smartsheet API operations handle sheets, rows, columns, and cells. Each is identified by an Id and it is important to understand the relationship between these objects. Typically you loop through the columns to determine the Id of the column(s) you are interested in. Then you loop through the rows and contained cells to find actual values. The annotated sample response below illustrates these concepts by calling a very simple sheet called Employee Roster.

<img src="images/Employee_roster.png" alt="Basic sheet with 2 rows and 2 columns" />

Before you begin, you should already have an access token, which you used in the exercise above. Use the same access token for this walkthrough.

1. The first thing you must have is a sheetId. To find a sheetId through the UI, with the sheet open, click Sheet Actions in the left toolbar and select Properties. Note: use List Sheets if you want to do this programmatically.

    <img src="images/sheet-properties.png" alt="Image of the Sheet Properties window" />

2. Copy the sheetId into the API call, GET Sheets, as below:

    `curl -X GET -H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" "https://api.smartsheet.com/2.0/sheets/6141831453927300"`

3. The sample request and response are displayed below. NOTE: while JSON doesn't have a comment feature, this sample uses comments to help you identify the objects in the response.

<pre class="center-column">
{
	"id": 6141831453927300,                         // This is the Id of the entire sheet
	"name": "My first sheet",
	"columns": [{                                   // Each Column Object connects column title to Id and defines the column details
			"id": 2517104256673668,                 // Column Id identifies cells on a row
			"index": 0,
			"title": "Name",                        // This is the column name as seen in the UI
			"type": "TEXT_NUMBER",
			"primary": true,
			"width": 150
		},
		{
			"id": 7020703884044164,
			"index": 1,
			"title": "EmployeeId",
			"type": "TEXT_NUMBER",
			"width": 150
		}
	],
	"rows": [{                                      // A Row Object
			"id": 564480076736388,                  // You must use the row Id to make updates
			"rowNumber": 1,
			"expanded": true,
			"createdAt": "2017-05-12T16:52:38Z",
			"modifiedAt": "2017-05-22T20:40:14Z",
			"cells": [{                             // Each row contains an array of Cells, which have the actual content
					"columnId": 2517104256673668,   // The column Id can be interpreted by looking at the array of
                                                    // column definitions above. That tells us this is the "Name" column
					"value": "John Doe",            // Actual cell value
					"displayValue": "John Doe"      // How the cell value is displayed in the UI
				},
				{
					"columnId": 7020703884044164,
					"value": 12345,
					"displayValue": "12345"
				}
			]
		},
		{
			"id": 5068079704106884,
			"rowNumber": 2,
			"siblingId": 564480076736388,
			"expanded": true,
			"createdAt": "2017-05-12T16:52:38Z",
			"modifiedAt": "2017-05-22T20:40:14Z",
			"cells": [{
					"columnId": 2517104256673668,
					"value": "Jane Roe",
					"displayValue": "Jane Roe"
				},
				{
					"columnId": 7020703884044164,
					"value": 67890,
					"displayValue": "67890"
				}
			]
		}
	]
}
</pre>
<br/>

This core hierarchy of Sheet > Column > Row > Cell is essential to working with the Smartsheet API. As your user's sheets grow in complexity, the responses do too. This walkthrough has given you some navigational aid in finding the right value to plug into your API calls. Use the API Reference and the example language tabs to learn more.

# Sample Code and SDKs

Smartsheet has SDKs providing a higher level interface for several languages.

Language | SDK | Sample application
-----|-----|-----|
| C# | [smartsheet-csharp-sdk](https://github.com/smartsheet-platform/smartsheet-csharp-sdk) | [csharp-read-write-sheet](https://github.com/smartsheet-samples/csharp-read-write-sheet)
| Java | [smartsheet-java-sdk](https://github.com/smartsheet-platform/smartsheet-java-sdk) | [java-read-write-sheet](https://github.com/smartsheet-samples/java-read-write-sheet)
| Node.js | [smartsheet-javascript-sdk](https://github.com/smartsheet-platform/smartsheet-javascript-sdk) | [node-read-write-sheet](https://github.com/smartsheet-samples/node-read-write-sheet)
| Python | [smartsheet-python-sdk](https://github.com/smartsheet-platform/smartsheet-python-sdk) | [python-read-write-sheet](https://github.com/smartsheet-samples/python-read-write-sheet)

Submit your vote for additional language coverage by sending email to <a href="mailto:api@smartsheet.com">api@smartsheet.com</a>.

# Other Topics

## Access Levels

Sheets, Workspaces, and Templates have an **accessLevel** attribute that describes the current user's access level to that object.
This corresponds directly to the sharing and access controls of Smartsheet that are available through the Smartsheet UI.
The **accessLevel** attribute has one of the following values:

Value | Description |
-----|-----|
ADMIN | The user can edit and share the resource, and can alter the structure of the resource as well.
EDITOR | The user can edit the resource, but cannot alter the structure of, delete or share the resource.
EDITOR_SHARE | The same as EDITOR, but with the ability to share the resource to other users.
OWNER | The user has complete control over the resource.
VIEWER | The user has read-only access to the resource.

# Third-party App Development

In addition to being a powerful work management tool, Smartsheet is a powerful application platform.

As a developer, you may be building applications that allow any Smartsheet user to access his or her Smartsheet data. The following sub-sections describe next steps.

## Developer Registration

Third-party app registration and management is available via the Developer Tools.
To get access to Developer Tools, you must first [register](http://developers.smartsheet.com/register) as a Smartsheet developer.
Follow the instructions on the registration form to add Developer Tools to an existing Smartsheet account or create a new Smartsheet developer account.

Once you complete the developer registration, log in to Smartsheet to access Developer Tools.

1. Click the **Account** button in the upper-left corner of your Smartsheet screen.
2. Now that you are registered as a Smartsheet developer, click the new **Developer Tools** option in the dropdown menu to open Developer Tools.
3. Before you can register your first app, you must complete your developer profile. Developer profile is a public profile that anyone can access to learn more about you and your applications.
4. Once your developer profile is complete, you can use **Developer Tools** to register and manage your apps.

## Register Your App

To build a third-party app, you must first register it with Smartsheet using Developer Tools:

1. Login to Smartsheet.
2. Click the **Account** button in the upper-left corner of your Smartsheet screen and click **Developer Tools**.
3. Create new app and provide the required information, including name, description, contact info and a redirect URL. Redirect URL (also known as the "callback URL") is the URL in your app where Smartsheet must redirect after authentication is complete.
4. Use the generated app **client id** and **secret** to connect your app to Smartsheet. See OAuth Flow for details on how to use **client id** and **secret** to do that.

## Access Scopes

To access an end user's Smartsheet data, your application must explicitly ask for specific Access Scopes.
The Access Scopes enable your app to communicate to the end users what type of operations it is performing.
Access Scopes do not override existing Access Level restrictions.
For example, having the Access Scope of WRITE_SHEETS does not allow your app to update a sheet on which the end user has VIEWER access level.

The Access Scopes are as follows:

Access Scope | Description |
-----|-----|
ADMIN_SHEETS | Modify sheet structure, including column definition, publish state, etc.
ADMIN_SIGHTS | Modify Sight structure.
ADMIN_USERS | Add and remove users from your Smartsheet organization; create groups and manage membership.
ADMIN_WEBHOOKS | Create, delete. and update webhooks; get all webhooks; reset shared secret.
ADMIN_WORKSPACES | Create and manage workspaces and folders, including sharing.
CREATE_SHEETS | Create new sheets.
CREATE_SIGHTS | Create new Sights.
DELETE_SHEETS | Delete sheets.
DELETE_SIGHTS | Delete Sight.
READ_CONTACTS | Retrieve contacts.
READ_SHEETS | Read all sheet data, including attachments, discussions, and cell data.
READ_SIGHTS | Read all Sight data.
READ_USERS | Retrieve users and groups for your Smartsheet organization.
SHARE_SHEETS | Share sheets, including sending sheets as attachments.
SHARE_SIGHTS | Share Sight.
WRITE_SHEETS | Insert and modify sheet data, including attachments, discussions, and cell data.

<aside class="notice"><b>Additional Info:</b><ul><li>User-generated Access Tokens are granted all of these permissions.</li><li>Third-party apps must request at least one access scope, but should only request the scopes necessary.</li><li>Once a third-party app attains a valid access token, it can execute a <a href="#get-current-user">Get Current User</a> operation, regardless of which access scopes were requested.</li></ul></aside>

## OAuth Flow

Your app must implement a 3-legged OAuth flow to retrieve an access token that can be used to access Smartsheet data on behalf of an end user.
The following sub-sections describe next steps.

### Request Authorization From the User

To request authorization from an end user, direct your user to `https://app.smartsheet.com/b/authorize` with the following parameters through either a `GET` or `POST`. The parameter values must be URL-encoded:

Value | Description |
-----|-----|
response_type<br/>(required) | Must be set to "code".
client_id<br/>(required) | Client Id for your app.
redirect_uri<br/>(optional) | Redirect URL you registered for your app (including protocol, for example, "http://"); if not provided, the redirect URL set during registration is used.
scope<br/>(required) | Space-delimited list of access scopes to which you are asking the user to grant access (note the spaces must be URL-encoded as "%20").
state<br/>(optional) | Arbitrary string returned to your app; intended to be used by you to ensure that this redirect is indeed from an OAuth flow that you initiated.

Here is an example of a URL to which you would send your user as a `GET` request:

`https://app.smartsheet.com/b/authorize?response_type=code&client_id=dheu3dmkd32fhxme&scope=READ_SHEETS%20WRITE_SHEETS&state=MY_STATE`

If your user has not logged in to Smartsheet, he/she will first be directed to the Smartsheet login page.
After a successful login, Smartsheet prompts your user to allow or deny the access scopes you requested.

### Obtain the Authorization Code

During the above steps for requesting authorization from the user, if the user clicks "Allow", Smartsheet redirects the user to the **redirect_uri** with the following parameters:

Value | Description |
-----|-----|
code | Authorization code required to obtain access token.
expires_in | Number of seconds code is valid once issued; this is always four minutes - you must obtain an access token within that time.
state | **state** string specified earlier.

If the user clicks "Deny", Smartsheet redirects the user to the **redirect_uri** with the following parameters:

Value | Description |
-----|-----|
error | "access_denied".
state | **state** string specified earlier.

Other errors that may be returned include:

Value | Description |
-----|-----|
unsupported_response_type | response_type must be set to "code".
invalid_scope | One or more of the requested access scopes are invalid. Please check the list of access scopes.

### Obtain an Access Token

> Request an access token:
> Successful Response:
> Error Response:
Once you’ve successfully obtained an authorization code, the next step is to obtain an access token.
To do so, make a `POST` request to `https://api.smartsheet.com/2.0/token` with the following parameters:

Value | Description |
-----|-----|
grant_type<br/>(required) | Must be set to "authorization_code".
client_id<br/>(required) | Client Id for your app.
code<br/>(required) | Authorization code returned in the previous step.
redirect_uri<br/>(optional) | Redirect URL registered for your app, including the protocol (for example, "http://"); if not provided, the redirect URL set during registration is used.
hash<br/>(required) | SHA-256 hash of your app secret concatenated with a pipe and the authorization code.  The app_secret is never sent with the request. To obtain an app_secret, see Register Your App.

<aside class="notice">The "Get Token" request must have the <b>Content-Type</b> header set to 'application/x-www-form-urlencoded'.</aside>

Reminder: you can see what a success call looks like in the dark-blue area in the rightmost pane.

Possible OAuth error types:

Value | Description |
-----|-----|
invalid_request | The request parameters are invalid or missing.
invalid_client | The client information is invalid. Ensure your client id is correct.
invalid_grant | The authorization code or refresh token is invalid or expired, the redirect_uri does not match, or the hash value does not match the app secret and/or code.
unsupported_grant_type | grant_type must equal "authorization_code" or "refresh_token".

### Refresh an Access Token

> Refresh an access token:
> Successful Response:
Access tokens expire after 7 days. Use the refresh token to obtain a new access token.
Once you obtain the new access token, you must use it in place of the old one, which is no longer valid.

To do so, make a `POST` request to `https://api.smartsheet.com/2.0/token` with the following parameters:

Value | Description |
-----|-----|
grant_type<br/>(required)| Must be set to "refresh_token".
client_id<br/>(required)| Client Id for your app.
refresh_token<br/>(required)| refresh_token value that came with the access token.
redirect_uri<br/>(optional)| Redirect URL registered for your app, including the protocol (for example, "http://").
hash<br/>(required)| SHA-256 hash of your app secret concatenated with a pipe and the refresh token value. To obtain an app_secret, see Register Your App.

<aside class="notice">The "Refresh Token" request must have the <b>Content-Type</b> header set to 'application/x-www-form-urlencoded'.</aside>

### Get Basic User Info
Once you have obtained an access token on behalf of the user, you can fetch basic information (including user Id, name, etc.) about the caller using the Get Current User operation.

# Work at Scale

## Bulk Operations

The Smartsheet API supports a integer of bulk operations that can operate on multiple objects.  Unlike single-object operations, bulk operations allow you to create, update, or delete
multiple objects in a single request. For example, if you want to update 10 rows within a sheet, do so using a single Update Rows request, rather than executing 10 separate requests - one for each row.

### Optional Bulk Operations

Several endpoints support *optional* bulk `POST` operations which exist alongside the standard single-object `POST`.  For these endpoints, you may pass in either a single object or an array of objects.
Depending on what was passed in, the Result Object returned contains either a single object or an array.  An example optional bulk operation is POST /favorites: you can
pass in a single Favorite Object to create a single favorite, or an array of Favorite objects to create multiple favorites in a single request.  Endpoints which support bulk operations are
noted as such in the API reference documentation.

**NOTE**: Most `POST` operations fail when attempting to create a single object which already exists (for example, favorites, shares, group members).  However, for the corresponding bulk operations, these endpoints do *not*
return an error if one or more items in the array already exist.  Existing items are simply ignored, and the Result Object returned omits them.

### Partial Success

In general, the default behavior for bulk operations is to fail outright if any of the objects in the request are invalid for some reason.  If successful, Smartsheet creates/updates/deletes all objects in the request;
if not, no objects are changed.

However, there are some operations that support *partial success*, which means the operation still succeeds even if one or more of the objects in the request fails for some reason (for example, an object is invalid).  Partial success is
*not* the default mode for an operation and you must explicitly enable it by using a query string parameter.  This is noted in the documentation for operations that support partial success.

<%= PARTIAL_SUCCESS %>

## Paging

The Smartsheet API contains a integer of *index endpoints* (typically denoted in the documentation with titles beginning with "Get All" or "List") which return arrays of objects.
Examples include `GET` /users, /sheets, /sheets/{sheetId}/columns, and many others.  These endpoints all support pagination, meaning
you can retrieve paged subsets of results, enabling you to process potentially large result sets in smaller chunks.

### Paging Query String Parameters
Index endpoints all support pagination via the following optional query string parameters:

Value | Type | Description |
-----|-----|-----|
**pageSize** 	| integer  | The maximum integer of items to return per page.  Unless otherwise stated for a specific endpoint, defaults to **100** if not specified.
**page**		| integer  | Which page to return.  Defaults to **1** if not specified.  If you specify a value greater than the total integer of pages, the last page of results is returned.
**includeAll**  | boolean | If true, include all results, that is, do not paginate.  Mutually exclusive with **pageSize** and **page** (they are ignored if **includeAll**=true is specified).

<aside class="notice">Most index endpoints default to a page size of 100 results.  If you want all results at once, you must specify the <code class="prettyprint">includeAll=true</code> query string parameter.</aside>

### Paged Responses

Index endpoints all return paged responses via an **IndexResult** Object which provides paging metadata that can be used to navigate the full set of pages in the result set:

<%= partial "snippets/indexResult_object.md.erb" %>

## Rate Limiting

<%= partial "snippets/rateLimiting.md.erb" %>

# <span class="customTOCSectionHeading">API Reference</span>

# Attachments

Attachments can exist on a Comment (that is, within a Discussion), on a Row, or on a Sheet.

## <%= OBJECTS %>

### Attachment Object
```php

/**
 * @var integer Attachment Id
 * @Type("integer")
 */
private $id;

/**
 * @var string Attachment name
 * @Type("string")
 */
private $name;

/**
 * @var string Attachment temporary URL (files only)
 * @Type("string")
 */
private $url;

/**
 * @var integer Attachment temporary URL time to live (files only)
 * @Type("integer")
 */
private $urlExpiresInMillis;

/**
 * @var string Attachment type (one of FILE, GOOGLE_DRIVE, LINK, BOX_COM, DROPBOX, EVERNOTE, EGNYTE, ONEDRIVE)
 * @Type("string")
 */
private $attachmentType;

/**
 * @var string Attachment sub type, valid only for either GOOGLE_DRIVE attachments or EGNYTE attachments:<ul><li>possible values for GOOGLE_DRIVE attachments: DOCUMENT, SPREADSHEET, PRESENTATION, PDF, DRAWING</li><li>possible values for EGNYTE attachments: FOLDER</li></ul>
 * @Type("string")
 */
private $attachmentSubType;

/**
 * @var DateTime A DateTime of when the attachment was originally added
 * @Type("DateTime")
 */
private $createdAt;

/**
 * @var User User Object containing name and email of the creator of this attachment
 * @Type("User")
 */
private $createdBy;

/**
 * @var string Attachment MIME type (PNG, etc.)
 * @Type("string")
 */
private $mimeType;

/**
 * @var string The type of object the attachment belongs to. One of "SHEET", "ROW", or "COMMENT"
 * @Type("string")
 */
private $parentType;

/**
 * @var integer The id of the parent
 * @Type("integer")
 */
private $parentId;

/**
 * @var integer The size of the file, if the attachmentType is FILE
 * @Type("integer")
 */
private $sizeInKb;
```

## Post an Attachment

Like the Smartsheet Web app, the Smartsheet API allows uploading files to Sheets, Rows and Comments.
You can upload a file by performing either a *simple upload* or a *multipart upload*.

A simple upload allows you to add a single file attachment to the specified object.
For example, you can perform a simple upload to upload a file to a sheet, row, or comment.

A multipart upload allows you to add a single file attachment to the specified object (that is, attach a file to a sheet, row, or comment), or to create an object and attach a file using a single request.
For example, you can perform a multipart upload to create a new Comment that contains a single file attachment or to add a new Discussion to a Sheet that contains a single file attachment.

<aside class="notice">Important Notes:<ul><li>Max file size for uploads through the API is currently limited to 30mb.</li><li>Posting an attachment is a resource-intensive operation and incurs 10 additional requests against the rate limit.</li></ul></aside>

### Multipart Uploads

A multipart upload request allows you to add a single file attachment to the specified object (that is, attach a file to a sheet, row, or comment), or to create an object and upload a file using a single request.
For example, you can perform a multipart upload to create a new Comment that contains a single file attachment or to add a new Discussion to a Sheet that contains a single file attachment.

<aside class="notice">Most programming languages have libraries that can be used to assemble multipart requests.</aside>

A multipart upload request must include the following HTTP headers:

     |     |
-----|-----|
/**
 * @var Must be set to `multipart/form-data`, and include the boundary string that separates the parts in the request payload.
**Content-Length** The length of the request payload.
 * @Type("Must be set to `multipart/form-data`, and include the boundary string that separates the parts in the request payload.
**Content-Length**")
 */
private $Content-Type;


The request body of a multipart upload request contains one or more *parts*, each part containing either JSON or a file to upload.
The request body must contain at least one part.
Each part must start with the boundary string specified in the **Content-Type** request header, and must contain the following part headers:

     |     |
-----|-----|
/**
 * @var Contains the following semicolon-delimited items:<ul><li>`form-data`</li><li>`name=`"*partname*"</li><li>`filename=`"*filename*" (only required for file parts)</li></ul><b><i>Note</i></b>: Values specified in the Content-Disposition header must be URL-encoded.
**Content-Type** The content type of the part: `application/json` for JSON objects, or the applicable MIME type for file parts
 * @Type("Contains the following semicolon-delimited items:<ul><li>`form-data`</li><li>`name=`"*partname*"</li><li>`filename=`"*filename*" (only required for file parts)</li></ul><b><i>Note</i></b>: Values specified in the Content-Disposition header must be URL-encoded.
**Content-Type**")
 */
private $Content-Disposition;


The last part in the request must be followed by the boundary string, followed by two hyphens.

The documentation for each operation that supports multipart uploads specifies the integer and names of parts that are expected for the operation.
File parts must have the part name "file", and documentation for operations which allow for JSON object parts specify the required part name for the JSON part.

The following example shows a multipart upload request that creates a Comment containing the specified text and file attachment:

`POST https://api.smartsheet.com/2.0/sheets/4509093797881732/discussions/2889925487028100/comments`
`Authorization: Bearer ll352u9jujauoqz4gstvsae05`
`Content-Length: 29008`
`Content-Type: multipart/form-data; boundary=----gU8h01zAAp3LagBr`

`------gU8h01zAAp3LagBr`
`Content-Disposition: form-data; name="comment"`
`Content-Type: application/json`

`{ "text": "Please review the attached image." }`
`------gU8h01zAAp3LagBr`
`Content-Disposition: form-data; name="file"; filename="picture.jpg"`
`Content-Type: image/jpeg`

*< Binary content for file >*
`------gU8h01zAAp3LagBr--`

### Simple Uploads

A simple upload allows you to add a single file attachment to the specified object.
For example, you can perform a simple upload to upload a file to a sheet, row, or comment.

To perform this kind of upload, you must set specific headers to tell Smartsheet about the file. The following three headers are required:

     |     |
-----|-----|
/**
 * @var `attachment` to tell the API that a file is in the body of the POST request, followed by a semicolon, followed by `filename=` and the URL-encoded filename in quotes
**Content-Type** Can be left blank if it is not known (but must be present); Smartsheet makes its best guess based on the extension of the file.
 * @Type("`attachment` to tell the API that a file is in the body of the POST request, followed by a semicolon, followed by `filename=` and the URL-encoded filename in quotes
**Content-Type**")
 */
private $Content-Disposition;

/**
 * @var Must be set to the size of the file, in bytes. For example to determine file size using in UNIX: <p>`$ ls -l ProgressReport.docx`<br/>`5463 ProgressReport.docx`</p>

The following example request shows a simple upload that adds a file attachment to a Sheet:

`POST https://api.smartsheet.com/2.0/sheets/4509093797881732/attachments`
`Authorization: Bearer ll352u9jujauoqz4gstvsae05`
`Content-Disposition: attachment; filename="ProgressReport.docx"`
`Content-Type: application/msword`
`Content-Length: 5463`

*< Binary content for file >*

As shown in this example, the contents of the file is included in the body of the `POST` request. In most programming languages, this is done by reading the file from an input stream and writing it out to the output stream of the HTTP request.

## Attach File to Comment

> Example Request (multipart): Attach File to Comment
> Example Request (simple): Attach File to Comment
> Example Response:

<%= partial "snippets/attachFile_response.md.erb" %>

`POST /sheets/{sheetId}/comments/{commentId}/attachments`

<% SUPPORTS_MULTIPART = "This operation can be performed using a simple upload or a multipart upload. For more information, see Post an Attachment." %>

Attaches a file to the Comment. <%= SUPPORTS_MULTIPART %>

<% NEW_ATTACHMENT = "This operation always creates a new attachment.  To upload a new version of the same attachment, use the Attach New Version operation." %>

<%= NEW_ATTACHMENT %>

<%= partial "snippets/attachFile_table.md.erb" %>

## Attach File to Row

> Example Request (multipart): Attach File to Row
> Example Request (simple): Attach File to Row

> Example Response:

<%= partial "snippets/attachFile_response.md.erb" %>

`POST /sheets/{sheetId}/rows/{rowId}/attachments`

Attaches a file to the Row. <%= SUPPORTS_MULTIPART %>

<%= NEW_ATTACHMENT %>

<%= partial "snippets/attachFile_table.md.erb" %>

## Attach File to Sheet

> Example Request (multipart): Attach File to Sheet
> Example Request (simple): Attach File to Sheet
> Example Response:

<%= partial "snippets/attachFile_response.md.erb" %>

`POST /sheets/{sheetId}/attachments`

Attaches a file to the Sheet. <%= SUPPORTS_MULTIPART %>

<%= NEW_ATTACHMENT %>

<%= partial "snippets/attachFile_table.md.erb" %>

## Attach URL to Comment

> Example Request: Attach URL to Comment

> Example Response:

<%= partial "snippets/attachURL_response.md.erb" %>

`POST /sheets/{sheetId}/comments/{commentId}/attachments`

Attaches a URL to the Comment.

<%= partial "snippets/attachURL_table.md.erb" %>

## Attach URL to Row

> Example Request: Attach URL to Row
> Example Response:

<%= partial "snippets/attachURL_response.md.erb" %>

`POST /sheets/{sheetId}/rows/{rowId}/attachments`

Attaches a URL to the Row.

<%= partial "snippets/attachURL_table.md.erb" %>

## Attach URL to Sheet

> Example Request: Attach URL to Sheet
> Example Response:

<%= partial "snippets/attachURL_response.md.erb" %>

`POST /sheets/{sheetId}/attachments`

Attaches a URL to the Sheet.

<%= partial "snippets/attachURL_table.md.erb" %>

## Delete Attachment

> Example Request: Delete Attachment
> Example Response:
`DELETE /sheets/{sheetId}/attachments/{attachmentId}`

Deletes the Attachment specified in the URL.

<aside class="notice">If the Attachment has multiple versions this deletes only the specific version specified by the attachmentId (each version has a different attachment Id).</aside>

         |
 * @Type("Must be set to the size of the file, in bytes. For example to determine file size using in UNIX: <p>`$ ls -l ProgressReport.docx`<br/>`5463 ProgressReport.docx`</p>

The following example request shows a simple upload that adds a file attachment to a Sheet:

`POST https://api.smartsheet.com/2.0/sheets/4509093797881732/attachments`
`Authorization: Bearer ll352u9jujauoqz4gstvsae05`
`Content-Disposition: attachment; filename="ProgressReport.docx"`
`Content-Type: application/msword`
`Content-Length: 5463`

*< Binary content for file >*

As shown in this example, the contents of the file is included in the body of the `POST` request. In most programming languages, this is done by reading the file from an input stream and writing it out to the output stream of the HTTP request.

## Attach File to Comment

> Example Request (multipart): Attach File to Comment
> Example Request (simple): Attach File to Comment
> Example Response:

<%= partial "snippets/attachFile_response.md.erb" %>

`POST /sheets/{sheetId}/comments/{commentId}/attachments`

<% SUPPORTS_MULTIPART = "This operation can be performed using a simple upload or a multipart upload. For more information, see Post an Attachment." %>

Attaches a file to the Comment. <%= SUPPORTS_MULTIPART %>

<% NEW_ATTACHMENT = "This operation always creates a new attachment.  To upload a new version of the same attachment, use the Attach New Version operation." %>

<%= NEW_ATTACHMENT %>

<%= partial "snippets/attachFile_table.md.erb" %>

## Attach File to Row

> Example Request (multipart): Attach File to Row
> Example Request (simple): Attach File to Row

> Example Response:

<%= partial "snippets/attachFile_response.md.erb" %>

`POST /sheets/{sheetId}/rows/{rowId}/attachments`

Attaches a file to the Row. <%= SUPPORTS_MULTIPART %>

<%= NEW_ATTACHMENT %>

<%= partial "snippets/attachFile_table.md.erb" %>

## Attach File to Sheet

> Example Request (multipart): Attach File to Sheet
> Example Request (simple): Attach File to Sheet
> Example Response:

<%= partial "snippets/attachFile_response.md.erb" %>

`POST /sheets/{sheetId}/attachments`

Attaches a file to the Sheet. <%= SUPPORTS_MULTIPART %>

<%= NEW_ATTACHMENT %>

<%= partial "snippets/attachFile_table.md.erb" %>

## Attach URL to Comment

> Example Request: Attach URL to Comment

> Example Response:

<%= partial "snippets/attachURL_response.md.erb" %>

`POST /sheets/{sheetId}/comments/{commentId}/attachments`

Attaches a URL to the Comment.

<%= partial "snippets/attachURL_table.md.erb" %>

## Attach URL to Row

> Example Request: Attach URL to Row
> Example Response:

<%= partial "snippets/attachURL_response.md.erb" %>

`POST /sheets/{sheetId}/rows/{rowId}/attachments`

Attaches a URL to the Row.

<%= partial "snippets/attachURL_table.md.erb" %>

## Attach URL to Sheet

> Example Request: Attach URL to Sheet
> Example Response:

<%= partial "snippets/attachURL_response.md.erb" %>

`POST /sheets/{sheetId}/attachments`

Attaches a URL to the Sheet.

<%= partial "snippets/attachURL_table.md.erb" %>

## Delete Attachment

> Example Request: Delete Attachment
> Example Response:
`DELETE /sheets/{sheetId}/attachments/{attachmentId}`

Deletes the Attachment specified in the URL.

<aside class="notice">If the Attachment has multiple versions this deletes only the specific version specified by the attachmentId (each version has a different attachment Id).</aside>

    ")
 */
private $Content-Length;

-----|-----|
<%= SCOPE %> | WRITE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | Result Object

## Get Attachment

> Example Request: Get Attachment
> Example Response:
`GET /sheets/{sheetId}/attachments/{attachmentId}`

Fetches the Attachment specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | Attachment Object. For File attachments, this includes a temporary URL for downloading the file.<br/><br/>Currently, the temporary URL is set to expire in 120000 milliseconds, or 2 minutes.

## List Attachments

> Example Request: List Attachments
> Example Response:
`GET /sheets/{sheetId}/attachments`

Gets a list of all Attachments that are on the Sheet, including Sheet, Row, and Discussion level Attachments.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | IndexResult Object containing an array of Attachment Objects

## List Discussion Attachments

> Example Request: List Discussion Attachments
> Example Response:
`GET /sheets/{sheetId}/discussions/{discussionId}/attachments`

Gets a list of all Attachments that are in the Discussion.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | IndexResult Object containing an array of Attachment Objects

## List Row Attachments

> Example Request: List Row Attachments
> Example Response:
`GET /sheets/{sheetId}/rows/{rowId}/attachments`

Gets a list of all Attachments that are on the Row, including Row and Discussion level Attachments.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | IndexResult Object containing an array of Attachment Objects

## Versioning

### Attach New Version

> Example Request (multipart): Attach New Version
> Example Request (simple): Attach New Version
> Example Response:
`POST /sheets/{sheetId}/attachments/{attachmentId}/versions`

Uploads a new version of a file to a Sheet or Row. <%= SUPPORTS_MULTIPART %>

<aside class="notice">Uploading new versions is not supported for URL attachments.</aside>

<%= partial "snippets/attachFile_table.md.erb" %>

### Delete All Versions

> Example Request: Delete All Versions
> Example Response:
`DELETE /sheets/{sheetId}/attachments/{attachmentId}/versions`

Deletes all versions of the attachment corresponding to the specified Attachment Id.  For attachments with multiple versions, this effectively deletes the attachment from the object that it’s attached to.

     |     |
-----|-----|
<%= SCOPE %> | WRITE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | Result Object

### List Versions

> Example Request: List Versions
> Example Response:
`GET /sheets/{sheetId}/attachments/{attachmentId}/versions`

Gets a list of all versions of the given Attachment Id, in order from newest to oldest.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | IndexResult Object containing an array of Attachment Objects

<aside class="notice">To retrieve a download URL for a file attachment, use the Get Attachment operation for the specific version you want to download.</aside>

# Cells

A collection of Cells comprises each Row in a Sheet.

## <%= OBJECTS %>

### Cell Object
```php

/**
 * @var integer The Id of the column that the cell is located in
 * @Type("integer")
 */
private $columnId;

/**
 * @var string See type definition on the Column Object.<br/>Only returned if the **include** query string parameter contains **columnType**.
 * @Type("string")
 */
private $columnType;

/**
 * @var string,<br/>integer,<br/>or boolean A string, a integer or a boolean value -- depending on the cell type and the data in the cell.  See Cell Reference.
 * @Type("string,<br/>integer,<br/>or boolean")
 */
private $value;

/**
 * @var string Visual representation of cell contents, as presented to the user in the UI.  See Cell Reference.
 * @Type("string")
 */
private $displayValue;

/**
 * @var ObjectValue Optionally included object representation of the cell's value. Used for updating predecessor cell values.
 * @Type("ObjectValue")
 */
private $objectValue;

/**
 * @var string The  formula for a cell, if set
 * @Type("string")
 */
private $formula;

/**
 * @var Hyperlink A hyperlink to a URL, sheet, or report
 * @Type("Hyperlink")
 */
private $hyperlink;

/**
 * @var CellLink An inbound link from a cell in another sheet.  This cell's value mirrors the linked cell's value.
 * @Type("CellLink")
 */
private $linkInFromCell;

/**
 * @var CellLink[] An array of CellLink objects.  Zero or more outbound links from this cell to cells in other sheets whose values mirror this cell's value.
 * @Type("CellLink[]")
 */
private $linksOutToCells;

/**
 * @var boolean (Admin only) Flag indicating whether the cell value can contain a value outside of the validation limits (value = `true`). When using this parameter, you must also set **strict** to `false` to bypass value type checking. This property is honored for POST or PUT actions that update rows.
 * @Type("boolean")
 */
private $overrideValidation;

/**
 * @var string The format descriptor (see Formatting)<br/>Only returned if the **include** query string parameter contains **format** and this cell has a non-default format applied.
 * @Type("string")
 */
private $format;

/**
 * @var string The format descriptor describing this cell's conditional format (see Formatting).<br/>Only returned if the **include** query string parameter contains **format** and this cell has a conditional format applied.
 * @Type("string")
 */
private $conditionalFormat;

/**
 * @var boolean Set to **false** to enable lenient parsing. Defaults to **true**. <%= REQUEST_ONLY_ATTRIBUTE %> See Cell Value Parsing for more information about using this attribute.
 * @Type("boolean")
 */
private $strict;

/**
 * @var Image The image that the cell contains.<br/>Only returned if the cell contains an image.
 * @Type("Image")
 */
private $image;
```

### Cell History Object

Extends the Cell Object.

/**
 * @var DateTime The datetime for when the change was made to the cell
 * @Type("DateTime")
 */
private $modifiedAt;

/**
 * @var User User Object containing the name and email of the User that made the change
 * @Type("User")
 */
private $modifiedBy;
```

### CellLink Object

Represents a link to a Cell in a different Sheet.

<aside class="notice">If status is not "OK" (for example, there is a problem with the link), any or all of the following attributes may be null: <ul><li>sheetId</li><li>rowId</li><li>columnId</li></ul></aside>

/**
 * @var string One of the following values:<ul><li>**OK**: the link is in a good state</li><li>**BROKEN**: the row or sheet linked to was deleted</li><li>**INACCESSIBLE**: the sheet linked to cannot be viewed by this user</li><li>Several other values indicating unusual error conditions: **NOT_SHARED**, **BLOCKED**, **CIRCULAR**, **INVALID**, and **DISABLED**.</li></ul>
 * @Type("string")
 */
private $status;

/**
 * @var integer Sheet Id of the sheet that the linked cell belongs to
 * @Type("integer")
 */
private $sheetId;

/**
 * @var integer Row Id of the linked cell
 * @Type("integer")
 */
private $rowId;

/**
 * @var integer Column Id of the linked cell
 * @Type("integer")
 */
private $columnId;

/**
 * @var string Sheet name of the linked cell
 * @Type("string")
 */
private $sheetName;
```

### Hyperlink Object

Represents a hyperlink to a URL, a Sheet, a Report, or a Sight.

<aside class="notice">If the Sheet, Report, or Sight that is linked to was deleted, this object may be empty (that is, all values null).</aside>

/**
 * @var string When the hyperlink is a URL link, this property contains the URL value.<br/><br/>When the hyperlink is a Sheet/Report/Sight link (that is, **sheetId** or **reportId** or **sightId** is non-null), this property contains the permalink to the Sheet, Report, or Sight.
 * @Type("string")
 */
private $url;

/**
 * @var integer If non-null, this hyperlink is a link to the Sheet with this Id.
 * @Type("integer")
 */
private $sheetId;

/**
 * @var integer If non-null, this hyperlink is a link to the Report with this Id.
 * @Type("integer")
 */
private $reportId;

/**
 * @var integer If non-null, this hyperlink is a link to the Sight with this Id.
 * @Type("integer")
 */
private $sightId;
```

### ObjectValue Object

The base object for values found in the **Cell.objectValue** attribute. Its **objectType** attribute indicates the type of the object.
This object itself is not used directly.

/**
 * @var string One of DATE, DATETIME, ABSTRACT_DATETIME, CONTACT, DURATION, or PREDECESSOR_LIST
 * @Type("string")
 */
private $objectType;
```

### PredecessorList Object

> Example Update Row Request for a Predecessor Cell:
> Example Response:
Extends the ObjectValue Object.

In a project sheet with dependencies enabled, the **objectValue** attribute for predecessor cells is an object of this type, which represents the predecessors for the row.

/**
 * @var string PREDECESSOR_LIST
 * @Type("string")
 */
private $objectType;

/**
 * @var Predecessor[] Array of Predecessor Objects.
 * @Type("Predecessor[]")
 */
private $predecessors;
```

### Predecessor Object
     |     |     |
-----|-----|-----|
**rowId** | integer| The Id of the predecessor row
/**
 * @var integer The row integer of the predecessor row. Omitted if **invalid** is true. Read-only.
 * @Type("integer")
 */
private $rowNumber;

/**
 * @var string The type of the predecessor. One of FS, FF, SS, or SF.
 * @Type("string")
 */
private $type;

/**
 * @var Duration The lag value of this predecessor. Omitted if there is no lag.
 * @Type("Duration")
 */
private $lag;

/**
 * @var boolean True if the row referenced by rowId is not a valid row in this sheet, or there is a circular reference (displayed in the Smartsheet Web app as "#REF"). Read-only. Omitted if false.
 * @Type("boolean")
 */
private $invalid;

/**
 * @var boolean True if this predecessor is in the critical path. Read-only.
 * @Type("boolean")
 */
private $inCriticalPath;
```

### Duration Object

Extends the ObjectValue Object.

In a project sheet, represents a value in a duration cell, or a lag value of a predecessor.

/**
 * @var string DURATION
 * @Type("string")
 */
private $objectType;

/**
 * @var boolean When used as a predecessor's lag value, indicates whether the lag is negative (if true), or positive (false). The individual duration values themselves (for example, **days**, **hours**, **minutes**) is always positive.
 * @Type("boolean")
 */
private $negative;

/**
 * @var boolean If true, indicates this duration represents elapsed time, which ignores non-working time.
 * @Type("boolean")
 */
private $elapsed;

/**
 * @var integer The integer of weeks for this duration.
 * @Type("integer")
 */
private $weeks;

/**
 * @var integer The integer of days for this duration.
 * @Type("integer")
 */
private $days;

/**
 * @var integer The integer of hours for this duration.
 * @Type("integer")
 */
private $hours;

/**
 * @var integer The integer of minutes for this duration.
 * @Type("integer")
 */
private $minutes;

/**
 * @var integer The integer of seconds for this duration.
 * @Type("integer")
 */
private $seconds;

/**
 * @var integer The integer of milliseconds for this duration.
 * @Type("integer")
 */
private $milliseconds;
```

## Get Cell History

> Example Request: Get Cell History
> Example Response:
`GET /sheets/{sheetId}/rows/{rowId}/columns/{columnId}/history`

Gets the cell modification history.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

<aside class="notice">This is a resource-intensive operation and incurs 10 additional requests against the rate limit.</aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **include** (optional): when specified with a value of "columnType", response includes the **columnType** attribute for each [cell] (#cell-object)
 | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | IndexResult Object containing an array of Cell History Objects

## Update Cells

To update the Cells in a Sheet, use the Update Rows operation.

## <%= RELATED %>

### Cell Links

Creating or updating cell links via the **cell.linkInFromCell** attribute is a special operation.
A given row or cell update operation may contain only link updates, or no link updates.
Attempting to mix row/cell updates with cell link updates results in error code 1115.
Additionally, a cell link can only be added to an *existing* cell, so the **cell.linkInFromCell** attribute is not allowed when POSTing a new row to a sheet.

When creating a cell link, **cell.value** must be null (the data is pulled from the linked cell).

A cell may not contain both a hyperlink and a cell link, so **hyperlink** and **linkInFromCell** may never both be non-null at the same time.

### Cell Reference

#### Cell Value Representation

Cell Objects retrieved through the Smartsheet APIs have two main attributes representing cell values: **Cell.value**, and
**Cell.displayValue**.  A third attribute, **Cell.objectValue** is currently used only for adding and updating predecessors.
An empty cell is always represented by **null** for all of these attributes.

**Cell.displayValue** is always a **string** and is only returned for certain column types (see below).  It represents the formatted value as it should
be displayed to an end-user.  For example, if a TEXT_NUMBER column is formatted as a US Dollar currency, its **value** may be a integer
like 1234.5678, but its **displayValue** would be "$1,234.57".

**Cell.value** represents a cell's raw value and can be one of the following primitive JSON types: **string**, **integer**, or **boolean**,
depending on the column type.  Complex types are represented as strings, formatted as described below:

<% PROJECT_COLUMN_HELP_URL = "https://help.smartsheet.com/articles/765737-project-sheet-columns-start-date-end-date-duration-complete-and-predecessors" %>

| Column Type | Possible Types for Cell.value | Returns Cell.displayValue?
|-------------|-------------------------------|---------------------------
| TEXT_NUMBER	| **string**: free-form text values<br/>**integer**: numeric values											| Yes: same as **value** for strings; for integer values, the integer with formatting applied.
| CONTACT_LIST	| **string**: an email address representing a contact, or a free-form text value.							| Yes: same as **value** for free-form strings; for contacts, the contact's name if any, else their email address.
| DATE			| **string**: a date in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format, or a free-form text value.<br/>**integer**: see Dates and Times for how to request dates to be returned as integers. | No.
| PICKLIST		| **string**: one of the picklist's column options, or a free-form text value.<br/>**integer**: numeric values| Yes: same as **value** for strings; for integer values, the integer with formatting applied.
| CHECKBOX		| **boolean**: `true` if the checkbox is checked, `false` otherwise.<br/>**string**: a free-form text value.| No.
| DURATION		| **string**: a duration value such as "4d 6h 30m" in the user's locale, or a free-form text value.<br/>See the [Help Center](<%= PROJECT_COLUMN_HELP_URL %>) for more information on durations.| Yes: same as **value**
| PREDECESSOR	| **string**: a comma-delimited predecessor list such as "12FS +3d 4h, 14SS", or a free-form text value.<br/>See the [Help Center](<%= PROJECT_COLUMN_HELP_URL %>) for more information on predecessors.| Yes: same as **value**
| ABSTRACT_DATETIME | **string**: a project date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format, or a free-form text value.<br/>**integer**: see Dates and Times for how to request dates to be returned as integers. | No.

**Cell.objectValue** is an object representation of a cell's value and is currently used for adding or updating predecessor cell values.
It provides a more "programmer friendly" format for assembling predecessors. To update a cell's predecessors, set objectValue to a
PredecessorList Object containing Predecessor Objects.

#### Cell Value Parsing

The flexibility in cell value data types is a powerful feature in the Smartsheet application, but at the same time, it poses a challenge
for an API in terms of parsing. Being too flexible will likely result in unexpected behavior. For instance, if you write code
to post a Date value to a Smartsheet and the API operation succeeds,  you might assume that the date value you sent was interpreted
as date. What happens if you posted your date in the wrong format? Do you really want Smartsheet to keep the malformed date
as a Text value? Probably not.

To address this problem, the Smartsheet API employs a simple scheme to indicate whether you want a more predictable and strict
interface or a more flexible one. By default, a cell value is expected to conform to "strict" rules for the type of the cell's column.
If an input value doesn't conform, the API returns error code 1042.

If, however, you want the same flexibility as the Smartsheet Web app, you can disable the strict rules, and we’ll do our best to make
sense of it. To enable lenient parsing simply include `"strict" : false` in the Cell Object in your request body.

<aside class="notice">How does strict cell value parsing compare to cell validation settings? Strict cell value parsing determines how string values are parsed. It is set on a per-call basis. In contrast, cell validation is part of the column definition. The overrideValidation property is restricted to sheet admins and does **not** override strict parsing.</aside>

The parsing rules for the various column types are as follows:

**TEXT_NUMBER**:

     |     |
-----|-----|
*Strict* | All numeric and text values are valid and are interpreted literally.
*Lenient* | All numeric and text values are valid. Formatted integers passed as text values, such as currencies ("$5,000"), percentages ("50%"), or decimals ("100.5") are parsed to their numeric equivalents, based on the locale of the Access Token owner,  with the proper formatting enabled for the cell.

<aside class="notice">The Smartsheet application only supports numeric values in the range -9007199254740992 to 9007199254740992. If using strict parsing, any numeric value outside that range results in <a href="#complete-error-code-list">error code 1148</a>. If using lenient parsing, the value is silently converted to text.</aside>

**PICKLIST**:

     |     |
-----|-----|
*Strict* | The value must be a string and must be one of the options for the Picklist.
*Lenient* | All numeric and text values are valid. Formatted integers are parsed like TEXT_NUMBER formatted integers.

**DATE**:

     |     |
-----|-----|
*Strict* | The value must be a string value and a valid ISO 8601 date (YYYY-MM-DD).
*Lenient* | Smartsheet attempts to convert the string value to date using ISO 8601 date format, as well as several locale-specific date formats. If the value is a parsable date format, Smartsheet recognizes the date and stores it as such. All other values are simply text values.

<aside class="notice">You may use the query string parameter <b>numericDates</b> with a value of <code>true</code> to enable strict parsing of dates in numeric format.  See <a href="#dates-and-times">Dates and Times</a> for more information.</aside>

**CONTACT_LIST**:

     |     |
-----|-----|
*Strict* | The value must be a valid email address. If "displayValue" is set, Smartsheet uses that as the name, otherwise if Smartsheet finds a match among the the Access Token owner's contacts, Smartsheet associates this cell with that existing contact.
*Lenient* | If the value is a valid email address, Smartsheet handles it the same way as Strict. If not, Smartsheet saves the value as a text value.

<aside class="notice">See <a href="#contact-list-columns">Contact List Columns</a> for more information.</aside>

**CHECKBOX**:

     |     |
-----|-----|
*Strict* | Only boolean values (true or false) are valid.
*Lenient* | boolean values and string values of 'true' and "false" are handled the same as Strict. All other values are saved as text values.

**DURATION**:

     |     |
-----|-----|
*Strict* | Only valid duration strings in the user's locale are valid.  Information on duration strings can be found in the [Help Center](<%= PROJECT_COLUMN_HELP_URL %>).
*Lenient* | Numeric values are treated as duration values in days.  String values which are valid duration strings in the user's locale are treated as durations, and any other values are treated as free-form text values.

<aside class="notice">You may use the query string parameter <b>projectParseLocale</b> with a <a href="#server-information">supported locale string</a> to force parsing in the specified locale (for example, using <code>en_US</code> lets you send in English values regardless of the user's locale)</aside>

**PREDECESSOR**:

The Smartsheet API doesn't support parsing of predecessor strings, so strict and lenient parsing don't apply to predecessors.  Instead, you can set the **objectValue** attribute to a PredecessorList Object containing
Predecessor Objects. To set a cell in a predecessor column to a non-predecessor string value, simply set **objectValue** to a string.

**ABSTRACT_DATETIME**:

     |     |
-----|-----|
*Strict* | The value must be a string value and a valid ISO 8601 date and time.
*Lenient* | Smartsheet attempts to convert the string value to date using ISO 8601 date format, as well as several locale-specific date formats. If the value is a parsable date format, Smartsheet recognizes the date and stores it as such. All other values are simply text values.

<aside class="notice">You may use the query string parameter <b>numericDates</b> with a value of <code>true</code> to enable strict parsing of dates in numeric format.  See <a href="#dates-and-times">Dates and Times</a> for more information.</aside>

#### Contact List Columns

With columns of type CONTACT_LIST, cells’ "value" and "displayValue" attributes are treated independently.
The contact’s email address is represented by **value**, while the contact’s name (and the value displayed in the cell in the Smartsheet app) is represented by **displayValue**.

When creating or updating cells for a contact list column, the **displayValue** attribute works as follows:

* If **displayValue** is non-null and non-empty, the Smartsheet cell displays the value provided.
* If **displayValue** is an empty string, the Smartsheet cell displays the email address.
* If **displayValue** is null or absent, Smartsheet makes a best guess effort at filling it in with a contact’s name based on the email address.

### Hyperlinks

You can create and modify hyperlinks by using any API operation that creates or updates cell data.
When creating or updating a hyperlink, **cell.value** may be set to a string value or null.
If null, the cell's value is derived from the hyperlink:
<ul><li>If the hyperlink is a URL link, the cell's value is set to the URL itself.</li><li>If the hyperlink is a sheet, report, or Sight link, the cell's value is set to the sheet, report, or Sight name.</li></ul>

### Images in Cells

For details about working with images in cells, see Cell Images.

# Cell Images

A 'cell image' is an image that has been uploaded to a Cell within a Sheet.

## <%= OBJECTS %>

### Image Object
```php

/**
 * @var string Image Id
 * @Type("string")
 */
private $id;

/**
 * @var integer Original width (in pixels) of the uploaded image
 * @Type("integer")
 */
private $width;

/**
 * @var integer Original height (in pixels) of the uploaded image
 * @Type("integer")
 */
private $height;

/**
 * @var string Alternate Text for the image
 * @Type("string")
 */
private $altText;
```

### ImageUrl Object

> Example ImageUrl Object:

```php
/**
 * @var string Image Id
 * @Type("string")
 */
private $imageId;

/**
 * @var integer Image width (in pixels).<br/>In the Get All Image URLs request, this (optional) attribute represents requested width; in the response, it represents actual width of the image returned. (See List Image URLs.)
 * @Type("integer")
 */
private $width;

/**
 * @var integer Image height (in pixels).<br/>In the Get All Image URLs request, this (optional) attribute represents requested height; in the response, it represents actual height of the image returned. (See List Image URLs.)
 * @Type("integer")
 */
private $height;

/**
 * @var string Temporary URL that can be used to retrieve the image. This attribute can be present in a response but is never specified in a request.
 * @Type("string")
 */
private $url;

/**
 * @var Error Error Object. Present in the Get All Image URLs response only if an error occurred retrieving the image.
 * @Type("Error")
 */
private $error;
```

### ImageUrlMap Object
```php

/**
 * @var integer Milliseconds before the URLs within **imageUrls** expire
 * @Type("integer")
 */
private $urlExpiresInMillis;

/**
 * @var ImageUrl[] Array of ImageUrl Objects
 * @Type("ImageUrl[]")
 */
private $imageUrls;
```

## Add Image to Cell

> Example Request: Add Image to Cell
> Example Response:
`POST /sheets/{sheetId}/rows/{rowId}/columns/{columnId}/cellimages`

Uploads an image to the specified Cell within a Sheet.

     |     |
-----|-----|
<%= SCOPE %> | WRITE_SHEETS
<%= HEADERS %> | See Simple Uploads for information about required headers.
<%= PARAMETERS %> | **altText** (optional): url-encoded alternate text for the image<BR><%= PARAMETER_OVERRIDE_VALIDATION %>
<%= REQUEST %> | Binary content for the file
<%= RETURNS %> | Result Object

## List Image URLs

> Example Request: List Image URLs
> Example Response:
`POST /imageurls`

Gets URLs that can be used to retrieve the specified cell images.

<aside class="notice">The HTTP verb for this operation is <code>POST</code> (to provide support for specifying request body).</aside>

<aside class="notice">The integer and sequence of <a href="#imageurl-object">ImageUrl Objects</a> in the Response corresponds exactly to the integer and sequence of objects specified by the Request.</aside>

<aside class="notice">If an error is encountered for any of the requested images, the corresponding <b>ImageUrl</b> Object in the Response contains an <b>error</b> attribute that describes the error. (See Example Response.)</aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | Array of ImageUrl Objects, with the following attributes:<ul><li><b>imageId</b> (required)</li><li><b>height</b> (optional)</li><li><b>width</b> (optional)</li></ul>Each image in the response is sized according to which dimensions were specified by the request:<ul><li>If neither <b>height</b> nor <b>width</b> is specified, the image is returned in its original size.</li><li>If both <b>height</b> AND <b>width</b> are specified, image is sized using those measurements.</li><li>If either <b>height</b> OR <b>width</b> is specified (that is, one or the other -- not both), the image is automatically scaled using that measurement.</li></ul>Additionally, the following rules apply:<ul><li>If the requested image size is less than or equal to the actual image size, the returned image size matches the requested size.</li><li>If the requested image size is larger than the actual image size, the returned image size matches the actual image size.</li></ul>
<%= RETURNS %> | ImageUrlMap Object

## Remove Image from Cell

To remove an image from a cell (and set cell contents to either empty or to another value), use the Update Rows operation to set **cell.value** to the new value.

## Update Cell Image

A cell image can be updated as follows:

* To change the alternate text of an image, use the Update Rows operation.
* To replace an existing image with a new image, use the Add Image to Cell operation.
* To add an image to a cell that previously contained another type of data, use the Add Image to Cell operation.

# Columns

A Column is a component of a Sheet or Report.

## <%= OBJECTS %>

### Column Object
```php

/**
 * @var integer Column Id
 * @Type("integer")
 */
private $id;

/**
 * @var integer Column index
 * @Type("integer")
 */
private $index;

/**
 * @var string Column title
 * @Type("string")
 */
private $title;

/**
 * @var boolean Returned only if the column is the Primary Column (value = `true`)
 * @Type("boolean")
 */
private $primary;

/**
 * @var string One of:<ul><li>TEXT_NUMBER</li><li>DATE</li><li>DATETIME</li><li>CONTACT_LIST</li><li>CHECKBOX</li><li>PICKLIST</li><li>DURATION</li><li>PREDECESSOR</li><li>ABSTRACT_DATETIME</li></ul>See Column Types.
 * @Type("string")
 */
private $type;

/**
 * @var string[] Array of the options available for the column
 * @Type("string[]")
 */
private $options;

/**
 * @var ContactOption[] Array of ContactOption Objects to specify a pre-defined list of values for the column. Column **type** must be **CONTACT_LIST**
 * @Type("ContactOption[]")
 */
private $contactOptions;

/**
 * @var boolean Flag indicating whether the column is hidden
 * @Type("boolean")
 */
private $hidden;

/**
 * @var string When applicable for CHECKBOX or PICKLIST column types. See Symbol Columns.
 * @Type("string")
 */
private $symbol;

/**
 * @var string When applicable, one of: <ul><li>AUTO_NUMBER</li><li>MODIFIED_DATE</li><li>MODIFIED_BY</li><li>CREATED_DATE</li><li>CREATED_BY</li></ul>See System Columns.
 * @Type("string")
 */
private $systemColumnType;

/**
 * @var AutoNumberFormat Present when systemColumnType == AUTO_NUMBER
 * @Type("AutoNumberFormat")
 */
private $autoNumberFormat;

/**
 * @var string[] Set of tags to indicate special columns. Each element in the array is set to one of the following values:<ul><li>CALENDAR_START_DATE</li><li>CALENDAR_END_DATE</li><li>GANTT_START_DATE</li><li>GANTT_END_DATE</li><li>GANTT_PERCENT_COMPLETE</li><li>GANTT_DISPLAY_LABEL</li><li>GANTT_PREDECESSOR</li><li>GANTT_DURATION</li><li>GANTT_ASSIGNED_RESOURCE</li></ul>
 * @Type("string[]")
 */
private $tags;

/**
 * @var boolean Flag indicating whether validation has been enabled for the column (value = `true`)
 * @Type("boolean")
 */
private $validation;

/**
 * @var integer Display width of the column in pixels
 * @Type("integer")
 */
private $width;

/**
 * @var string The format descriptor (see Formatting)<br/>Only returned if the **include** query string parameter contains **format** and this column has a non-default format applied to it.
 * @Type("string")
 */
private $format;

/**
 * @var Filter The filter applied to the column.<br/>Only returned if the **include** query string parameter contains **filters** and this column has a filter applied to it.
 * @Type("Filter")
 */
private $filter;

/**
 * @var boolean Flag indicating whether the column is locked. In a response, a value of `true` indicates that the column has been locked by the sheet owner or the admin.
 * @Type("boolean")
 */
private $locked;

/**
 * @var boolean Flag indicating whether the column is locked for the requesting user.  This attribute may be present in a response, but cannot be specified in a request.
 * @Type("boolean")
 */
private $lockedForUser;
```

### ContactOption Object
```php

/**
 * @var string Optional. Can be a user's name, display name, or free text, such as a job class or TBD.
 * @Type("string")
 */
private $name;

/**
 * @var string Optional.  A parsable email address.
 * @Type("string")
 */
private $email;


<aside class="notice"> Either **name* or **email** (or both) must be specified.</aside>

### Criteria Object
```php

/**
 * @var string One of the following values:<ul><li>EQUAL</li><li>NOT_EQUAL</li><li>GREATER_THAN</li><li>LESS_THAN</li><li>CONTAINS</li><li>BETWEEN</li><li>TODAY</li><li>PAST</li><li>FUTURE</li><li>LAST_N_DAYS</li><li>NEXT_N_DAYS</li><li>IS_BLANK</li><li>IS_NOT_BLANK</li><li>IS_NUMBER</li><li>IS_NOT_NUMBER</li><li>IS_DATE</li><li>IS_NOT_DATE</li><li>IS_CHECKED</li><li>IS_NOT_CHECKED</li></ul>
 * @Type("string")
 */
private $operator;

/**
 * @var string or integer Optional. Present if a custom filter criteria's operator has one or more arguments.
 * @Type("string or integer")
 */
private $value1;

/**
 * @var string or integer Optional.  Present if a custom filter criteria's operator has two arguments.
 * @Type("string or integer")
 */
private $value2;
```

### Filter Object

Smartsheet users can define and save personal column filters on sheets they can view.  When any API operation that returns columns is invoked with the "include=filters" query string parameter, the column includes any active filters the user has defined for the sheet.

/**
 * @var string One of the following values:<ul><li>LIST</li><li>CUSTOM</li></ul>
 * @Type("string")
 */
private $type;

/**
 * @var boolean If **true**, rows containing cells matching the "values" or "criteria" items are excluded instead of included.
 * @Type("boolean")
 */
private $excludeSelected;

/**
 * @var object[] containing strings, integers, and booleans Only included if the filter is of type LIST.<br/><br/>An array of literal cell values that this filter matches against row cells in this column.  The type of the objects in the array depend on the type of the cell values selected to be filtered on when the filter was created.  These may be strings, integers, booleans, or dates.
 * @Type("object[] containing strings, integers, and booleans")
 */
private $values;

/**
 * @var Criteria[] Only included if the filter is of type CUSTOM.<br/><br/>An array of Criteria Objects specifying custom criteria against which to match cell values.
 * @Type("Criteria[]")
 */
private $criteria;
```

## Add Columns

> Example Request: Add Columns
> Example Response:
`POST /sheets/{sheetId}/columns`

Inserts one or more columns into the Sheet specified in the URL.

<aside class="notice"><%= SUPPORTS_OPTIONAL_BULK %></aside>

<aside class="notice">If multiple columns are specified in the request, the <b>index</b> attribute must be set to the same value for all columns. Columns are inserted into the sheet starting at the specified position (<b>index</b>), in the sequence that the columns appear in the request.</aside>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | Column object or an array of Column objects, with the following attributes:<ul><li>title</li><li>type</li><li>symbol (optional)</li><li>options (optional)</li><li>index (zero-based)</li><li>systemColumnType (optional)</li><li>autoNumberFormat (optional)</li><li>validation (optional)</li><li>width (optional)</li><li>locked (optional)</li></ul>
<%= RETURNS %> | Result object containing the the newly created columns -- either a single Column object or an array of Column objects, corresponding to what was specified in the request.

## Delete Column

> Example Request: Delete Column
> Example Response:
`DELETE /sheets/{sheetId}/columns/{columnId}`

Deletes the Column specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | Result Object

## Get Column

> Example Request: Get Column
> Example Response:
`GET /sheets/{sheetId}/columns/{columnId}`

Gets the Column specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **include** (optional): when specified with a value of "filters", response includes the Filter that the user has applied to the column (if any)
<%= RETURNS %> | Column Object

## List Columns

> Example Request: List Columns
> Example Response:
`GET /sheets/{sheetId}/columns`

Gets a list of all Columns belonging to the Sheet specified in the URL.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **include** (optional): when specified with a value of "filters", response includes the Filter that the user has applied to each column (if any)<br/><br/><%= PAGING_PARAMETERS %>
<%= RETURNS %> | IndexResult Object containing an array of Column Objects

## Update Column

> Example Request: Update Column
> Example Response:
`PUT /sheets/{sheetId}/columns/{columnId}`

Updates properties of the column, moves the column, and/or renames the column.

**Notes:**

* You cannot change the type of a Primary column.
* While dependencies are enabled on a sheet, you can't change the type of any special calendar/Gantt columns.
* If the column type is changed, all cells in the column are converted to the new column type and column validation is cleared.
* Type is optional when moving or renaming, but required when changing type or dropdown values.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | A Column object that contains the following attributes:<ul><li>index (column's new index in the sheet)</li><li>title</li><li>type (optional)</li><li>options (optional)</li><li>symbol (optional)</li><li>systemColumnType (optional)</li><li>autoNumberFormat (optional)</li><li>validation (optional)</li><li>width (optional)</li><li>format (optional)</li><li>locked (optional)</li></ul>
<%= RETURNS %> | Result object containing the Column object that was modified

## <%= RELATED %>

### Column Types

Smartsheet supports the following standard column types, which are represented in a Column Object with a **type** attribute set to one of the following:

Column Type | Column.type Value | Notes |
------------|--------------------------|-------|
Text/Number		| TEXT_NUMBER	|
Contact List	| CONTACT_LIST	| List containing contacts or roles for a project. **NOTE:** You can use the contactOptions property to specify a pre-defined list of values for the column, which can also become lanes in card view.
Date			| DATE			|
Dropdown List	| PICKLIST		| Custom, RYG, Harvey Ball, Priority types, etc.
Checkbox 		| CHECKBOX		| Checkbox, star, and flag types
Duration		| DURATION		| **Only for dependency-enabled project sheets**<br/>The API does not support setting a Column to this type. (This can only be done through the Smartsheet Web app when configuring a project sheet.)
Predecessor		| PREDECESSOR	| **Only for dependency-enabled project sheets**<br/>The API does not support setting a Column to this type, or updating data in a column of this type. (This can only be done through the Smartsheet Web app when configuring a project sheet.)
Date/Time 		| ABSTRACT_DATETIME | Represents a project sheet's Start and End dates.<br/>**Only for dependency-enabled project sheets**<br/>The API does not support setting a Column to this type. (This can only be done through the Smartsheet Web app when configuring a project sheet.) Additionally, the API does not support updating data in the End Date column under any circumstance, and does not support updating data in the Start Date column if Predecessor is set for that row.
Date/Time		| DATETIME		| Used only by the following System-generated columns: <ul><li>Created (Date) (**Column.systemColumnType** = "CREATED_DATE")</li><li>Modified (Date) (**Column.systemColumnType** = "MODIFIED_DATE")</li></ul>

<aside class="notice">See the <a href="#cell-reference">Cell Reference</a> section for information on getting and setting cell values for the different column types.</aside>

#### Symbol Columns

In addition to the basic column types above, the Smartsheet app also supports columns that display symbols. These are simply specialized columns of type PICKLIST or CHECKBOX,
whose **symbol** attribute is set to one of the values below:

**Symbols for CHECKBOX columns:**

Value | Example |
-----|-----|
FLAG | <img src="images/img_pl_flagc.png" alt="A flag symbol" /> |
STAR | <img src="images/img_pl_starc.png" alt="A star symbol" /> |

**Symbols for PICKLIST columns:**

Value | Example |
-----|-----|
ARROWS_3_WAY | <img src="images/img_pl_arrows3.png" alt="An arrows_3_way symbol" /> |
ARROWS_4_WAY | <img src="images/img_pl_arrows4.png" alt="An arrows_4_way symbol" /> |
ARROWS_5_WAY | <img src="images/img_pl_arrows5.png" alt="An arrows_5_way symbol" /> |
DECISION_SHAPES | <img src="images/img_pl_decisionshapes.png" alt="A decision_shapes symbol" /> |
DECISION_SYMBOLS | <img src="images/img_pl_decisionsymbols.png" alt="A decision_symbols symbol" /> |
DIRECTIONS_3_WAY | <img src="images/img_pl_directions3.png" alt="A directions_3_way symbol" /> |
DIRECTIONS_4_WAY | <img src="images/img_pl_directions4.png" alt="A directions_4_way symbol" /> |
EFFORT | <img src="images/img_pl_effort6Three.png" alt="An effort symbol" /> |
HARVEY_BALLS | <img src="images/img_pl_harvey5.png" alt="A harvey_balls symbol" /> |
HEARTS | <img src="images/img_pl_heart6Three.png" alt="A hearts symbol" /> |
MONEY | <img src="images/img_pl_money6Three.png" alt="A money symbol" /> |
PAIN | <img src="images/img_pl_pain6.png" alt="A pain symbol" /> |
PRIORITY | <img src="images/img_pl_priority.png" alt="A priority symbol" /> |
PRIORITY_HML | <img src="images/img_pl_priorityhml.png" alt="A priority_hml symbol" /> |
PROGRESS | <img src="images/img_pl_progress5Half.png" alt="A progress symbol" /> |
RYG | <img src="images/img_pl_ryg.png" alt="An RYG symbol" /> |
RYGB | <img src="images/img_pl_rygb.png" alt="An RYGB symbol" /> |
RYGG | <img src="images/img_pl_rygg.png" alt="An RYGG symbol" /> |
SIGNAL | <img src="images/img_pl_signal5.png" alt="A signal symbol" /> |
SKI | <img src="images/img_pl_difficulty4.png" alt="A ski symbol" /> |
STAR_RATING | <img src="images/img_pl_star6Three.png" alt="A star_rating symbol" />
VCR | <img src="images/img_pl_decisionvcr.png" alt="A VCR symbol" /> |
WEATHER | <img src="images/img_pl_weather5.png" alt="A weather symbol" /> |

<aside class="notice">The Smartsheet grid user interface presents several row attributes and features (for example, row integer, attachments, discussions, row action indicator) visually as columns.  The API does not consider these to be columns, and does not return or otherwise expose them as columns.  The only columns returned by the API are user data columns.</aside>

#### System Columns

In addition to the standard column types and symbols, Smartsheet has a integer of *system columns*, which represent data that is
filled in by Smartsheet and whose values cannot be changed by the user. These columns are represented with standard
column types, with the **Column.systemColumnType** attribute set to one of the following:

Column.systemColumnType Value | Column Type | Notes
-----|-----|-----|
MODIFIED_DATE | DATETIME
MODIFIED_BY | CONTACT_LIST
CREATED_DATE | DATETIME
CREATED_BY  | CONTACT_LIST
AUTO_NUMBER | TEXT_NUMBER | Columns of this system column type include an AutoNumberFormat Object that describes the mask used to generate the value.

# Comments

A Comment is a component of a Discussion.  Each Discussion is composed of one or more Comments.

<aside class="notice">The operations in this section describe how to add, edit, delete, or get an <i>individual comment</i>. To get <i>all comments</i> that exist within all discussions on a Sheet or on a Row or to get the commentId for a specific comment within the discussion, use one of the following operations:<ul><li><a href="#list-discussions">Get All Discussions</a> followed by a <a href="#get-discussion">Get Discussion</a> call to return a <a href="#comment-object">Comment Object</a>.</li><li><a href="#list-row-discussions">List Row Discussions</a> using the include query parameter.</li></ul></aside>

## <%= OBJECTS %>

### Comment Object

> Example Comment Object

```php
/**
 * @var integer Comment Id
 * @Type("integer")
 */
private $id;

/**
 * @var string Comment body
 * @Type("string")
 */
private $text;

/**
 * @var User User Object containing name and email of the Comment's author
 * @Type("User")
 */
private $createdBy;

/**
 * @var DateTime Time of creation
 * @Type("DateTime")
 */
private $createdAt;

/**
 * @var DateTime Time of last modification
 * @Type("DateTime")
 */
private $modifiedAt;

/**
 * @var Attachment[] Array of Attachment Objects
 * @Type("Attachment[]")
 */
private $attachments;

/**
 * @var integer (optional) Discussion Id
 * @Type("integer (optional)")
 */
private $discussionId;
```

## Add Comment

> Example Request (without attachment): Add Comment
> Example Request (with attachment):
> Example Response:
`POST /sheets/{sheetId}/discussions/{discussionId}/comments`

Adds a Comment to a Discussion.

<aside class="notice">This operation supports multipart requests. Using a multipart request allows you to create a new Comment and upload a file to that Comment in a single step (that is, using a single request). For more information, see <a href="#multipart-uploads">Multipart Uploads</a>.</aside>

<br/><br/>
**Creating a Comment without an Attachment:**

     |     |
-----|-----|
<%= SCOPE %> | WRITE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | Comment Object with the following attribute:<ul><li>text</li></ul>
<%= RETURNS %> | Result Object containing Comment Object that was created

<br/><br/>
**Creating a Comment with an Attachment:**

<%= partial "snippets/createCommentMultipart_table.md.erb" %>

## Edit Comment

> Example Request: Edit Comment

> Example Response:
`PUT /sheets/{sheetId}/comments/{commentId}`

Updates the text of a Comment. Note that only the user that created the comment is permitted to update it.

**Updating a Comment:**

     |     |
-----|-----|
<%= SCOPE %> | WRITE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | Comment Object with the following attribute:<ul><li>text</li></ul>
<%= RETURNS %> | Result Object containing Comment Object that was updated
## Delete Comment

> Example Request: Delete Comment
> Example Response:
`DELETE /sheets/{sheetId}/comments/{commentId}`

Deletes the Comment specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | WRITE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | Result Object

## Get Comment

> Example Request: Get Comment
> Example Response:
`GET /sheets/{sheetId}/comments/{commentId}`

Gets the Comment specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | Comment Object

## <%= RELATED %>

A Comment can contain one or more Attachments.

### Comment Attachments

For details about working with a Comment's attachments, see Attachments.

# Contacts

A Contact is a user's personal contact in Smartsheet (as described [here](https://help.smartsheet.com/articles/796143-managing-contacts)).

## <%= OBJECTS %>

### Contact Object

> Example Contact Object:

```php
/**
 * @var string Contact Id
 * @Type("string")
 */
private $id;

/**
 * @var string Contact's full name
 * @Type("string")
 */
private $name;

/**
 * @var string Contact's email address
 * @Type("string")
 */
private $email;
```

## Get Contact

> Example Request: Get Contact
> Example Response:
`GET /contacts/{contactId}`

Gets the specified Contact.

     |     |
-----|-----|
<%= SCOPE %> | READ_CONTACTS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | Contact Object

## List Contacts

> Example Request: List Contacts
> Example Response:
`GET /contacts`

Gets a list of the user's Smartsheet Contacts.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_CONTACTS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | IndexResult Object containing an array of Contact Objects

# Discussions

A Discussion is a collection of one or more Comments. A Discussion can exist on a Row or a Sheet.

## <%= OBJECTS %>

### Discussion Object

> Example Discussion Object:

```php
/**
 * @var integer Discussion Id
 * @Type("integer")
 */
private $id;

/**
 * @var string Discussion title
 * @Type("string")
 */
private $title;

/**
 * @var Comment[] Array of Comment Objects
 * @Type("Comment[]")
 */
private $comments;

/**
 * @var integer The integer of comments in the discussion
 * @Type("integer")
 */
private $commentCount;

/**
 * @var Attachment[] Array of Attachment Objects
 * @Type("Attachment[]")
 */
private $commentAttachments;

/**
 * @var integer Id of the directly associated row or sheet: present only when the direct association is not clear (see List Discussions)
 * @Type("integer")
 */
private $parentId;

/**
 * @var string "SHEET" or "ROW": present only when the direct association is not clear (see List Discussions)
 * @Type("string")
 */
private $parentType;

/**
 * @var DateTime Time of most recent comment
 * @Type("DateTime")
 */
private $lastCommentedAt;

/**
 * @var User User Object containing name and email of the author of the most recent Comment
 * @Type("User")
 */
private $lastCommentedUser;

/**
 * @var User User Object containing name and email of the creator of the Discussion
 * @Type("User")
 */
private $createdBy;

/**
 * @var string User's permissions on the Discussion
 * @Type("string")
 */
private $accessLevel;

/**
 * @var boolean Flag to indicate if the User can modify the Discussion
 * @Type("boolean")
 */
private $readOnly;
```

## Create Discussion on Row

> Example Request (without attachment): Create Discussion on Row
> Example Request (with attachment):
> Example Response:

<%= partial "snippets/createDiscussion_response.md.erb" %>

`POST /sheets/{sheetId}/rows/{rowId}/discussions`

Creates a new Discussion on a Row.

<aside class="notice">This operation supports multipart requests. Using a multipart request allows you to create a new Discussion and upload a file to the first Comment within that Discussion in a single step (that is, using a single request). For more information, see <a href="#multipart-uploads">Multipart Uploads</a>.</aside>

<br/>
**Creating a Discussion without an Attachment:**
<%= partial "snippets/createDiscussion_table.md.erb" %>
<br/>
**Creating a Discussion with an Attachment:**
<%= partial "snippets/createDiscussionMultipart_table.md.erb" %>

## Create Discussion on Sheet

> Example Request (without attachment): Create Discussion on Sheet
> Example Request (with attachment): Create Discussion on Sheet
> Example Response:

<%= partial "snippets/createDiscussion_response.md.erb" %>

`POST /sheets/{sheetId}/discussions`

Creates a new Discussion on a Sheet.

<aside class="notice">This operation supports multipart requests. Using a multipart request allows you to create a new Discussion and upload a file to the first Comment within that Discussion in a single step (that is, using a single request). For more information, see <a href="#multipart-uploads">Multipart Uploads</a>.</aside>

<br/>
**Creating a Discussion without an Attachment:**
<%= partial "snippets/createDiscussion_table.md.erb" %>

<br/>
**Creating a Discussion with an Attachment:**
<%= partial "snippets/createDiscussionMultipart_table.md.erb" %>

## Delete Discussion

> Example Request: Delete Discussion
> Example Response:
`DELETE /sheets/{sheetId}/discussions/{discussionId}`

Deletes the Discussion specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | WRITE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | Result Object

## List Discussions

> Example Request: List Discussions
> Example Response:

<%= partial "snippets/getDiscussions_response.md.erb" %>

`GET /sheets/{sheetId}/discussions`

Gets a list of all Discussions associated with the specified Sheet (both sheet-level discussions and row-level discussions).

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

<%= partial "snippets/getDiscussions_table.md.erb" %>

## Get Discussion

> Example Request: Get Discussion
> Example Response:
`GET /sheets/{sheetId}/discussions/{discussionId}`

Gets the Discussion specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | Discussion Object

## List Row Discussions

> Example Request: List Row Discussions
> Example Response:

<%= partial "snippets/getDiscussions_response.md.erb" %>

`GET /sheets/{sheetId}/rows/{rowId}/discussions`

Gets a list of all Discussions associated with the specified Row.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

<%= partial "snippets/getDiscussions_table.md.erb" %>

## <%= RELATED %>

A Discussion is a collection of one or more Comments, each of which may contain Attachments.

### Discussion Attachments

For details about working with the attachments within a Discussion, see Attachments.

### Discussion Comments

For details about working with a Discussion's comments, see Comments.

# Favorites

Smartsheet allows users to "star" sheets, reports, folders, workspaces, Sight, and other objects on their Home tab to mark them as favorites.
These API operations allow you to access the user's favorite API-supported objects, as well as create and delete favorites.

## <%= OBJECTS %>

### Favorite Object

> Example Favorite Object:

```php
/**
 * @var string One of:<ul><li>workspace</li><li>folder</li><li>sheet</li><li>report</li><li>template</li><li>Sight</li></ul>
 * @Type("string")
 */
private $type;

/**
 * @var integer Id of the favorited item.  If **type** is "template", only private sheet-type template Id is allowed.
 * @Type("integer")
 */
private $objectId;
```

## Add Favorites

> Example Request: Add Favorites
> Example Response:
`POST /favorites`

Adds one or more items to the user's list of Favorite items.

<aside class="notice"><%= SUPPORTS_OPTIONAL_BULK %></aside>

If called with a single Favorite Object, and that favorite already exists, error code **1129** is returned.  If called with an array of Favorite Objects, any objects specified in the array that are already marked as favorites are ignored and omitted from the response.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WORKSPACES
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | Favorite Object or an array of Favorite Objects, with the following attributes:<ul><li>type</li><li>objectId</li></ul>
<%= RETURNS %> | Result Object containing objects that were marked as favorites -- either a single Favorite Object or an array of Favorite Objects, corresponding to what was specified in the request.

## List Favorites

> Example Request: List Favorites
> Example Response:
`GET /favorites`

Gets a list of all of the user's Favorite items.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | IndexResult Object containing an array of Favorite Objects

## Remove Favorite

### Remove Favorite Sight

> Example Request: Remove Favorite Sight
> Example Response:
`DELETE /favorites/sights/{sightId}`

Removes a single Sight from the user's list of Favorite items.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WORKSPACES
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | Result Object

### Remove Favorite Folder

> Example Request: Remove Favorite Folder
> Example Response:

<%= partial "snippets/removeFavorite_response.md.erb" %>

`DELETE /favorites/folder/{folderId}`

Removes a single Folder from the user's list of Favorite items.

<%= partial "snippets/removeFavorite_table.md.erb" %>

### Remove Favorite Report

> Example Request: Remove Favorite Report
> Example Response:

<%= partial "snippets/removeFavorite_response.md.erb" %>

`DELETE /favorites/report/{reportId}`

Removes a single Report from the user's list of Favorite items.

<%= partial "snippets/removeFavorite_table.md.erb" %>

### Remove Favorite Sheet

> Example Request: Remove Favorite Sheet
> Example Response:

<%= partial "snippets/removeFavorite_response.md.erb" %>

`DELETE /favorites/sheet/{sheetId}`

Removes a single Sheet from the user's list of Favorite items.

<%= partial "snippets/removeFavorite_table.md.erb" %>

### Remove Favorite Template

> Example Request: Remove Favorite Template
> Example Response:

<%= partial "snippets/removeFavorite_response.md.erb" %>

`DELETE /favorites/template/{templateId}`

Removes a single Template from the user's list of Favorite items.

<%= partial "snippets/removeFavorite_table.md.erb" %>

### Remove Favorite Workspace

> Example Request: Remove Favorite Workspace
> Example Response:

<%= partial "snippets/removeFavorite_response.md.erb" %>

`DELETE /favorites/workspace/{workspaceId}`

Removes a single Workspace from the user's list of Favorite items.

<%= partial "snippets/removeFavorite_table.md.erb" %>

## Remove Multiple Favorites

### Remove Multiple Favorite Folders

> Example Request: Remove Multiple Favorite Folders
> Example Response:

<%= partial "snippets/removeFavorites_response.md.erb" %>

`DELETE /favorites/folder`

Removes multiple Folders from the user's list of Favorite items.

<%= partial "snippets/removeFavorites_table.md.erb" %>

### Remove Multiple Favorite Reports

> Example Request: Remove Multiple Favorite Reports
> Example Response:

<%= partial "snippets/removeFavorites_response.md.erb" %>

`DELETE /favorites/report`

Removes multiple Reports from the user's list of Favorite items.

<%= partial "snippets/removeFavorites_table.md.erb" %>

### Remove Multiple Favorite Sheets

> Example Request: Remove Multiple Favorite Sheets
> Example Response:

<%= partial "snippets/removeFavorites_response.md.erb" %>

`DELETE /favorites/sheet`

Removes multiple Sheets from the user's list of Favorite items.

<%= partial "snippets/removeFavorites_table.md.erb" %>

### Remove Multiple Favorite Sights

> Example Request: Remove Multiple Favorite Sights
> Example Response:

<%= partial "snippets/removeFavorites_response.md.erb" %>

`DELETE /favorites/sights`

Removes multiple Sights from the user's list of Favorite items.

<%= partial "snippets/removeFavorites_table.md.erb" %>

### Remove Multiple Favorite Templates

> Example Request: Remove Multiple Favorite Templates
> Example Response:

<%= partial "snippets/removeFavorites_response.md.erb" %>

`DELETE /favorites/template`

Removes multiple Templates from the user's list of Favorite items.

<%= partial "snippets/removeFavorites_table.md.erb" %>

### Remove Multiple Favorite Workspaces

> Example Request: Remove Multiple Favorite Workspaces
> Example Response:

<%= partial "snippets/removeFavorites_response.md.erb" %>

`DELETE /favorites/workspace`

Removes multiple Workspaces from the user's list of Favorite items.

<%= partial "snippets/removeFavorites_table.md.erb" %>

# Folders

A Folder can exist in a user's **Sheets** folder (Home), in a Folder, or in a Workspace.

## <%= OBJECTS %>

### Folder Object

> Example Folder Object:

```php
/**
 * @var integer Folder Id
 * @Type("integer")
 */
private $id;

/**
 * @var string Folder name
 * @Type("string")
 */
private $name;

/**
 * @var boolean Returned only if the user has marked the Folder as a Favorite in their Home tab (value = 'true')
 * @Type("boolean")
 */
private $favorite;

/**
 * @var string URL that represents a direct link to the Folder in Smartsheet
 * @Type("string")
 */
private $permalink;

/**
 * @var Sheet[] Array of Sheet Objects
 * @Type("Sheet[]")
 */
private $sheets;

/**
 * @var Folder[] Array of Folder Objects
 * @Type("Folder[]")
 */
private $folders;

/**
 * @var Report[] Array of Report Objects
 * @Type("Report[]")
 */
private $reports;

/**
 * @var Template[] Array of Template Objects
 * @Type("Template[]")
 */
private $templates;
```

## Copy Folder

> Example Request: Copy Folder
> Example Response:
`POST /folders/{folderId}/copy`

Creates a copy of the specified Folder.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WORKSPACES
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= PARAMETERS %> | **include** (optional) -- a comma-separated list of elements to copy:<ul><li>data</li><li>attachments</li><li>discussions</li><li>cellLinks</li><li>forms</li><li>**all** - specify a value of "all" to include everything (data, attachments, discussions, cellLinks, and forms)</li></ul><i>Note</i>: Cell history is not copied, regardless of which **include** parameter values are specified.
 | **skipRemap** (optional) --  -- comma-separated list of references to NOT re-map for the newly created folder:<ul><li>cellLinks</li><li>reports</li><li>sheetHyperlinks</li><li>Sights</li></ul>By default, all cell links, reports, sheet hyperlinks, and Sights that reference objects in the source folder are re-mapped to reference corresponding objects in the newly created folder. The **skipRemap** parameter can be specified to change that default behavior:<ul><li>If "cellLinks" is specified in the <b>skipRemap</b> parameter value, the cell links within the newly created folder continue to point to the original source sheets.</li><li>If "reports" is specified in the <b>skipRemap</b> parameter value, the reports within the newly created folder continue to point to the original source sheets.</li><li>If "sheetHyperlinks" is specified in the <b>skipRemap</b> parameter value, the sheet hyperlinks within the newly created folder continue to point to the original source sheets.</li><li>If "Sights" is specified in the <b>skipRemap</b> parameter value, the widgets within Sights in the newly created folder continue to point to the original source sheets / reports.</li></ul>
<%= REQUEST %> | ContainerDestination Object</li></ul>
<%= RETURNS %> | Result Object containing a Folder Object for the newly created Folder

## Create Child Folder

A Folder can be created in the user's **Sheets** folder (Home), in another Folder, or in a Workspace.

### Create Folder

> Example Request: Create Folder
> Example Response:

<%= partial "snippets/createFolder_response.md.erb" %>

`POST /home/folders`

Creates a Folder in the user's **Sheets** folder (Home).

<%= partial "snippets/createFolder_table.md.erb" %>

### Create Folder (Folder)

> Example Request: Create Folder (Folder)
> Example Response:

<%= partial "snippets/createFolder_response.md.erb" %>

`POST /folders/{folderId}/folders`

Creates a Folder in the specified Folder.

<%= partial "snippets/createFolder_table.md.erb" %>

### Create Folder (Workspace)

> Example Request: Create Folder (Workspace)
> Example Response:

<%= partial "snippets/createFolder_response.md.erb" %>

`POST /workspaces/{workspaceId}/folders`

Creates a Folder in the specified Workspace.

<%= partial "snippets/createFolder_table.md.erb" %>

## Delete Folder

> Example Request: Delete Folder
> Example Response:
`DELETE /folders/{folderId}`

Deletes the Folder (and its contents) specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WORKSPACES
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | Result Object

## Get Folder

> Example Request: Get Folder
> Example Response:
`GET /folders/{folderId}`

Gets the specified Folder (and lists its contents).

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **include** (optional) -- a comma-separated list of optional elements to include in the response:<ul><li>ownerInfo - owner's email address and user Id for each sheet</li><li>source - the source for any sheet that was created from another sheet or template</li></ul>
<%= RETURNS %> | Folder Object, populated according to the **include** parameter<br/><br/>Note: If no folders, sheets, reports, templates, or Sights are present in the Folder, the corresponding attribute (for example, "folders", "sheets") is not present in the response.

## Get All Child Folders

Top-level child Folders can be retrieved from the user's **Sheets** folder (Home), from another Folder, or from a Workspace.

### List Folders

> Example Request: List Folders
> Example Response:

<%= partial "snippets/listFolders_response.md.erb" %>

`GET /home/folders`

Gets a list of the top-level child Folders within the user's **Sheets** folder (Home).

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

<%= partial "snippets/listFolders_table.md.erb" %>

### List Folders (Folder)

> Example Request: List Folders (Folder)
> Example Response:

<%= partial "snippets/listFolders_response.md.erb" %>

`GET /folders/{folderId}/folders`

Gets a list of the top-level child Folders within the specified Folder.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

<%= partial "snippets/listFolders_table.md.erb" %>

### List Folders (Workspace)

> Example Request:
> Example Response:

<%= partial "snippets/listFolders_response.md.erb" %>

`GET /workspaces/{workspaceId}/folders`

Gets a list of the top-level child Folders within the specified Workspace.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

<%= partial "snippets/listFolders_table.md.erb" %>
## Move Folder

> Example Request: Move Folder
> Example Response:
`POST /folders/{folderId}/move`

Moves the specified Folder to another location.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WORKSPACES
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | ContainerDestination Object, limited to the following required attributes:<ul><li>destinationType</li><li>destinationId</li></ul>
<%= RETURNS %> | Result Object containing a Folder Object for the moved Folder
## Update Folder

> Example Request: Update Folder
> Example Response:
`PUT /folders/{folderId}`

Updates the Folder specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WORKSPACES
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | Folder Object, limited to the following required attribute:<ul><li>name (string)</li></ul>Name does not have to be unique.
<%= RETURNS %> | Result Object containing the updated Folder Object

# Groups

A Group is a collection of Group Members.

## <%= OBJECTS %>

### Group Object

> Example Group Object:

```php
/**
 * @var integer Group Id
 * @Type("integer")
 */
private $id;

/**
 * @var string Group name
 * @Type("string")
 */
private $name;

/**
 * @var string Group description
 * @Type("string")
 */
private $description;

/**
 * @var string Group owner’s email address
 * @Type("string")
 */
private $owner;

/**
 * @var integer Group owner's User Id
 * @Type("integer")
 */
private $ownerId;

/**
 * @var GroupMember[] Array of GroupMember Objects
 * @Type("GroupMember[]")
 */
private $members;

/**
 * @var DateTime Time of creation
 * @Type("DateTime")
 */
private $createdAt;

/**
 * @var DateTime Time of last modification
 * @Type("DateTime")
 */
private $modifiedAt;
```

## Create Group

> Example Request: Create Group
> Example Response:
`POST /groups`

Creates a new Group.

<aside class="notice">This operation is only available to group administrators and system administrators.</aside>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_USERS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | Group Object, limited to the following attributes:<ul><li>name (required) -- must be unique within the organization</li><li>description (optional)</li><li>members (optional) -- array of GroupMember Objects, each limited to the following attribute:<ul><li>email</li></ul></li></ul>
<%= RETURNS %> | Result Object, containing a Group Object for the newly created Group

## Delete Group

> Example Request: Delete Group
> Example Response:
`DELETE /groups/{groupId}`

Deletes the Group specified in the URL.

<aside class="notice">This operation is only available to group administrators and system administrators.</aside>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_USERS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | Result Object

<aside class="notice"><b>This operation is asynchronous</b>, meaning group members may retain their sharing access for a brief period of time after the call returns.  For small groups with limited sharing, the operation should complete quickly (within a few seconds).  For large groups with many shares, this operation could possibly take more than a minute to complete.</aside>

## Get Group

> Example Request: Get Group
> Example Response:
`GET /groups/{groupId}`

Gets the Group specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | READ_USERS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | Group Object that includes the list of GroupMembers

## List Org Groups

> Example Request: List Org Groups
> Example Response:
`GET /groups`

Gets the list of all Groups in an organization. To fetch the members of an individual group, use the Get Group operation.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_USERS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | IndexResult Object containing an array of Group Objects

## Update Group

> Example Request: Update Group
> Example Response:
`PUT /groups/{groupId}`

Updates the Group specified in the URL.

<aside class="notice">This operation is only available to group administrators and system administrators.</aside>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_USERS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | Group Object, limited to the following attributes:<ul><li>name (optional) -- must be unique within the organization</li><li>description (optional)</li><li>ownerId (optional): Id of an admin User to whom the group ownership is transferred</li></ul>
<%= RETURNS %> | Result Object containing the Group Object for the updated group

## <%= RELATED %>

A Group is comprised of one or more members.

### Members of a Group

For details about working with a Group's members, see Group Members.

# Group Members

A Group Member is a User that belongs to a Group.

## <%= OBJECTS %>

> Example GroupMember Object
### GroupMember Object
```php

/**
 * @var integer Group Member's User Id
 * @Type("integer")
 */
private $id;

/**
 * @var string Group Member's email address
 * @Type("string")
 */
private $email;

/**
 * @var string Group Member's first name
 * @Type("string")
 */
private $firstName;

/**
 * @var string Group Member's last name
 * @Type("string")
 */
private $lastName;

/**
 * @var string Group Member's full name
 * @Type("string")
 */
private $name;
```

## Add Group Members

> Example Request: Add Group Members
> Example Response:
`POST /groups/{groupId}/members`

Adds one or more members to a Group.

<aside class="notice"><%= SUPPORTS_OPTIONAL_BULK %></aside>

If called with a single GroupMember Object, and that group member already exists, error code **1129** is returned. If called with an array
of GroupMember Objects any users specified in the array that are already group members are ignored and omitted from the response.

<aside class="notice">This operation is only available to group administrators and system administrators.</aside>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_USERS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | A single GroupMember Object or an array of GroupMember Objects, limited to the following attribute:<ul><li>email</li></ul>
<%= RETURNS %> | Result Object containing the members added to the group -- either a single GroupMember or array of GroupMember Objects, corresponding to what was specified in the request.
<%= ERRORS %>  | If an error occurs because the request specified one or more *alternate* email addresses (that is, not the primary email address associated with the User account), the Error Object returned contains a **detail** attribute set to an array of objects, each object in the array has the following attributes:<ul><li>**alternateEmailAddress**: User's *alternate* email address that was specified in the request</li><li>**primaryEmailAddress**: User's primary email address that must instead be specified for the operation</li></ul>For example:<br/>{<br/>&#160;&#160;"errorCode": 5xxx,<br/>&#160;&#160;"message": "u1+1@smartsheet.com is an alternate address of the user u1@smartsheet.com. Please retry using their primary address u1@smartsheet.com."<br/>&#160;&#160;"detail": [<br/>&#160;&#160;&#160;&#160;&#160;&#160;{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"alternateEmailAddress": "u1+1@smartsheet.com",<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"primaryEmailAddress": "u1@smartsheet.com"<br/>&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;]<br/>}

<aside class="notice"><b>This operation is asynchronous</b>, meaning the users may not yet have sharing access to sheets for a period of time after this operation returns.  For small groups with limited sharing, the operation should complete quickly (within a few seconds).  For large groups with many shares, this operation could possibly take more than a minute to complete.</aside>

## Remove Group Member

> Example Request: Remove Group Member
> Example Response:
`DELETE /groups/{groupId}/members/{userId}`

Removes a member from a Group.

<aside class="notice">This operation is only available to group administrators and system administrators.</aside>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_USERS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | Result Object

<aside class="notice"><b>This operation is asynchronous</b>, meaning group members may retain their sharing access for a brief period of time after the call returns.  For small groups with limited sharing, the operation should complete quickly (within a few seconds).  For large groups with many shares, this operation could possibly take more than a minute to complete.</aside>

# Home

In the Smartsheet UI, the "Home" tab shows all objects a User has access to, including Sheets, Folders, Workspaces, Reports, and Templates.

## <%= OBJECTS %>

### Home Object

> Example Home Object:

```php
/**
 * @var Sheet[] Array of Sheet Objects
 * @Type("Sheet[]")
 */
private $sheets;

/**
 * @var Folder[] Array of Folder Objects
 * @Type("Folder[]")
 */
private $folders;

/**
 * @var Report[] Array of Report Objects
 * @Type("Report[]")
 */
private $reports;

/**
 * @var Template[] Array of Template Objects
 * @Type("Template[]")
 */
private $templates;

/**
 * @var Workspace[] Array of Workspace Objects
 * @Type("Workspace[]")
 */
private $workspaces;

/**
 * @var Sight[] Array of Sight Objects
 * @Type("Sight[]")
 */
private $Sights;
```

## List Contents

> Example Request: List Contents
> Example Response:
`GET /home`

Gets a nested list of all Home Objects, including Sheets, Workspaces, Folders, Reports, Templates, and Sights, as shown on the Home tab.

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **include** (optional) -- a comma-separated list of optional elements to include in the response:<ul><li>ownerInfo - owner's email address and user Id for each sheet</li><li>source - the source for any sheet that was created from another sheet or template</li></ul>
<%= RETURNS %> | Home Object, populated according to the **include** parameter

## <%= RELATED %>

### Home Folders

For details about working with Folders in the user's **Sheets** folder (that is, at the Home level), see Folders.

### Home Sheets

For details about working with sheets in the user's **Sheets** folder (that is, at the Home level), see Sheets.

# Reports

A Report is a filtered view of the data from one or more Sheets. Like a Sheet, a Report is comprised of Columns, Rows, and Cells, and may optionally contain Attachments and/or Discussions.

## <%= OBJECTS %>

### Report Object

> Example Report Object:
Extends the Sheet Object, adding the following:

/**
 * @var Sheet[] Array of Sheet Objects (without rows), representing the sheets that rows in the report originated from.  Only included in the Get Report response if the **include** parameter specifies "sourceSheets".
 * @Type("Sheet[]")
 */
private $sourceSheets;
```

### ReportCell Object

Extends the Cell Object, adding the following:

/**
 * @var integer The virtual Id of the cell's column. This property refers to the cell's parent column in the Report, while the **columnId** property refers to the cell's parent column in its originating source Sheet.
 * @Type("integer")
 */
private $virtualColumnId;
```

### ReportColumn Object

Extends the Column Object, adding the following:

/**
 * @var integer The virtual Id of this report column
 * @Type("integer")
 */
private $virtualId;

/**
 * @var boolean Returned only for the special "Sheet Name" report column (value = 'true')
 * @Type("boolean")
 */
private $sheetNameColumn;


A report column is a "virtual" column, in that it appears identical to source sheet columns, but is in fact a different column belonging to the report.
Cells in the report refer to this column via their **virtualColumnId** attribute, and to their actual column from their source sheet via their **columnId** attribute.

### ReportRow Object

Extends the Row Object, adding the following:

/**
 * @var integer The Id of the Sheet from which the Row originates
 * @Type("integer")
 */
private $sheetId;
```

### ReportPublish Object

/**
 * @var boolean If `true`, a rich version of the report is published with the ability to download row attachments and discussions.
 * @Type("boolean")
 */
private $readOnlyFullEnabled;

/**
 * @var string URL for 'Read-Only Full' view of the published report<br/>Only returned in a response if **readOnlyFullEnabled** = true.
 * @Type("string")
 */
private $readOnlyFullUrl;

/**
 * @var string Flag to indicate who can access the 'Read-Only Full' view of the published report:<ul><li>If "ALL", it is available to anyone who has the link.</li><li>If "ORG", it is available only to members of the report owner's Smartsheet organization.</li></ul>Only returned in a response if **readOnlyFullEnabled** = true.
 * @Type("string")
 */
private $readOnlyFullAccessibleBy;
```

## Get Report

> Example Request: Get Report
> Example Response:
`GET /reports/{reportId}`

Gets the Report, including one page of Rows, and optionally populated with Discussions, Attachments, and source Sheets.

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **include** (optional) -- a comma-separated list of optional elements to include in the response:<ul><li>discussions</li><li>attachments</li><li>format</li><li>sourceSheets</li></ul>
  | **exclude** (optional) --  a comma-separated list of optional elements to <i>not include</i> in the response.<br/><ul><li>**linkInFromCellDetails**: excludes the following attributes from the **cell.linkInFromCell** Object:<ul><li>status</li><li>rowId</li><li>columnId</li></ul></li><li>**linksOutToCellsDetails**: excludes the following attributes from the **cell.linksOutToCells** array elements:<ul><li>status</li><li>rowId</li><li>columnId</li></ul></li></ul>
  | **pageSize** (optional): Number of rows per page.  If not specified, the default value is 100.  This operation can return a maximum of 500 rows per page.
  | **page** (optional): Which page integer (1-based) to return.  If not specified, the default value is 1.  If a page integer is specified that is greater than the integer of total pages, the last page is returned.
<%= RETURNS %> | Report Object, populated according to the specified parameters

## Get Report as Excel / CSV

> Example Request: Get Report as Excel
> Example Response:
> Example Request: Get Report as CSV
> Example Response:
`GET /reports/{reportId}`

Gets the Report in the format specified, based on the Report Id.

<aside class="notice">Note: For Excel format, only .xlsx output format is supported at this time.</aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
 | **Accept** -- must be set to one of the following values:<ul><li>application/vnd.ms-excel</li><li>text/csv</li></ul>
<%= RETURNS %> | The report file in either Excel or CSV format.

## List Reports

> Example Request: List Reports
> Example Response:
`GET /reports`

Gets the list of all Reports that the User has access to, in alphabetical order, by name.

<aside class="notice"><%= SUPPORTS_NUMERICDATES %></aside>

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PARAMETER_MODIFIEDSINCE %>
 | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | IndexResult Object containing an array of Report Objects limited to the following attributes:<ul><li>id</li><li>name</li><li>accessLevel</li><li>permalink</li></ul>

## Publish Report

### Get Report Publish Status

> Example Request: Get Report Publish Status
> Example Response:
`GET /reports/{reportId}/publish`

Gets the Report's 'Publish' settings.

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | ReportPublish Object

### Set Report Publish Status

> Example Request: Set Report Publish Status
> Example Response:
`PUT /reports/{reportId}/publish`

Sets the publish status of the Report and returns the new status, including the URL of any enabled publishing.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | ReportPublish Object limited to the following attributes:<ul><li>**readOnlyFullEnabled** (required)</li><li>**readOnlyFullAccessibleBy** (optional) - set to either "ALL" or "ORG", when **readOnlyFullEnabled**=true.</li></ul>To publish the Report, set **readOnlyFullEnabled** to `true`. To unpublish the Report, set **readOnlyFullEnabled** to `false`.
<%= RETURNS %> | Result Object containing a ReportPublish Object

<aside class="notice">If <b>readOnlyFullEnabled</b> is set to <code>true</code> in the request, but <b>readOnlyFullAccessibleBy</b> is not specified, the value of <b>readOnlyFullAccessibleBy</b> is defaulted to the organization-level 'Report Publishing' setting (if the Report owner belongs to an organization) or to "ALL" (if the Report owner does not belong to an organization).</aside>

## Send Report via Email

<%= partial "snippets/sendReport.md.erb" %>

## Share Report

For details about Report sharing, see Report Sharing.

## <%= RELATED %>

A Report is comprised of Columns, Rows, and Cells, and may optionally contain Attachments and/or Discussions.

### Report Attachments

For details about working with a Report's attachments, see Attachments.

### Report Cells

For details about working with a Report's cells, see Cells.

### Report Columns

For details about working with a Report's columns, see Columns.

### Report Discussions

For details about working with a Report's discussions, see Discussions.

### Report Rows

For details about working with a Report's rows, see Rows.

# Rows

A Row is a component of a Sheet or Report. Each Row is composed of a collection of Cells, and may optionally contain Discussions and/or Attachments.

## <%= OBJECTS %>

### Row Object

> Example Row Object:

```php
/**
 * @var integer Row Id
 * @Type("integer")
 */
private $id;

/**
 * @var integer Parent Sheet Id
 * @Type("integer")
 */
private $sheetId;

/**
 * @var integer Row integer within the sheet (1-based - starts at 1)
 * @Type("integer")
 */
private $rowNumber;

/**
 * @var integer Number that is incremented every time a sheet is modified
 * @Type("integer")
 */
private $version;

/**
 * @var boolean `true` if this row is filtered out by a column filter (and thus is not displayed in the Smartsheet app), `false` if the row is not filtered out.<br/>Only returned if the **include** query string parameter contains **filters**.
 * @Type("boolean")
 */
private $filteredOut;

/**
 * @var boolean Only returned, with a value of `true`, if the sheet is a project sheet with dependencies enabled and this row is in the critical path
 * @Type("boolean")
 */
private $inCriticalPath;

/**
 * @var boolean Flag indicating whether the row is locked. In a response, a value of `true` indicates that the row has been locked by the sheet owner or the admin.
 * @Type("boolean")
 */
private $locked;

/**
 * @var boolean Flag indicating whether the row is locked for the requesting user. This attribute may be present in a response, but cannot be specified in a request.
 * @Type("boolean")
 */
private $lockedForUser;

/**
 * @var boolean Flag to indicate if the row is expanded or collapsed
 * @Type("boolean")
 */
private $expanded;

/**
 * @var string User's permission level on the Sheet that contains the Row
 * @Type("string")
 */
private $accessLevel;

/**
 * @var string Format descriptor (see Formatting).<br/>Only returned if the **include** query string parameter contains **format** and this row has a non-default format applied.
 * @Type("string")
 */
private $format;

/**
 * @var string Format descriptor describing this row's conditional format (see Formatting)<br/>Only returned if the **include** query string parameter contains **format** and this row has a conditional format applied.
 * @Type("string")
 */
private $conditionalFormat;

/**
 * @var DateTime Time of creation
 * @Type("DateTime")
 */
private $createdAt;

/**
 * @var User User Object containing name and email of the creator of this row
 * @Type("User")
 */
private $createdBy;

/**
 * @var DateTime Time of last modification
 * @Type("DateTime")
 */
private $modifiedAt;

/**
 * @var User User Object containing name and email of the last person to modify this row
 * @Type("User")
 */
private $modifiedBy;

/**
 * @var Cell[] Array of Cell Objects belonging to the row
 * @Type("Cell[]")
 */
private $cells;

/**
 * @var Discussion[] Array of Discussion Objects.<br/>Only returned if the **include** query string parameter contains **discussions**.
 * @Type("Discussion[]")
 */
private $discussions;

/**
 * @var Attachment[] Array of Attachment Objects.<br/>Only returned if the **include** query string parameter contains **attachments**.
 * @Type("Attachment[]")
 */
private $attachments;

/**
 * @var Column[] Array of Column Objects.<br/>Only returned if the Get Row **include** query string parameter contains **columns**.
 * @Type("Column[]")
 */
private $columns;

/**
 * @var string URL that represents a direct link to the Row in Smartsheet<br/>Only returned if the **include** query string parameter contains **rowPermalink**.
 * @Type("string")
 */
private $permalink;

/**
 * @var integer In a response - the Id of the parent row (if any).<br/><br/>In a request - the Id of the desired parent row (used to specify the location for a new or moved row). For more information, see Row Location.
 * @Type("integer")
 */
private $parentId;

/**
 * @var integer In a response - the Id of the previous sibling row at the same hierarchical level of this row (if any).<br/><br/>In a request - the Id of the desired sibling row (used to specify the location for a new or moved row). For more information, see Row Location.
 * @Type("integer")
 */
private $siblingId;

/**
 * @var boolean Flag used to specify the location for a new or moved row. <%= REQUEST_ONLY_ATTRIBUTE %> For more information, see Row Location.
 * @Type("boolean")
 */
private $toTop;

/**
 * @var boolean Flag used to specify the location for a new or moved row. <%= REQUEST_ONLY_ATTRIBUTE %> For more information, see Row Location.
 * @Type("boolean")
 */
private $toBottom;

/**
 * @var boolean Flag used to specify the location for a new or moved row. <%= REQUEST_ONLY_ATTRIBUTE %> For more information, see Row Location.
 * @Type("boolean")
 */
private $above;
```

### CopyOrMoveRowDirective Object
```php

/**
 * @var integer[] The Ids of the rows to move or copy from the source sheet
 * @Type("integer[]")
 */
private $rowIds;

/**
 * @var CopyOrMoveRowDestination A CopyOrMoveRowDestination Object that identifies the destination sheet
 * @Type("CopyOrMoveRowDestination")
 */
private $to;
```

### CopyOrMoveRowDestination Object
```php

/**
 * @var integer Id of the destination sheet
 * @Type("integer")
 */
private $sheetId;
```

### CopyOrMoveRowResult Object
```php

/**
 * @var integer Id of the destination sheet
 * @Type("integer")
 */
private $destinationSheetId;

/**
 * @var RowMapping[] Array of RowMapping Objects
 * @Type("RowMapping[]")
 */
private $rowMappings;
```

### RowMapping Object
```php

/**
 * @var integer Row Id in the source sheet
 * @Type("integer")
 */
private $from;

/**
 * @var integer Row Id in the destination sheet
 * @Type("integer")
 */
private $to;
```

## Add Rows

> Example Request: Add Rows
> Example Response:
`POST /sheets/{sheetId}/rows`

Inserts one or more rows into the Sheet specified in the URL.

<aside class="notice"><%= SUPPORTS_OPTIONAL_BULK %></aside>

<aside class="notice">If multiple rows are specified in the request, all rows must be inserted at the same location (for example, the <b>toTop</b>, <b>toBottom</b>, <b>parentId</b>, <b>siblingId</b>, and <b>above</b> attributes must be the same for all rows in the request).</aside>

<aside class="notice">In a parent row, values of the following fields are auto-calculated based upon values in the child rows (and therefore cannot be updated using the API): Start Date, End Date, Duration, % Complete.</aside>

     |     |
-----|-----|
<%= SCOPE %> | WRITE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= PARAMETERS %> | <%= PARAMETER_ALLOW_PARTIAL_SUCCESS %><BR><%= PARAMETER_OVERRIDE_VALIDATION %>
<%= REQUEST %> | Row object or an array of Row objects, with the following attributes:<ul><%= partial "snippets/addRowUpdateRow.md.erb" %></ul>
     |     |
-----|-----|
<%= RETURNS %> | Result object containing the newly created rows -- either a single Row object or array of Row objects, corresponding to what was specified in the request, as well as the new version of the Sheet.
<%= ERRORS %> | <u><b>When <code>allowPartialSuccess=false</code> (or not specified):</b></u><br/><br/>If an error occurs, the Error object returned contains a **detail** attribute set to an object with the following attribute:<ul><li>**index**: the array index of the row that caused the error (0 if a single Row was passed in)</li></ul>If any error occurs, the entire request fails (no rows are added), and the Error response returned describes the first problem that was encountered. For example:<br/>{<br/>&#160;&#160;"errorCode": 1042,<br/>&#160;&#160;"message": "The cell value in column 5504245941200772 did not conform to the strict requirements for type CHECKBOX."<br/>&#160;&#160;"detail": {<br/>&#160;&#160;&#160;&#160;"index": 4<br/>&#160;&#160;}<br/>}<br/><br/><br/><u><b>When <code>allowPartialSuccess=true</code>:</b></u><br/><br/><%= PARTIAL_SUCCESS %>

## Copy Rows to Another Sheet

> Example Request: Copy Rows to Another Sheet
<%= partial "snippets/rowCopyMove_response.md.erb" %>

`POST /sheets/{sheetId}/rows/copy`

Copies Rows from the Sheet specified in the URL to (the bottom of) another sheet.

<aside class="notice">Up to 5,000 row Ids can be specified in the request, but if the total integer of rows in the destination sheet after the copy exceeds the Smartsheet row limit, an error response is returned.</aside>
     |     |
-----|-----|
<%= SCOPE %> | WRITE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= PARAMETERS %> | **include** (optional) -- comma-separated list of row elements to copy in addition to the cell data:<ul><li>attachments</li><li>discussions</li><li>children - if specified, any child rows of the rows specified in the request are also copied to the destination sheet, and parent-child relationships amongst rows are preserved within the destination sheet; if not specified, only the rows specified in the request are copied.</li><li>**all** - specify a value of "all" to include everything (attachments, discussions, and children)</li></ul>**ignoreRowsNotFound** (optional) -- true or false: default is false. If set to true, specifying row Ids that do not exist within the source sheet does not cause an error response. If omitted or set to false, specifying row Ids that do not exist within the source sheet causes an error response (and no rows are copied).
<%= REQUEST %> | CopyOrMoveRowDirective Object
<%= RETURNS %> | CopyOrMoveRowResult Object

## Delete Rows

> Example Request: Delete Rows
> Example Response:
`DELETE /sheets/{sheetId}/rows?ids={rowId1},{rowId2},{rowId3}`

Deletes one or more rows from the Sheet specified in the URL.

<aside class="warning">This operation deletes ALL child Rows of the specified Rows.</aside>

     |     |
-----|-----|
<%= SCOPE %> | WRITE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **ids** (required) - comma-separated list of Row Ids
 | **ignoreRowsNotFound** (optional) - true or false. If set to false and any of the specified Row Ids are not found, no rows are deleted, and the "not found" error is returned.
<%= RETURNS %> | Result Object containing Row Ids corresponding to all rows that were successfully deleted (including any child rows of rows specified in the URL).

## Get Row

> Example Request: Get Row
> Example Response:
`GET /sheets/{sheetId}/rows/{rowId}`

Gets the Row specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **include** (optional) -- a comma-separated list of elements to include in the response.<br/><br/>See Row Include Flags.<br/>Also supports the **columns** include flag, which adds a columns array that specifies all of the columns for the sheet. This enables you to have the full context of the cells in the row.<br/><br/>The **filters** include flag may be used in conjunction with **columns** to include the user's column filters with the columns.
  | **exclude** (optional) -- a comma-separated list of elements to <i>not include</i> in the response.<br/><ul><li>**nonexistentCells**: excludes cells that have never contained any data</li><li>**linkInFromCellDetails**: excludes the following attributes from the **cell.linkInFromCell** Object:<ul><li>status</li><li>rowId</li><li>columnId</li></ul></li><li>**linksOutToCellsDetails**: excludes the following attributes from the **cell.linksOutToCells** array elements:<ul><li>status</li><li>rowId</li><li>columnId</li></ul></li></ul>
<%= RETURNS %> | Row Object, populated according to the specified parameters

## List Rows

To get the list of all Rows in a Sheet, use the Get Sheet operation.

## Move Rows to Another Sheet

> Example Request: Move Rows to Another Sheet
<%= partial "snippets/rowCopyMove_response.md.erb" %>

`POST /sheets/{sheetId}/rows/move`

Moves Rows from the Sheet specified in the URL to (the bottom of) another sheet.
<aside class="notice">Up to 5,000 row Ids can be specified in the request, but if the total integer of rows in the destination sheet after the move exceeds the Smartsheet row limit, an error response is returned.</aside>
<aside class="notice">Any child rows of the rows specified in the request are also moved. Parent-child relationships amongst rows are preserved within the destination sheet.</aside>

     |     |
-----|-----|
<%= SCOPE %> | WRITE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= PARAMETERS %> | **include** (optional) -- comma-separated list of row elements to move in addition to the cell data:<ul><li>attachments</li><li>discussions</li></ul>**ignoreRowsNotFound** (optional) -- true or false: default is false. If set to true, specifying row Ids that do not exist within the source sheet do not cause an error response. If omitted or set to false, specifying row Ids that do not exist within the source sheet causes an error response (and no rows are moved).
<%= REQUEST %> | CopyOrMoveRowDirective Object
<%= RETURNS %> | CopyOrMoveRowResult Object

## Send Rows via Email

<%= partial "snippets/sendRows.md.erb" %>

## Send Update Request

<%= partial "snippets/createUpdateRequest.md.erb" %>

## Update Rows

> Example Request: Update Rows
> Example Response:
`PUT /sheets/{sheetId}/rows`

Updates cell values in the specified rows, expands/collapses the specified rows, and/or modifies the position of specified rows (including indenting/outdenting).

<aside class="notice">If a row's position is updated, all child rows are moved with the row.</aside>

<aside class="notice">In a parent row, values of the following fields are auto-calculated based upon values in the child rows (and therefore cannot be updated using the API): Start Date, End Date, Duration, % Complete.</aside>

     |     |
-----|-----|
<%= SCOPE %> | WRITE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= PARAMETERS %> | <%= PARAMETER_ALLOW_PARTIAL_SUCCESS %><BR><%= PARAMETER_OVERRIDE_VALIDATION %>
<%= REQUEST %> | Row object or an array of Row objects, with the following attributes:<ul><li>**id** (required)</li><%= partial "snippets/addRowUpdateRow.md.erb" %></ul>

     |     |
-----|-----|
<%= RETURNS %> | Result object containing an array of the updated rows.
<%= ERRORS %>  | <u><b>When <code>allowPartialSuccess=false</code> (or not specified):</b></u><br/><br/>If an error occurs, the Error Object returned contains a **detail** attribute set to an object with the following attributes:<ul><li>**index**: the array index of the row that caused the error (0 if a single Row was passed in)</li><li>**rowId**: the id of the row that caused the error (omitted if the row was missing an id)</li></ul>If any error occurs, the entire request fails (no rows are updated), and the Error response returned describes the first problem that was encountered. For example:<br/>{<br/>&#160;&#160;"errorCode": 1042,<br/>&#160;&#160;"message": "The cell value in column 5504245941200772 did not conform to the strict requirements for type CHECKBOX."<br/>&#160;&#160;"detail": {<br/>&#160;&#160;&#160;&#160;"index": 4<br/>&#160;&#160;&#160;&#160;"rowId": 6572427401553796<br/>&#160;&#160;}<br/>}<br/><br/><br/><u><b>When <code>allowPartialSuccess=true</code>:</b></u><br/><br/><%= PARTIAL_SUCCESS %>

## <%= RELATED %>

A Row is comprised of a collection of Cells, and may optionally contain Attachments and/or Discussions.

### Row Attachments

For details about working with a Row's attachments, see Attachments.

### Row Cells

For details about working with a Row's cells, see Cells.

For details about working with images in cells, see Cell Images.

### Row Discussions

For details about working with a Row's discussions, see Discussions.

### Row Include Flags

Endpoints which return rows (for example, get sheet, get row) support the optional **include** query string parameter. If specified, the value of the **include** parameter is
a comma-delimited list of flags that indicate additional attributes to be included in each Row Object within the response.

Include Flag | Notes |
-------------|-------|
**discussions**	| Includes row **discussions** array.<br/>To include discussion attachments, both **attachments** and **discussions** must be present in the include list.
**attachments**	| Includes row **attachments** array.<br/>To include discussion attachments, both **attachments** and **discussions** must be present in the include list.
**format**		| Includes **format** attribute on the row and its cells.  See Formatting.
**filters**		| Includes **filteredOut** attribute indicating if the row should be displayed or hidden according to the sheet's filters.
**columnType**	| Includes **columnType** attribute in the row's cells indicating the type of the column the cell resides in.
/**
 * @var Includes **permalink** attribute that represents a direct link to the row in the Smartsheet application.
**rowWriterInfo** Includes **createdBy** and **modifiedBy** attributes on the row, indicating the row's creator, and last modifier.
 * @Type("Includes **permalink** attribute that represents a direct link to the row in the Smartsheet application.
**rowWriterInfo**")
 */
private $rowPermalink;

/**
 * @var Includes **objectValue** attribute on cells containing values. For more information see Cell Reference.

### Row Location

When using the Add Rows operation to insert new rows into a sheet or the Update Rows to move rows in a sheet,
the following "location-specifier" Row attributes can be used to specify where the rows get added or moved to in the sheet:

* toTop
* toBotom
* above
* siblingId
* parentId
* indent (applicable when updating a row only)
* outdent (applicable when updating a row only)

The following table describes which *location-specifier* Row attributes should be set to implement various actions.

Action Row attributes
 * @Type("Includes **objectValue** attribute on cells containing values. For more information see Cell Reference.

### Row Location

When using the Add Rows operation to insert new rows into a sheet or the Update Rows to move rows in a sheet,
the following "location-specifier" Row attributes can be used to specify where the rows get added or moved to in the sheet:

* toTop
* toBotom
* above
* siblingId
* parentId
* indent (applicable when updating a row only)
* outdent (applicable when updating a row only)

The following table describes which *location-specifier* Row attributes should be set to implement various actions.

Action")
 */
private $objectValue;

-------|--------
Add or move the Row to the top of the Sheet. | **toTop** = `true`
Add or move the Row to the bottom of the Sheet. | **toBottom** = `true`
Add or move the Row directly above the specified sibling Row (at the same hierarchical level). | **above** = `true`<br/>**siblingId** = (Id of sibling row)
Add or move the Row directly below the specified sibling Row (at the same hierarchical level). | **siblingId** = (Id of sibling row)
Add or move the Row so that it is the first child row of the specified parent Row. | **parentId** = (Id of parent row)
Add or move the Row so that it is the last child row of the specified parent Row. | **parentId** = (Id of parent row)<br/>**toBottom** = `true`
Indent an existing Row. | **indent** = (integer of level to indent, minimum of 1)
Outdent an existing Row. | **outdent** = (integer of level to outdent, minimum of 1)

<aside class="notice"><b>Troubleshooting errors:</b>&#160;&#160;If you receive an Error response when attempting to (individually) move both a parent Row and its child Rows in a single request, try achieving the objective by using two separate requests: 1) Move parent Row. 2) Move child Rows.</aside>

# Search

Use the *Search* operations to search a specific Sheet or to search across all Sheets that a User can access.

## <%= OBJECTS %>

### SearchResult Object

> Example SearchResult Object:

```php
/**
 * @var integer Total integer of search results
 * @Type("integer")
 */
private $totalCount;

/**
 * @var SearchResultItem[] Array of SearchResultItem Objects
 * @Type("SearchResultItem[]")
 */
private $results;
```

### SearchResultItem Object
```php

/**
 * @var string Search result text excerpt
 * @Type("string")
 */
private $text;

/**
 * @var integer Search result object Id
 * @Type("integer")
 */
private $objectId;

/**
 * @var string Search result object type (row, sheet, report, template, discussion, attachment)
 * @Type("string")
 */
private $objectType;

/**
 * @var integer Search result parent object Id
 * @Type("integer")
 */
private $parentObjectId;

/**
 * @var string Search result parent object type (workspace, folder, sheet, report, template)
 * @Type("string")
 */
private $parentObjectType;

/**
 * @var string Search result parent object name
 * @Type("string")
 */
private $parentObjectName;

/**
 * @var array Additional info on search result context (row num)
 * @Type("array")
 */
private $contextData;
```

## Search Everything

> Example Request: Search Everything
> Example Response:
`GET /search`

Searches all Sheets that the User can access, for the specified text.

<aside class="notice">Newly-created or recently-updated data may not be immediately discoverable via Search.</aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **query** (required): Text with which to perform the search.
<%= RETURNS %> | SearchResult Object that contains a maximum of 100 SearchResultems

## Search Sheet

<%= partial "snippets/searchSheet.md.erb" %>

# Send via Email

Use the *Send* operations to send a Report, a Row, or a Sheet via email.

## <%= OBJECTS %>

> Example Email Object
### Email Object
     |     |     |
-----|-----|-----|
**sendTo**  | Recipient[]  | Array of Recipient Objects. Required.
/**
 * @var string The subject of the email. Optional.
 * @Type("string")
 */
private $subject;

/**
 * @var string The message of the email. Optional.
 * @Type("string")
 */
private $message;

/**
 * @var boolean A flag to indicate whether or not to send a copy of the email to the sender. Optional, defaults to false.
 * @Type("boolean")
 */
private $ccMe;
```

### FormatDetails Object
     |     |     |
-----|-----|-----|
**paperSize**   | string | One of the following values: LETTER, LEGAL, WIDE, ARCHD, A4, A3, A2, A1, A0.

### Recipient Object

Specifies the recipient of an Email.  The recipient may be either an individual or a group.  To specify an individual, set the **email** attribute; to specify a group, set the **groupId** attribute.
Either **email** and **groupId** may be set, but not both.

     |     |     |
-----|-----|-----|
**email**   | string | The email address of an individual recipient. Optional.
/**
 * @var integer The Id of a group recipient. Optional.
 * @Type("integer")
 */
private $groupId;
```

### RowEmail Object

Extends the Email Object, adding the following:

/**
 * @var integer[] Ids of the columns to be included.
 * @Type("integer[]")
 */
private $columnIds;

/**
 * @var boolean A flag to indicate whether or not to include Attachments in the email.
 * @Type("boolean")
 */
private $includeAttachments;

/**
 * @var boolean A flag to indicate whether or not to include Discussions in the email.
 * @Type("boolean")
 */
private $includeDiscussions;

**layout**   | string | One of the following values: HORIZONTAL, VERTICAL.  Optional, defaults to HORIZONTAL when multiple rows are being sent, and to VERTICAL when a single row is being sent.  HORIZONTAL formats the rows being sent as a grid, whereas VERTICAL formats the rows being sent as separate cards.

### MultiRowEmail Object

Extends the RowEmail Object, adding the following:

/**
 * @var integer[] Ids of rows to be included.
 * @Type("integer[]")
 */
private $rowIds;
```

### SheetEmail Object

Extends the Email Object, adding the following:

/**
 * @var string One of the following values:<ul><li>PDF</li><li>PDF_GANTT</li><li>EXCEL</li></ul>
 * @Type("string")
 */
private $format;

/**
 * @var FormatDetails A FormatDetails Object.
 * @Type("FormatDetails")
 */
private $formatDetails;
```

## Send Report

<%= partial "snippets/sendReport.md.erb" %>

## Send Rows

<%= partial "snippets/sendRows.md.erb" %>

## Send Sheet

<%= partial "snippets/sendSheet.md.erb" %>

## Send Update Request

<%= partial "snippets/createUpdateRequest.md.erb" %>

# Server Information

For developer convenience, the Smartsheet API provides access to application constants.

## <%= OBJECTS %>

### ServerInfo Object

> Example ServerInfo Object:

```php
/**
 * @var array Array of strings representing all Smartsheet-supported locales.
 * @Type("array")
 */
private $supportedLocales;

/**
 * @var FormatTables Definition of format tables that are used in Column, Row, and Cell **format** property.  For more information, see Formatting.
 * @Type("FormatTables")
 */
private $formats;
```

## Get Server Info

> Example Request: Get Server Info
> Example Response: (*too long to list in its entirety*)
`GET /serverinfo`

Gets application constants.

     |     |
-----|-----|
<%= SCOPE %> | None required (may be called unauthenticated)
<%= HEADERS %> | None required (may be called unauthenticated)
<%= RETURNS %> | ServerInfo Object

# Sharing

Use the *Sharing* operations to control sharing of Reports, Sheets, Workspaces, and Sights.

## <%= OBJECTS %>

### Share Object

> Example Share Object:
     |     |     |
-----|-----|-----|
**id**          | integer | Share Id.<br/>**NOTE:** unlike other Smartsheet object ids, this id is an alphanumeric string.
**type**        | string | The type of this share. One of the following values: `USER` or `GROUP`.
**userId**      | integer | User Id if the share is a user share, else null.
**groupId**     | integer | Group Id if the share is a group share, else null.
**email**       | string | User's primary email address for user shares; null for group shares.
**name**        | string | If a user share and user is also a contact, the user's full name.  If a group share, the group's name.
/**
 * @var string User or group's access level on shared object.
 * @Type("string")
 */
private $accessLevel;

**scope**       | string | The scope of this share. One of the following values: <ul><li>`ITEM`: an item-level share (that is, the specific object to which the Share applies is shared with the user or group)</li><li>`WORKSPACE`: a workspace-level share (that is, the workspace that contains the object to which the Share applies is shared with the user or group)</li></ul>
**createdAt**	| DateTime | Time that the share was created.
**modifiedAt**	| DateTime | Time that the share was modified.
**subject**		| string | The subject of the email that is optionally sent to notify the recipient. <%= REQUEST_ONLY_ATTRIBUTE %>
**message**		| string | The message included in the body of the email that is optionally sent to the recipient. <%= REQUEST_ONLY_ATTRIBUTE %>
**ccMe**		| boolean | Flag to indicate whether to send a copy of the email to the sharer of the sheet. <%= REQUEST_ONLY_ATTRIBUTE %>

## Report Sharing

### Delete Report Share

> Example Request: Delete Report Share
> Example Response:

<%= partial "snippets/deleteShare_response.md.erb" %>

`DELETE /reports/{reportId}/shares/{shareId}`

Deletes the Share specified in the URL.

<%= partial "snippets/deleteShare_table.md.erb" %>

### Get Report Share

> Example Request: Get Report Share
> Example Response:

<%= partial "snippets/getShare_response.md.erb" %>

`GET /reports/{reportId}/shares/{shareId}`

Gets the Share specified in the URL.

<%= partial "snippets/getShare_table.md.erb" %>

### List Report Shares

> Example Request: List Report Shares
> Example Response:

<%= partial "snippets/listShares_response.md.erb" %>

`GET /reports/{reportId}/shares`

Gets a list of all Users and Groups to whom the specified Report is shared, and their access level.

<aside class="notice"><%= LIST_SHARES_RESPONSE_DESC %></aside>

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

<%= partial "snippets/listShares_table.md.erb" %>

### Share Report

> Example Request: Share Report
> Example Response:

<%= partial "snippets/share_response.md.erb" %>

`POST /reports/{reportId}/shares`

Shares a Report with the specified Users and Groups.

<aside class="notice"><%= SUPPORTS_OPTIONAL_BULK %></aside>

<%= SHARING_ERRORS %>

<%= partial "snippets/share_table.md.erb" %>

### Update Report Share

> Example Request: Update Report Share
> Example Response:

<%= partial "snippets/updateShare_response.md.erb" %>

`PUT /reports/{reportId}/shares/{shareId}`

Updates the access level of a User or Group for the specified Report.

<%= partial "snippets/updateShare_table.md.erb" %>

## Sheet Sharing

### Delete Sheet Share

> Example Request: Delete Sheet Share
> Example Response:

<%= partial "snippets/deleteShare_response.md.erb" %>

`DELETE /sheets/{sheetId}/shares/{shareId}`

Deletes the Share specified in the URL.

<%= partial "snippets/deleteShare_table.md.erb" %>

### Get Sheet Share

> Example Request: Get Sheet Share
> Example Response:

<%= partial "snippets/getShare_response.md.erb" %>

`GET /sheets/{sheetId}/shares/{shareId}`

Gets the Share specified in the URL.

<%= partial "snippets/getShare_table.md.erb" %>

### List Sheet Shares

> Example Request: List Sheet Shares
> Example Response:

<%= partial "snippets/listShares_response.md.erb" %>

`GET /sheets/{sheetId}/shares`

Gets a list of all Users and Groups to whom the specified Sheet is shared, and their access level.

<aside class="notice"><%= LIST_SHARES_RESPONSE_DESC %></aside>

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

<%= partial "snippets/listShares_table.md.erb" %>

### Share Sheet

> Example Request:
> Example Response:

<%= partial "snippets/share_response.md.erb" %>

`POST /sheets/{sheetId}/shares`

Shares a Sheet with the specified Users and Groups.

<aside class="notice"><%= SUPPORTS_OPTIONAL_BULK %></aside>

<%= SHARING_ERRORS %>

<%= partial "snippets/share_table.md.erb" %>

### Update Sheet Share

> Example Request: Update Sheet Share
> Example Response:

<%= partial "snippets/updateShare_response.md.erb" %>

`PUT /sheets/{sheetId}/shares/{shareId}`

Updates the access level of a User or Group for the specified Sheet.

<%= partial "snippets/updateShare_table.md.erb" %>

## Sight Sharing

### Delete Sight Share

> Example Request: Delete Sight Share
> Example Response:

<%= partial "snippets/deleteShare_response.md.erb" %>

`DELETE /sights/{sightId}/shares/{shareId}`

Deletes the Share specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | SHARE_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | Result Object

### Get Sight Share

> Example Request: Get Sight Share
> Example Response:

<%= partial "snippets/getShare_response.md.erb" %>

`GET /sights/{sightId}/shares/{shareId}`

Gets the Share specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | READ_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | Share Object

### List Sight Shares

> Example Request:
> Example Response:

<%= partial "snippets/listShares_response.md.erb" %>

`GET /sights/{sightId}/shares`

Gets a list of all Users and Groups to whom the specified Sight is shared, and their access level.

<aside class="notice"><%= LIST_SHARES_RESPONSE_DESC %></aside>

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **include** (optional): when specified with a value of `workspaceShares`, response contains both <i>item-level</i> shares (<b>scope</b>='ITEM') and <i>workspace-level</i> shares (<b>scope</b>='WORKSPACE').<br/><br/><%= PAGING_PARAMETERS %>
<%= RETURNS %> | IndexResult Object containing an array of Share Objects<br/><br/>**NOTE:** If the response contains an *item-level* share (**scope**='ITEM') and a *workspace-level* share (**scope**='WORKSPACE') for the same user or group, the **id** of those two Share Objects is identical, but the **scope** attribute value can be used to disambiguate the two.

### Share Sight

> Example Request: Share Sight
> Example Response:

<%= partial "snippets/share_response.md.erb" %>

`POST /sights/{sightId}/shares`

Shares a Sight with the specified Users and Groups.

<aside class="notice"><%= SUPPORTS_OPTIONAL_BULK %></aside>

<%= SHARING_ERRORS %>

     |     |
-----|-----|
<%= SCOPE %> | SHARE_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= PARAMETERS %> | **sendEmail** (optional): Either `true` or `false` to indicate whether or not to notify the user by email. Default is **false**.
<%= REQUEST %> | Share Object or an array of Share Objects, with the following attributes:<ul><li>email (optional): the individual share recipient's email address</li><li>groupId (optional): the group share recipient's group Id</li><li>accessLevel (required)</li><li>subject (optional): The subject of the email that is optionally sent to notify the recipient.</li><li>message (optional): The message in the body of the email that is optionally sent to the recipient.</li><li>ccMe (optional): boolean flag to indicate whether or not to CC the user sharing the sheet.</li></ul>**NOTE:** One of **email** or **groupId** must be specified, but not both.
<%= RETURNS %> | Result Object containing either a single Share Object or an array of Share Objects, corresponding to what was specified in the request. All shares have <b>scope</b>="ITEM".
<%= ERRORS %>  | If an error occurs because the request specified one or more *alternate* email addresses (that is, not the primary email address associated with the User account), the Error Object returned contains a **detail** attribute set to an array of objects, each object in the array having the following attributes:<ul><li>**alternateEmailAddress**: User's *alternate* email address that was specified in the request</li><li>**primaryEmailAddress**: User's primary email address that must instead be specified for the operation</li></ul>For example:<br/>{<br/>&#160;&#160;"errorCode": 5xxx,<br/>&#160;&#160;"message": "u1+1@smartsheet.com is an alternate address of the user u1@smartsheet.com. Please retry sharing directly to u1@smartsheet.com."<br/>&#160;&#160;"detail": [<br/>&#160;&#160;&#160;&#160;&#160;&#160;{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"alternateEmailAddress": "u1+1@smartsheet.com",<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"primaryEmailAddress": "u1@smartsheet.com"<br/>&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;]<br/>}

### Update Sight Share

> Example Request: Update Sight Share
> Example Response:

<%= partial "snippets/updateShare_response.md.erb" %>

`PUT /sights/{sightId}/shares/{shareId}`

Updates the access level of a User or Group for the specified Sight.

     |     |
-----|-----|
<%= SCOPE %> | SHARE_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | Share Object limited to the following attribute:<ul><li>accessLevel (string)</li></ul>
<%= RETURNS %> | Result Object containing the modified Share Object

## Workspace Sharing

### Delete Workspace Share

> Example Request: Delete Workspace Share
> Example Response:

<%= partial "snippets/deleteShare_response.md.erb" %>

`DELETE /workspaces/{workspaceId}/shares/{shareId}`

Deletes the Share specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WORKSPACES
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | Result Object

### Get Workspace Share

> Example Request: Get Workspace Share
> Example Response:

<%= partial "snippets/getShare_response.md.erb" %>

`GET /workspaces/{workspaceId}/shares/{shareId}`

Gets the Share specified in the URL.

<%= partial "snippets/getShare_table.md.erb" %>

### List Workspace Shares

> Example Request: List Workspace Shares
> Example Response:

<%= partial "snippets/listShares_response.md.erb" %>

`GET /workspaces/{workspaceId}/shares`

Gets a list of all Users and Groups to whom the specified Workspace is shared, and their access level.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | IndexResult Object containing an array of Share Objects

### Share Workspace

> Example Request: Share Workspace
> Example Response:

<%= partial "snippets/share_response.md.erb" %>

`POST /workspaces/{workspaceId}/shares`

Shares a Workspace with the specified Users and Groups.

<aside class="notice"><%= SUPPORTS_OPTIONAL_BULK %></aside>

<%= SHARING_ERRORS %>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WORKSPACES
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= PARAMETERS %> | **sendEmail** (optional): Either `true` or `false` to indicate whether or not to notify the user by email. Default is **false**.
<%= REQUEST %> | Share Object or an array of Share Objects, with the following attributes:<ul><li>email (optional): the individual share recipient's email address</li><li>groupId (optional): the group share recipient's group Id</li><li>accessLevel (required)</li><li>subject (optional): The subject of the email that is optionally sent to notify the recipient.</li><li>message (optional): The message in the body of the email that is optionally sent to the recipient.</li><li>ccMe (optional): boolean flag to indicate whether or not to CC the user sharing the sheet.</li></ul>**NOTE:** One of **email** or **groupId** must be specified, but not both.
<%= RETURNS %> | Result Object containing either a single Share Object or an array of Share Objects, corresponding to what was specified in the request.
<%= ERRORS %>  | If an error occurs because the request specified one or more *alternate* email addresses (that is, not the primary email address associated with the User account), the Error Object returned contains a **detail** attribute set to an array of objects, each object in the array having the following attributes:<ul><li>**alternateEmailAddress**: User's *alternate* email address that was specified in the request</li><li>**primaryEmailAddress**: User's primary email address that must instead be specified for the operation</li></ul>For example:<br/>{<br/>&#160;&#160;"errorCode": 5xxx,<br/>&#160;&#160;"message": "u1+1@smartsheet.com is an alternate address of the user u1@smartsheet.com. Please retry sharing directly to u1@smartsheet.com."<br/>&#160;&#160;"detail": [<br/>&#160;&#160;&#160;&#160;&#160;&#160;{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"alternateEmailAddress": "u1+1@smartsheet.com",<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"primaryEmailAddress": "u1@smartsheet.com"<br/>&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;]<br/>}

### Update Workspace Share

> Example Request: Update Workspace Share
> Example Response:

<%= partial "snippets/updateShare_response.md.erb" %>

`PUT /workspaces/{workspaceId}/shares/{shareId}`

Updates the access level of a User or Group for the specified Workspace.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WORKSPACES
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | Share Object limited to the following attribute:<ul><li>accessLevel (string)</li></ul>
<%= RETURNS %> | Result Object containing the modified Share Object

# Sheets

A Sheet can exist in a user's **Sheets** folder (Home), in a Folder, or in a Workspace. It is comprised of Columns, Rows, and Cells, and may optionally contain Attachments and/or Discussions.

## <%= OBJECTS %>

### Sheet Object

> Example Sheet Object:

```php
/**
 * @var integer Sheet Id
 * @Type("integer")
 */
private $id;

/**
 * @var string Sheet name
 * @Type("string")
 */
private $name;

/**
 * @var integer A integer that is incremented every time a Sheet is modified
 * @Type("integer")
 */
private $version;

/**
 * @var integer The total integer of rows in the Sheet
 * @Type("integer")
 */
private $totalRowCount;

/**
 * @var string User's permissions on the Sheet
 * @Type("string")
 */
private $accessLevel;

/**
 * @var ProjectSettings Sheet's project settings containing the working days, non-working days, and length of day for a project sheet
 * @Type("ProjectSettings")
 */
private $projectSettings;

/**
 * @var array Array of enum strings (see Attachment.attachmentType) indicating the allowable attachment options for the current User and Sheet
 * @Type("array")
 */
private $effectiveAttachmentOptions;

/**
 * @var boolean Returned only if the Sheet belongs to an expired trial (value = 'true')
 * @Type("boolean")
 */
private $readOnly;

/**
 * @var boolean Flag to indicate that Gantt is enabled
 * @Type("boolean")
 */
private $ganttEnabled;

/**
 * @var boolean Flag to indicate that dependencies are enabled
 * @Type("boolean")
 */
private $dependenciesEnabled;

/**
 * @var boolean Flag to indicate that resource management is enabled
 * @Type("boolean")
 */
private $resourceManagementEnabled;

/**
 * @var boolean Returned only if the User has marked this sheet as a favorite in their Home tab (value = 'true')
 * @Type("boolean")
 */
private $favorite;

/**
 * @var boolean Returned only if there are column filters on the Sheet.  Value = 'true' if "show parent rows" is enabled for the filters.
 * @Type("boolean")
 */
private $showParentRowsForFilters;

/**
 * @var SheetUserSettings A SheetUserSettings Object containing the current user's sheet-specific settings.
 * @Type("SheetUserSettings")
 */
private $userSettings;

/**
 * @var string Email address of the Sheet owner
 * @Type("string")
 */
private $owner;

/**
 * @var integer User Id of the Sheet owner
 * @Type("integer")
 */
private $ownerId;

/**
 * @var string URL that represents a direct link to the Sheet in Smartsheet
 * @Type("string")
 */
private $permalink;

/**
 * @var Source A Source Object indicating the Sheet or Template from which this sheet was created
 * @Type("Source")
 */
private $source;

/**
 * @var DateTime Time that the Sheet was created
 * @Type("DateTime")
 */
private $createdAt;

/**
 * @var DateTime Time that the Sheet was modified
 * @Type("DateTime")
 */
private $modifiedAt;

/**
 * @var Column[] Array of Column Objects
 * @Type("Column[]")
 */
private $columns;

/**
 * @var Row[] Array of Row Objects
 * @Type("Row[]")
 */
private $rows;

/**
 * @var Discussion[] Array of Discussion Objects<br/>Only returned if the **include** query string parameter contains **discussions**.
 * @Type("Discussion[]")
 */
private $discussions;

/**
 * @var Attachment[] Array of Attachment Objects<br/>Only returned if the **include** query string parameter contains **attachments**.
 * @Type("Attachment[]")
 */
private $attachments;

/**
 * @var integer The Id of the Template from which to create the Sheet. This attribute can be specified in a request, but is never present in a response.
 * @Type("integer")
 */
private $fromId;
```

### SheetPublish Object

/**
 * @var boolean If `true`, a lightweight version of the sheet is published without row attachments or discussions.
 * @Type("boolean")
 */
private $readOnlyLiteEnabled;

/**
 * @var boolean If `true`, a rich version of the sheet is published with the ability to download row attachments and discussions.
 * @Type("boolean")
 */
private $readOnlyFullEnabled;

/**
 * @var boolean If `true`, a rich version of the sheet is published with the ability to edit cells and manage attachments and discussions.
 * @Type("boolean")
 */
private $readWriteEnabled;

/**
 * @var boolean If `true`, a webcal is available for the calendar in the sheet.
 * @Type("boolean")
 */
private $icalEnabled;

/**
 * @var string Flag to indicate who can access the 'Read-Only Full' view of the published sheet:<ul><li>If "ALL", it is available to anyone who has the link.</li><li>If "ORG", it is available only to members of the sheet owner's Smartsheet organization.</li></ul>Only returned in a response if **readOnlyFullEnabled** = true.
 * @Type("string")
 */
private $readOnlyFullAccessibleBy;

/**
 * @var string Flag to indicate who can access the 'Edit by Anyone' view of the published sheet:<ul><li>If "ALL", it is available to anyone who has the link.</li><li>If "ORG", it is available only to members of the sheet owner's Smartsheet organization.</li></ul>Only returned in a response if **readWriteEnabled** = true.
 * @Type("string")
 */
private $readWriteAccessibleBy;

/**
 * @var string URL for 'Read-Only HTML' view of the published sheet<br/>Only returned in a response if **readOnlyLiteEnabled** = true.
 * @Type("string")
 */
private $readOnlyLiteUrl;

/**
 * @var string URL for 'Read-Only Full' view of the published sheet<br/>Only returned in a response if **readOnlyFullEnabled** = true.
 * @Type("string")
 */
private $readOnlyFullUrl;

/**
 * @var string URL for 'Edit by Anyone' view of the published sheet<br/>Only returned in a response if **readWriteEnabled** = true.
 * @Type("string")
 */
private $readWriteUrl;

/**
 * @var string URL for 'iCal' view of the published sheet<br/>Only returned in a response if **icalEnabled** = true.
 * @Type("string")
 */
private $icalUrl;
```

### SheetUserSettings Object

Represents individual user settings for a specific sheet.  User settings may be updated even on sheets where the current user only has read access (for example, viewer permissions or a read-only sheet).

/**
 * @var boolean Does this user have "Show Critical Path" turned on for this sheet?  Note this setting only has an effect on project sheets with dependencies enabled.
 * @Type("boolean")
 */
private $criticalPathEnabled;

/**
 * @var boolean Does this user have "Display Summary Tasks" turned on for this sheet?  Applies only to sheets where Calendar View has been configured.
 * @Type("boolean")
 */
private $displaySummaryTasks;
```

### ProjectSettings Object

Represents the project settings dependencies for a specific sheet.  Project settings may be updated on sheets that the user has editor access.

/**
 * @var String[] Working days of a week for a project sheet. Valid values must be an array of strings of days of the week: <ul><li>MONDAY</li><li>TUESDAY</li><li>WEDNESDAY</li><li>THURSDAY</li><li>FRIDAY</li><li>SATURDAY</li><li>SUNDAY</li></ul>
 * @Type("String[]")
 */
private $workingDays;

/**
 * @var DateTime[] Non-working days for a project sheet. The format for the DateTime array must be an array of strings that are valid [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) dates ('YYYY-MM-DD').
 * @Type("DateTime[]")
 */
private $nonWorkingDays;

/**
 * @var integer Length of a workday for a project sheet. Valid value must be above or equal to 1 hour, and less than or equal to 24 hours.
 * @Type("integer")
 */
private $lengthOfDay;
```

### Source Object
```php

/**
 * @var integer Id of the Sheet or Template from which the enclosing sheet was created
 * @Type("integer")
 */
private $id;

/**
 * @var string "sheet" or "template"
 * @Type("string")
 */
private $type;
```

## Copy Sheet

> Example Request: Copy Sheet
> Example Response:
`POST /sheets/{sheetId}/copy`

Creates a copy of the specified Sheet.

     |     |
-----|-----|
<%= SCOPE %> | CREATE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= PARAMETERS %> | **include** (optional) -- comma-separated list of elements to copy:<ul><li>data</li><li>attachments</li><li>discussions</li><li>cellLinks</li><li>forms</li><li>**all** - specify a value of "all" to include everything (data, attachments, discussions, cellLinks, and forms)</li></ul><i>Note</i>: Cell history is not copied, regardless of which **include** parameter values are specified.
<%= REQUEST %> | ContainerDestination Object
<%= RETURNS %> | Result Object containing a Sheet Object for the newly created Sheet, limited to the following attributes:<ul><li>id</li><li>name</li><li>accessLevel</li><li>permalink</li></ul>

## Create Sheet

To create a Sheet from scratch, use one of the following operations (according to where you want to create the Sheet):
<ul>
<li>Create Sheet</li>
<li>Create Sheet in Folder</li>
<li>Create Sheet in Workspace</li>
</ul>
<p>To create a Sheet from a Template, see Create Sheet from Template.</p>

### Create Sheet in "Sheets" folder

> Example Request: Create Sheet in "Sheets" folder
> Example Response:

<%= partial "snippets/createSheet_response.md.erb" %>

`POST /sheets`

Creates a Sheet from scratch in the user's **Sheets** folder (Home). To create a Sheet from scratch in a subfolder of the **Sheets** folder, use Create Sheet in Folder.

<%= partial "snippets/createSheet_table.md.erb" %>

### Create Sheet in Folder

> Example Request: Create Sheet in Folder
> Example Response:

<%= partial "snippets/createSheet_response.md.erb" %>

`POST /folders/{folderId}/sheets`

Creates a Sheet from scratch in the specified Folder.

<%= partial "snippets/createSheet_table.md.erb" %>

### Create Sheet in Workspace

> Example Request: Create Sheet in Workspace
> Example Response:

<%= partial "snippets/createSheet_response.md.erb" %>

`POST /workspaces/{workspaceId}/sheets`

Creates a Sheet from scratch at the top-level of the specified Workspace. To create a Sheet from scratch in a Folder within a Workspace, use Create Sheet in Folder.

<%= partial "snippets/createSheet_table.md.erb" %>

## Create Sheet from Template

To create a Sheet from a Template, use one of the following operations (according to where you want to create the Sheet):
<ul>
<li>Create Sheet in "Sheets" folder from Template</li>
<li>Create Sheet in Folder from Template</li>
<li>Create Sheet in Workspace from Template</li>
</ul>
<p>To create a Sheet from scratch, see Create Sheet.</p>

### Create Sheet in "Sheets" Folder From Template

> Example Request: Create Sheet in "Sheets" Folder From Template
> Example Response:

<%= partial "snippets/createSheetFromExisting_response.md.erb" %>

`POST /sheets`

Creates a Sheet in the user's **Sheets** folder (Home), from the specified Template. To create a Sheet in a subfolder of the **Sheets** folder, use Create Sheet in Folder from Template.

<%= partial "snippets/createSheetFromExisting_table.md.erb" %>

### Create Sheet in Folder From Template

> Example Request: Create Sheet in Folder From Template
``` javascript
// Specify the directive
var sheet = {
    "name": "newsheet",
    "fromId": 7679398137620356
};

// Set options
var options = {
    body: sheet,
    folderId: 3734419270854532
};

// Create sheet from template in the specified folder
smartsheet.sheets.createSheetFromExisting(options)
    .then(function (data) {
        console.log(data);
    })
    .catch(function (error) {
        console.log(error);
    });
```
> Example Response:

<%= partial "snippets/createSheetFromExisting_response.md.erb" %>

`POST /folders/{folderId}/sheets`

Creates a Sheet in the specified Folder, from the specified Template.

<%= partial "snippets/createSheetFromExisting_table.md.erb" %>

### Create Sheet in Workspace From Template

> Example Request: Create Sheet in Workspace From Template
> Example Response:

<%= partial "snippets/createSheetFromExisting_response.md.erb" %>

`POST /workspaces/{workspaceId}/sheets`

Creates a Sheet at the top-level of the specified Workspace, from the specified Template. To create a Sheet in a Folder within a Workspace, use Create Sheet in Folder from Template.

<%= partial "snippets/createSheetFromExisting_table.md.erb" %>

## Delete Sheet

> Example Request: Delete Sheet
> Example Response:
`DELETE /sheets/{sheetId}`

Deletes the Sheet specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | DELETE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | Result Object

## Get Sheet Version

> Example Request: Get Sheet Version
> Example Response:
`GET /sheets/{sheetId}/version`

Gets the Sheet version without loading the entire Sheet.

The following actions increment Sheet version:
<ul>
<li>add/modify cell value</li>
<li>add/modify row</li>
<li>add/modify Discussion/Comment</li>
<li>change formatting</li>
<li>add/remove/update version attachment</li>
<li>cell updated via cell link</li>
</ul>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | A simple object with only a **version** attribute

## Get Sheet

> Example Request: Get Sheet
> Example Response:
`GET /sheets/{sheetId}`

Gets the Sheet specified in the URL. Returns the Sheet, including Rows, and optionally populated with Discussion and Attachment Objects.

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **include** (optional) -- a comma-separated list of elements to include in the response.<br/>Supports all Row Include Flags with the following differences:<ul><li>**discussions**: includes sheet-level and row-level discussions</li><li>**attachments**: includes sheet-level and row-level attachments</li><li>**format**: includes column, row, and cell formatting</li><li>**filters**: includes column filters, and row.filteredOut attribute</li><li>**ownerInfo**: includes owner's email address and user Id</li></ul>Also supports the **source** include flag, which adds the Source Object indicating which sheet or template the sheet was created from, if any.
  | **exclude** (optional) -- a comma-separated list of elements to <i>not include</i> in the response.<br/><ul><li>**nonexistentCells**: excludes cells that have never contained any data</li><li>**linkInFromCellDetails**: excludes the following attributes from the **cell.linkInFromCell** Object:<ul><li>status</li><li>rowId</li><li>columnId</li></ul></li><li>**linksOutToCellsDetails**: excludes the following attributes from the **cell.linksOutToCells** array elements:<ul><li>status</li><li>rowId</li><li>columnId</li></ul></li></ul>
  | **rowIds** (optional): a comma-separated list of Row Ids on which to filter the rows included in the result
  | **rowNumbers** (optional): a comma-separated list of Row integers  on which to filter the rows included in the result.  Non-existent row integers are ignored.
  | **columnIds** (optional): a comma-separated list of Column Ids. The response contains only the specified columns in the "columns" array, and individual rows' "cells" array only contains cells in the specified columns.
  | **pageSize** (optional): integer of rows per page to include with the sheet.  If neither **pageSize** or **page** are specified, returns all rows in the sheet.  If only page is specified, defaults to a page size of 100.
  | **page** (optional): which page integer (1-based) to return.  If not specified, the default value is 1.  If a page integer is specified that is greater than the integer of total pages, the last page is returned.
<%= RETURNS %> | Sheet Object, populated according to the specified parameters

## Get Sheet as Excel / PDF / CSV

> Example Request: Get Sheet as Excel
> Example Response:
> Example Request: Get Sheet as PDF
> Example Response:
> Example Request: Get Sheet as CSV
> Example Response:
`GET /sheets/{sheetId}`

Gets the Sheet in the format specified, based on the Sheet Id.

<aside class="notice">Note:<ul><li>For Excel format, only .xlsx output format is supported at this time.</li><li>Gantt chart is not generated at this time.</li></ul></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
 | **Accept** -- must be set to one of the following values:<ul><li>application/pdf</li><li>application/vnd.ms-excel</li><li>text/csv</li></ul>
<%= PARAMETERS %> | **paperSize** (optional) -- applies to PDF only, must be one of:<ul><li>LETTER (default)</li><li>LEGAL</li><li>WIDE (same as 11x17)</li><li>ARCHD</li><li>A4</li><li>A3</li><li>A2</li><li>A1</li><li>A0</li></ul>
<%= RETURNS %> | The file in either Excel, PDF, or CSV format.

## List Org Sheets

<%= partial "snippets/listAllOrgSheets.md.erb" %>

## List Sheets

> Example Request: List Sheets
> Example Response:
`GET /sheets`

Gets the list of all Sheets that the User has access to, in alphabetical order, by name.

<aside class="notice"><%= SUPPORTS_NUMERICDATES %></aside>

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **include** (optional) -- a comma-separated list of optional elements to include in the response:<ul><li>ownerInfo - owner's email address and user Id for each sheet</li><li>source - the source for any sheet that was created from another sheet or template</li></ul>
 | <%= PARAMETER_MODIFIEDSINCE %>
 | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | IndexResult Object containing an array of Sheet Objects limited to the following attributes:<ul><li>id</li><li>name</li><li>accessLevel</li><li>permalink</li><li>source (included only if "source" is specified with the **include** parameter)</li><li>owner (included only if "ownerInfo" is specified with the **include** parameter)</li><li>ownerId (included only if "ownerInfo" is specified with the **include** parameter)</li><li>createdAt</li><li>modifiedAt</li></ul>

## Move Sheet

> Example Request: Move Sheet
> Example Response:
`POST /sheets/{sheetId}/move`

Moves the specified Sheet to a new location.

<aside class="notice">When a Sheet that is shared to one or more users and/or groups is moved into or out of a workspace, those <i>sheet-level</i> shares are preserved.</aside>

     |     |
-----|-----|
<%= SCOPE %> | CREATE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | ContainerDestination Object, limited to the following required attributes:<ul><li>destinationType</li><li>destinationId</li></ul>
<%= RETURNS %> | Result Object containing a Sheet Object for the moved Sheet, limited to the following attributes:<ul><li>id</li><li>name</li><li>accessLevel</li><li>permalink</li></ul>

## Publish Sheet

### Get Sheet Publish Status

> Example Request: Get Sheet Publish Status
> Example Response:
`GET /sheets/{sheetId}/publish`

Gets the Sheet's 'Publish' settings.

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | SheetPublish Object

### Set Sheet Publish Status

> Example Request: Set Sheet Publish Status
> Example Response:
`PUT /sheets/{sheetId}/publish`

Sets the publish status of the Sheet and returns the new status, including the URLs of any enabled publishings.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | SheetPublish Object limited to the following attributes:<ul><li>readOnlyLiteEnabled (required)</li><li>readOnlyFullEnabled (required)</li><li>readOnlyFullAccessibleBy (optional) - set to either "ALL" or "ORG", when <b>readOnlyFullEnabled</b>=true</li><li>readWriteEnabled (required)</li><li>readWriteAccessibleBy (optional) - set to either "ALL" or "ORG", when <b>readWriteEnabled</b>=true</li><li>icalEnabled (required)</li></ul>To enable one or more of the Publish Options for the Sheet (for example, to publish the Sheet), set the corresponding "Enabled" attributes to `true`. To disable one or more of the Publish Options for the Sheet (for example, to unpublish the Sheet), set the corresponding "Enabled" attributes to `false`.
<%= RETURNS %> | Result Object containing a SheetPublish Object

<aside class="notice">If <b>readOnlyFullEnabled</b> is set to <code>true</code> in the request, but <b>readOnlyFullAccessibleBy</b> is not specified, the value of <b>readOnlyFullAccessibleBy</b> defaults to the organization-level 'Sheet Publishing' setting (if the Sheet owner belongs to an organization) or to "ALL" (if the Sheet owner does not belong to an organization).</aside>

<aside class="notice">If <b>readWriteEnabled</b> is set to <code>true</code> in the request but <b>readWriteAccessibleBy</b> is not specified, the value of <b>readWriteAccessibleBy</b> defaults to the organization-level 'Sheet Publishing' setting (if the Sheet owner belongs to an organization) or to "ALL" (if the Sheet owner does not belong to an organization).</aside>

## Search Sheet

<%= partial "snippets/searchSheet.md.erb" %>

## Send Sheet via Email

<%= partial "snippets/sendSheet.md.erb" %>

## Send Update Request

<%= partial "snippets/createUpdateRequest.md.erb" %>

## Share Sheet

For details about Sheet sharing, see Sheet Sharing.
## Update Sheet

> Example Request: Update Sheet
> Example Response:
`PUT /sheets/{sheetId}`

Updates the Sheet specified in the URL.

To modify Sheet contents, see Add Rows, Update Rows, Add Columns, and Update Column.

This operation can be used to update an individual user's sheet settings.  If the request body contains only the **userSettings** attribute, this operation may be performed even if the user
only has read-only access to the sheet (for example, the user has viewer permissions or the sheet is read-only).

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | Sheet Object limited to the following attributes:<ul><li>name (optional)</li><li>userSettings (optional): SheetUserSettings Object for updating these user's settings for the sheet</li><li>projectSettings (optional): ProjectSettings Object, containing at least one of the projectSettings attributes, for updating this sheet's project settings and dependencies.</li></ul>Note the following:<ul><li>Attributes not specified in projectSettings are not updated.</li><li>If projectSettings.nonWorkingDays is specified as an empty array, all non-working days are removed from the project sheet.</li></ul>
<%= RETURNS %> | Result Object containing a Sheet Object for the updated Sheet

## <%= RELATED %>

A Sheet is comprised of Columns, Rows, and Cells, and may optionally contain Attachments and/or Discussions.

### Sheet Attachments

For details about working with a Sheet's attachments, see Attachments.

### Sheet Cells

For details about working with a Sheet's cells, see Cells.

For details about working with images in cells, see Cell Images.

### Sheet Columns

For details about working with a Sheet's columns, see Columns.

### Sheet Discussions

There are two ways to get discussion-related information for a Sheet:

Operation | Returns
----------|----------|-----------
Get Sheet<br/>(with **include** parameter value "discussions") | Response does *not* contain the Comments that comprise each Discussion.
List Discussions<br/>(with **include** parameter value "comments") |  Response *does* contain the Comments that comprise each Discussion.

For more information about working with a Sheet's discussions, see Discussions.

### Sheet Rows

For details about working with a Sheet's rows, see Rows.
# Sights

Smartsheet Sights(TM) are a collection of widgets that can contain data from a variety of different data sources (for example, Sheets, Reports, custom data).

## <%= OBJECTS %>

### Sight Object

> Example Sight Object:

```php
/**
 * @var integer Sight Id
 * @Type("integer")
 */
private $id;

/**
 * @var string Sight Name
 * @Type("string")
 */
private $name;

/**
 * @var integer Number of Columns that the Sight contains
 * @Type("integer")
 */
private $columnCount;

/**
 * @var widget[] Array of Widget Objects
 * @Type("widget[]")
 */
private $widgets;

/**
 * @var boolean Indicates whether the User has marked the Sight as a favorite
 * @Type("boolean")
 */
private $favorite;

/**
 * @var string User's permissions on the Sight. Valid values: <ul><li>OWNER</li> <li>ADMIN</li> <li>VIEWER</li></ul>
 * @Type("string")
 */
private $accessLevel;

/**
 * @var string URL that represents a direct link to the Sight in Smartsheet
 * @Type("string")
 */
private $permalink;

/**
 * @var DateTime Time of creation
 * @Type("DateTime")
 */
private $createdAt;

/**
 * @var DateTime Time of last modification
 * @Type("DateTime")
 */
private $modifiedAt;

/**
 * @var Workspace A Workspace Object, limited to only 2 attributes: <ul><li>id</li> <li>name</li></ul> _Note: this attribute is only present if the Sight resides within a Workspace._
 * @Type("Workspace")
 */
private $workspace;
```

### SightPublish Object
```php

/**
 * @var boolean If `true`, a rich version of the Sight is published with the ability to use shortcuts and widget interactions.
 * @Type("boolean")
 */
private $readOnlyFullEnabled;

/**
 * @var string URL for 'Read-Only Full' view of the published Sight.<br/>Only returned in a response if **readOnlyFullEnabled** = true.
 * @Type("string")
 */
private $readOnlyFullUrl;

/**
 * @var string Flag to indicate who can access the 'Read-Only Full' view of the published Sight:<ul><li>If "ALL", it is available to anyone who has the link.</li><li>If "ORG", it is available only to members of the Sight owner's Smartsheet organization.</li></ul>Only returned in a response if **readOnlyFullEnabled** = true.
 * @Type("string")
 */
private $readOnlyFullAccessibleBy;
```

### Widget Object

> Example Widget Object

```php
/**
 * @var integer Widget Id
 * @Type("integer")
 */
private $id;

/**
 * @var string Type of widget
 * @Type("string")
 */
private $type;

/**
 * @var string _(Optional)_ Title of the widget
 * @Type("string")
 */
private $title;

/**
 * @var boolean **True** indicates that the client should display the widget title.  Note that this is independent of the "title" string which may be null or empty.
 * @Type("boolean")
 */
private $showTitle;

/**
 * @var boolean **True** indicates that the client should display the Sheet icon in the widget title
 * @Type("boolean")
 */
private $showTitleIcon;

/**
 * @var string FormatDescriptor
 * @Type("string")
 */
private $titleFormat;

/**
 * @var integer X-coordinate of widget's position on the Sight
 * @Type("integer")
 */
private $xPosition;

/**
 * @var integer Y-coordinate of widget's position on the Sight
 * @Type("integer")
 */
private $yPosition;

/**
 * @var integer Number of Rows that the widget occupies on the Sight
 * @Type("integer")
 */
private $height;

/**
 * @var integer Number of Columns that the widget occupies on the Sight
 * @Type("integer")
 */
private $width;

/**
 * @var int Widget version integer
 * @Type("int")
 */
private $version;

/**
 * @var WidgetContent Data that specifies the contents of the widget. _Note: the type of *WidgetContent* Object (and attributes within) depends on the value of *Widget.type*: <ul><li>CELLLINK - CellLinkWidgetContent</li> <li>SHEETSUMMARY - CellLinkWidgetContent</li> <li>RICHTEXT - RichTextWidgetContent</li> <li>SHORTCUTICON - ShortcutWidgetContent</li> <li>SHORTCUTLIST - ShortcutWidgetContent </li> <li>GRIDGANTT - ReportWidgetContent</li> <li>IMAGE - ImageWidgetContent</li>
 * @Type("WidgetContent")
 */
private $contents;
```

### CellLinkWidgetContent Object
     |     |     |
-----|-----|-----|
hyperlink | hyperlink | The widget has **when clicked** attribute set to that hyperlink (if present and non-null)
cellData | cellData[] | Array of cellDataItem Objects
column | column[] | Array of Column Objects

### RichTextWidgetContent Object
     |     |     |
-----|-----|-----|
html | string | The widget content as HTML </br> </br> The Rich Text widget supports the following subset of HTML tags and CSS Styles: </br></br> <b>HTML</b><ul><li>a</li> <li>br</li> <li>li</li> <li>ol</li> <li>p</li> <li>ul</li> <li>span</li></ul> <b>CSS</b><ul><li>color</li> <li>font-family</li> <li>font-size</li> <li>font-style</li> <li>font-weight</li> <li>text-align</li> <li>text-decoration</li></ul>

### ShortcutWidgetContent Object
     |     |     |
-----|-----|-----|
shortcutData | shortcutData[] | An array of ShortcutDataItem Objects
### ReportWidgetContent Object
     |     |     |
-----|-----|-----|
htmlContent | string | HTML snippet to render Report
### ImageWidgetContent Object
```php

/**
 * @var string The image private Id
 * @Type("string")
 */
private $privateId;

/**
 * @var integer Original height of the image in pixels
 * @Type("integer")
 */
private $height;

/**
 * @var integer Original width of the image in pixels
 * @Type("integer")
 */
private $width;

/**
 * @var string Name of the image file
 * @Type("string")
 */
private $fileName;

/**
 * @var string formatDescriptor
 * @Type("string")
 */
private $format;
```

### CellDataItem Object
```php

/**
 * @var string Label for the data point. This is either the column name or a user-provided string
 * @Type("string")
 */
private $label;

/**
 * @var string formatDescriptor
 * @Type("string")
 */
private $labelFormat;

/**
 * @var A **string**, **integer**, or a **boolean** value The type of data returned depends on the cell type and the data in the cell
 * @Type("A **string**, **integer**, or a **boolean** value")
 */
private $objectValue;

/**
 * @var cell Cell Object
 * @Type("cell")
 */
private $cell;

/**
 * @var string formatDescriptor
 * @Type("string")
 */
private $valueFormat;

/**
 * @var integer The display order for the CellDataItem
 * @Type("integer")
 */
private $order;

/**
 * @var integer Column Id for the cell
 * @Type("integer")
 */
private $columnId;
```

### ShortcutDataItem Object
```php

/**
 * @var string Label for the data point
 * @Type("string")
 */
private $label;

/**
 * @var string formatDescriptor
 * @Type("string")
 */
private $labelFormat;

/**
 * @var string Attachment type (one of FILE, GOOGLE_DRIVE, LINK, BOX_COM, DROPBOX, EVERNOTE, or EGNYTE)
 * @Type("string")
 */
private $mimeType;

/**
 * @var hyperlink Hyperlink Object
 * @Type("hyperlink")
 */
private $hyperlink;

/**
 * @var integer The display order for the ShortcutWidgetItem
 * @Type("integer")
 */
private $order;
```

## Copy Sight

> Example Request: Copy Sight
> Example Response:
`POST /sights/{sightId}/copy`

Creates a copy of the specified Sight.

     |     |
-----|-----|
<%= SCOPE %> | CREATE_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | ContainerDestination Object
<%= RETURNS %> | Result Object containing a Sight for the newly created Sight, limited to the following attributes:<ul><li>id</li><li>name</li><li>accessLevel</li><li>permalink</li></ul>
## Delete Sight

> Example Request: Delete Sight
> Example Response:
`DELETE /sights/{sightId}`

Deletes the Sight specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | DELETE_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | Result Object

## Get Sight

> Example Request: Get Sight
> Example Response:
`GET /sights/{sightId}`

Gets the specified Sight.
     |     |
-----|-----|
<%= SCOPE %> | READ_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | Sight Object

## List Sights

> Example Request: List Sights
> Example Response:
`GET /sights`

Gets the list of all Sights that the User has access to.

<aside class="notice"><%= SUPPORTS_NUMERICDATES %></aside>

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PARAMETER_MODIFIEDSINCE %>
 | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | IndexResult Object containing an array of Sight Objects limited to the following attributes:<ul><li>id</li><li>name</li><li>accessLevel</li><li>permalink</li><li>createdAt</li><li>modifiedAt</li></ul>

## Move Sight

> Example Request: Move Sight
> Example Response:
`POST /sights/{sightId}/move`

Moves the specified Sight to a new location.

<aside class="notice">When a Sight that is shared to one or more users and/or groups is moved into or out of a workspace, those <i>Sight-level</i> shares are preserved.</aside>

     |     |
-----|-----|
<%= SCOPE %> | CREATE_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | ContainerDestination Object, limited to the following required attributes:<ul><li>destinationType</li><li>destinationId</li></ul>
<%= RETURNS %> | Result Object containing a Sight Object for the moved Sight, limited to the following attributes:<ul><li>id</li><li>name</li><li>accessLevel</li><li>permalink</li></ul>

## Publish Sight

### Get Sight Publish Status

> Example Request: Get Sight Publish Status
> Example Response:
`GET /sights/{sightId}/publish`

Gets the Sight 'Publish' settings.

     |     |
-----|-----|
<%= SCOPE %> | READ_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | SightPublish Object

### Set Sight Publish Status

> Example Request: Set Sight Publish Status
> Example Response:
`PUT /sights/{sightId}/publish`

Publishes or unpublishes a Sight.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | SightPublish Object limited to the following attributes:<ul><li>**readOnlyFullEnabled** (required)</li><li>**readOnlyFullAccessibleBy** (optional) - set to either "ALL" or "ORG", when **readOnlyFullEnabled**=true.</li></ul>To publish the Sight, set **readOnlyFullEnabled** to `true`. To unpublish the Sight, set **readOnlyFullEnabled** to `false`.
<%= RETURNS %> | Result Object containing a SightPublish Object

<aside class="notice">If <b>readOnlyFullEnabled</b> is set to <code>true</code> in the request, but <b>readOnlyFullAccessibleBy</b> is not specified, the value of <b>readOnlyFullAccessibleBy</b> defaults to the organization-level 'Sight Publishing' setting (if the Sight owner belongs to an organization) or to "ALL" (if the Sight owner does not belong to an organization).</aside>

## Share Sight

For details about Sight sharing, see Sight Sharing.

## Update Sight

> Example Request: Update Sight
> Example Response:
`PUT /sights/{sightId}`

Updates (renames) the specified Sight.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_SIGHTS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | Sight Object limited to the following attribute:<ul><li>name (string)</li></ul>
<%= RETURNS %> | Result Object containing the updated Sight Object

# Templates

A Template can be used to create a Sheet, as described in Create Sheet from Template.

## <%= OBJECTS %>

### Template Object

> Example Template Object:

```php
/**
 * @var integer Template Id
 * @Type("integer")
 */
private $id;

/**
 * @var string Template name
 * @Type("string")
 */
private $name;

/**
 * @var string Template description
 * @Type("string")
 */
private $description;

/**
 * @var string User's permissions on the Template
 * @Type("string")
 */
private $accessLevel;

/**
 * @var string URL to the small preview image for this template<br/>*Only applicable to non-blank public templates*
 * @Type("string")
 */
private $image;

/**
 * @var string URL to the large preview image for this template<br/>*Only applicable to non-blank public templates*
 * @Type("string")
 */
private $largeImage;

/**
 * @var string Locale of the template<br/>*Only applicable to public templates*
 * @Type("string")
 */
private $locale;

/**
 * @var string Type of the template. One of "sheet" or "report"<br/>*Only applicable to public templates*
 * @Type("string")
 */
private $type;

/**
 * @var string[] List of search tags for this template<br/>*Only applicable to non-blank public templates*
 * @Type("string[]")
 */
private $tags;

/**
 * @var string[] List of categories this template belongs to<br/>*Only applicable to public templates*
 * @Type("string[]")
 */
private $categories;

/**
 * @var boolean Flag indicating whether the template is blank<br/>*Only applicable to public templates*
 * @Type("boolean")
 */
private $blank;

/**
 * @var string Type of global template. One of: "BLANK_SHEET", "TASK_LIST", or "PROJECT_SHEET"<br/>*Only applicable to blank public templates*
 * @Type("string")
 */
private $globalTemplate;
```

## List Public Templates

> Example Request: List Public Templates
> Example Response:

<%= partial "snippets/listTemplates_response.md.erb" %>

`GET /templates/public`

Gets the list of public Templates to which the user has access.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

<%= partial "snippets/listTemplates_table.md.erb" %>

## List User-created Templates

> Example Request: List User-created Templates
> Example Response:

<%= partial "snippets/listTemplates_response.md.erb" %>

`GET /templates`

Gets the list of user-created Templates to which the user has access.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

<%= partial "snippets/listTemplates_table.md.erb" %>

# Token

The Smartsheet API utilizes OAuth 2.0 for Authentication and Authorization. An **Authorization** HTTP header containing an Access Token is required to authenticate requests.  For more information, see Authentication.

## Get Access Token

> Example Request: Get Access Token
> Example Response:
`POST /token`

Gets an access token, as part of the OAuth process. For more information, see OAuth Flow.

     |     |
-----|-----|
<%= PARAMETERS %> | **grant_type** (required) -- must be set to "authorization_code"
 | **client_id** (required) -- client id for your app
 | **code** (required) -- authorization code returned in the previous step
 | **redirect_uri** (optional) -- redirect URL registered for your app, including the protocol (for example, "http://"); if not provided, the redirect URL set during registration is used.
 | **hash** (required) -- SHA-256 hash of your app secret concatenated with a pipe and the authorization code.  The app_secret is never sent with the request.

## Refresh Access Token

> Example Request: Refresh Access Token
> Example Response:
`POST /token`

Refreshes an access token, as part of the OAuth process. For more information, see OAuth Flow.

     |     |
-----|-----|
<%= PARAMETERS %> | **grant_type** (required) -- must be set to "refresh_token"
 | **client_id** (required) -- client id for your app
 | **refresh_token** (required) -- refresh_token value that came with the access token
 | **redirect_uri** (optional) -- redirect URL registered for your app, including the protocol (for example, "http://")
 | **hash** (required) -- SHA-256 hash of your app secret concatenated with a pipe and the refresh token value

## Revoke Access Token

> Example Request: Revoke Access Token
> Example Response:
`DELETE /token`

Revokes the access token used to make this request.  The access token is no longer valid, and subsequent API calls made using the token fail.

     |     |
-----|-----|
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | Result Object

# Update Requests

## <%= OBJECTS %>

<%= partial "snippets/updateRequest_object.md.erb" %>

<%= partial "snippets/sentUpdateRequest_object.md.erb" %>

<%= partial "snippets/schedule_object.md.erb" %>

## Create Update Request

<%= partial "snippets/createUpdateRequest.md.erb" %>

## Delete Update Request

<%= partial "snippets/deleteUpdateRequest.md.erb" %>

## Get Update Request

<%= partial "snippets/getUpdateRequest.md.erb" %>

## Get All Update Requests

<%= partial "snippets/listUpdateRequests.md.erb" %>

## Change Update Request

<%= partial "snippets/changeUpdateRequest.md.erb" %>

## Delete Sent Update Request

<%= partial "snippets/deleteSentUpdateRequest.md.erb" %>

## Get Sent Update Request

<%= partial "snippets/getSentUpdateRequest.md.erb" %>

## Get All Sent Update Requests

<%= partial "snippets/listSentUpdateRequests.md.erb" %>

# Users

## <%= OBJECTS %>

### User Object

> Example User Object:

```php
/**
 * @var integer User Id
 * @Type("integer")
 */
private $id;

/**
 * @var string User's primary email address
 * @Type("string")
 */
private $email;

/**
 * @var string User's full name (read-only)
 * @Type("string")
 */
private $name;

/**
 * @var string User's first name
 * @Type("string")
 */
private $firstName;

/**
 * @var string User's last name
 * @Type("string")
 */
private $lastName;

/**
 * @var boolean Flag indicating whether the user is a system admin (can manage users and account)
 * @Type("boolean")
 */
private $admin;

/**
 * @var boolean Flag indicating whether the user is a licensed user (can create and own sheets)
 * @Type("boolean")
 */
private $licensedSheetCreator;

/**
 * @var boolean Flag indicating whether the user is a group admin (can create and edit groups)
 * @Type("boolean")
 */
private $groupAdmin;

/**
 * @var boolean Flag indicating whether the user is a resource viewer (can access resource views)
 * @Type("boolean")
 */
private $resourceViewer;

/**
 * @var string  User status, set to one of the following values:<ul><li>ACTIVE</li><li>PENDING</li><li>DECLINED</li></ul>
 * @Type("string")
 */
private $status;

/**
 * @var AlternateEmail[] An array of AlternateEmail Objects representing the alternate email addresses associated with the User account
 * @Type("AlternateEmail[]")
 */
private $alternateEmails;

/**
 * @var integer The integer of sheets owned by the current user within the organization
 * @Type("integer")
 */
private $sheetCount;

/**
 * @var DateTime Last login time of the current user
 * @Type("DateTime")
 */
private $lastLogin;

/**
 * @var DateTime Timestamp of viewing an Enterprise [Custom Welcome Screen](<%= CUSTOM_WELCOME_SCREEN_URL %>) by the current user
 * @Type("DateTime")
 */
private $customWelcomeScreenViewed;
```

### UserProfile Object
```php

/**
 * @var integer Current user's Id
 * @Type("integer")
 */
private $id;

/**
 * @var string Current user's primary email address
 * @Type("string")
 */
private $email;

/**
 * @var string Current user's first name
 * @Type("string")
 */
private $firstName;

/**
 * @var string Current user's last name
 * @Type("string")
 */
private $lastName;

/**
 * @var string Current user's time zone Id
 * @Type("string")
 */
private $timeZone;

/**
 * @var string Current user's locale (see Server Information)
 * @Type("string")
 */
private $locale;

/**
 * @var Account Account Object representing the current user's customer account
 * @Type("Account")
 */
private $account;

/**
 * @var boolean Flag indicating whether the user is a system admin (can manage users and account)
 * @Type("boolean")
 */
private $admin;

/**
 * @var boolean Flag indicating whether the user is a licensed user (can create and own sheets)
 * @Type("boolean")
 */
private $licensedSheetCreator;

/**
 * @var boolean Flag indicating whether the user is a group admin (can create and edit groups)
 * @Type("boolean")
 */
private $groupAdmin;

/**
 * @var boolean Flag indicating whether the user is a resource viewer (can access resource views)
 * @Type("boolean")
 */
private $resourceViewer;

/**
 * @var string User status, set to one of the following values: <ul><li>ACTIVE</li><li>PENDING</li><li>DECLINED</li></ul>
 * @Type("string")
 */
private $status;

/**
 * @var AlternateEmail[] An array of AlternateEmail Objects representing the alternate email addresses associated with the User account
 * @Type("AlternateEmail[]")
 */
private $alternateEmails;

/**
 * @var integer The integer of sheets owned by the current user within the organization
 * @Type("integer")
 */
private $sheetCount;

/**
 * @var DateTime Last login time of the current user
 * @Type("DateTime")
 */
private $lastLogin;

/**
 * @var DateTime Timestamp of viewing an Enterprise [Custom Welcome Screen](<%= CUSTOM_WELCOME_SCREEN_URL %>) by the current user
 * @Type("DateTime")
 */
private $customWelcomeScreenViewed;
```

### Account Object
```php

/**
 * @var string Account name
 * @Type("string")
 */
private $name;

/**
 * @var integer Account Id
 * @Type("integer")
 */
private $id;
```

### AlternateEmail Object
```php

/**
 * @var integer AlternateEmail Id
 * @Type("integer")
 */
private $id;

/**
 * @var string User's alternate email address
 * @Type("string")
 */
private $email;

/**
 * @var boolean Flag indicating whether the alternate email address has been confirmed
 * @Type("boolean")
 */
private $confirmed;
```

## Add User

> Example Request: Add User
> Example Response:
`POST /users`

Adds a User to the organization.

<aside class="notice">This operation is only available to system administrators.</aside>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_USERS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= PARAMETERS %> | **sendEmail** (optional): A boolean flag indicating whether or not to send a welcome email. Defaults to **false**.
<%= REQUEST %> | User Object with the following attributes:<ul><li>email (required)</li><li>admin (required)</li><li>licensedSheetCreator (required)</li><li>firstName (optional)</li><li>lastName (optional)</li><li>resourceViewer (optional)</li></ul>
<%= RETURNS %> | Result Object containing the newly created User Object.
<%= ERRORS %>  | If an error occurs because the request specified the *alternate* email address (that is, not the primary email address) of an existing Smartsheet User (to invite the user into the Org), the Error Object returned contains a **detail** attribute set to an array of objects, each object in the array having the following attributes:<ul><li>**alternateEmailAddress**: User's *alternate* email address that was specified in the request</li><li>**primaryEmailAddress**: User's primary email address that must instead be specified for the operation</li></ul>For example:<br/>{<br/>&#160;&#160;"errorCode": 5xxx,<br/>&#160;&#160;"message": "The specified email address (u1+1@smartsheet.com) is an alternate address for a user with the primary email address of u1@smartsheet.com. Please retry using their primary address."<br/>&#160;&#160;"detail": [<br/>&#160;&#160;&#160;&#160;&#160;&#160;{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"alternateEmailAddress": "u1+1@smartsheet.com",<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"primaryEmailAddress": "u1@smartsheet.com"<br/>&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;]<br/>}

<aside class="notice">If successful, and user auto provisioning (UAP) is on, and user matches the auto provisioning rules, user is added to the org.  If UAP is off, or user does not match UAP rules, user is invited to the org and must explicitly accept the invitation to join.</aside>

<aside class="notice">In some specific scenarios, supplied attributes such as <b>firstName</b> and <b>lastName</b> may be ignored.  For example, if you are inviting an existing Smartsheet user to join your organization, and the invited user has not yet accepted your invitation, any supplied <b>firstName</b> and <b>lastName</b> are ignored.</aside>

## Alternate Email Addresses

A User in Smartsheet must have a *primary* email address associated with their account (**User.email**) and may optionally have one or more *alternate* email addresses associated with their account (**User.alternateEmails**).

<aside class="notice">The following operations must be performed using an User's <i>primary</i> email address:<ul><li><a href="#add-group-members">Add Group Members</a></li><li><a href="#add-user">Add User</a></li><li><a href="#create-update-request">Create Update Request</a></li><li><a href="#report-sharing">Share Report</a></li><li><a href="#share-sheet">Share Sheet</a></li><li><a href="#workspace-sharing">Share Workspace</a></li></ul>Attempting to specify a User's <i>alternate</i> email address for any of the above operations results in an error.</aside>

### Add Alternate Emails

> Example Request: Add Alternate Emails
> Example Response:
`POST /users/{userId}/alternateemails`

Adds one or more alternate email addresses for the specified User.

<aside class="notice">This operation is only available to system administrators.</aside>

<aside class="notice">If the API request is submitted by a system administrator of an Enterprise account and the alternate email address <a href="<%= USER_AUTO_PROVISIONING_URL %>">domain is validated</a>, the added email address is automatically confirmed.</aside>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_USERS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | Array of AlternateEmail Objects, each limited to only the **email** attribute
<%= RETURNS %> | Result Object containing an array of the newly created AlternateEmail Objects.
<%= ERRORS %>  | If a single email address is specified in the request and an error occurs, the response contains the typical Error Object.<br/><br/>If multiple email addresses are specified in the request and an error occurs, the Error Object returned contains a **detail** attribute set to an array of objects, each object in the array having the following attributes:<ul><li>**email**: Problematic email address specified in the request</li><li>**errorCode**: Smartsheet error code</li><li>**message**: Message that describes the problem with the specified email address</li></ul>For example:<br/>{<br/>&#160;&#160;"errorCode": 1160,<br/>&#160;&#160;"message": "Invalid bulk request. See detail for more information."<br/>&#160;&#160;"detail": [<br/>&#160;&#160;&#160;&#160;&#160;&#160;{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"email": "altEmail1@smartsheet.com",<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"errorCode": 1157,<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"message": "This address is already associated with another Smartsheet account, so it cannot be added as an alternate address for this account."<br/>&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;]<br/>}

### Make Alternate Email Primary

> Example Request: Make Alternate Email Primary
> Example Response:
`POST /users/{userId}/alternateemails/{alternateEmailId}/makeprimary`

Makes the specified alternate email address to become the primary email address for the specified user.

<aside class="notice">This operation is only available to system administrators of an Enterprise account. <a href="https://www.smartsheet.com/enterprise/scale">Learn more</a> about the Enterprise platform.</aside>

<aside class="notice">The alternate email address can only be made primary if both conditions are met:<ul><li>The primary email address <a href="<%= USER_AUTO_PROVISIONING_URL %>">domain is validated</a></li><li>The alternate email address is confirmed <b>OR</b> the alternate email address <a href="<%= USER_AUTO_PROVISIONING_URL %>">domain is validated</a></li></ul></aside>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_USERS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= RETURNS %> | Result Object containing the AlternateEmail Object that is now the primary email address
<%= ERRORS %> | If an error occurs because the special permission is not granted to change primary email address, contact Smartsheet (<a href="mailto:api@smartsheet.com">api@smartsheet.com</a>) for assistance to enable this feature.<br/><br/>If an error occurs because the specified user has a personal email address as the primary email address (that is. the email address domain cannot be [validated](<%= USER_AUTO_PROVISIONING_URL %>), the specified user needs to manually change the primary email address in the [Personal Settings](<%= PERSONAL_SETTINGS_MANAGE_EMAIL_URL %>).

### Delete Alternate Email

> Example Request: Delete Alternate Email
> Example Response:
`DELETE /users/{userId}/alternateemails/{alternateEmailId}`

Deletes the specified alternate email address for the specified user.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_USERS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | Result Object

### Get Alternate Email

> Example Request: Get Alternate Email
> Example Response:
`GET /users/{userId}/alternateemails/{alternateEmailId}`

Gets the specified Alternate Email.

     |     |
-----|-----|
<%= SCOPE %> | READ_USERS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | AlternateEmail Object<br/><br/>

### List Alternate Emails

> Example Request: List Alternate Emails
> Example Response:
`GET /users/{userId}/alternateemails`

Gets a list of the Alternate Emails for the specified User.

     |     |
-----|-----|
<%= SCOPE %> | READ_USERS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | IndexResult Object containing an array of AlternateEmail Objects<br/><br/>

## Get Current User

> Example Request: Get Current User
> Example Response:
`GET /users/me`

Gets the current User.

     |     |
-----|-----|
<%= SCOPE %> | all scopes
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | UserProfile Object<br/><br/><b>Note</b>: For system administrators, the following UserProfile attributes are included in the response):<ul><li>lastLogin (only returned if the user has logged in)</li><li>sheetCount (only returned if the status attribute is ACTIVE)</li><li>customWelcomeScreenViewed (only returned when an Enterprise user has viewed the [Custom Welcome Screen](<%= CUSTOM_WELCOME_SCREEN_URL %>))</li></ul>

## Get User

> Example Request: Get User
> Example Response:
`GET /users/{userId}`

Gets the User specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | READ_USERS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | UserProfile Object<br/><br/><b>Note</b>: For system administrators, the following UserProfile attributes are included in the response):<ul><li>status</li><li>admin</li><li>licensedSheetCreator</li><li>groupAdmin</li><li>resourceViewer</li><li>lastLogin (only returned if the user has logged in)</li><li>sheetCount (only returned if the status attribute is ACTIVE)</li><li>customWelcomeScreenViewed (only returned when an Enterprise user has viewed the [Custom Welcome Screen](<%= CUSTOM_WELCOME_SCREEN_URL %>))</li></ul>

## Get All Org Sheets

<%= partial "snippets/listAllOrgSheets.md.erb" %>

## List Users

> Example Request: List Users
> Example Response:
`GET /users`

Gets the list of Users in the organization. To filter by email, use the optional **email** query string parameter to specify a list of users' email addresses.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_USERS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **email** (optional): Comma-separated list of email addresses on which to filter the results.
 | **include** (optional): When specified with a value of "lastLogin", response includes the **lastLogin** attribute for each user if:<br/><ul><li>the request is submitted by a system administrator, and</li><li>the returned IndexResult object that contains a maximum of 100 User Objects.</li></ul>
 | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | IndexResult Object containing an array of User Objects<br/><br/><b>Note</b>: If the API request is submitted by a system administrator, the following User attributes are included in the response (else, they are omitted from the response):<ul><li>status</li><li>admin</li><li>licensedSheetCreator</li><li>groupAdmin</li><li>resourceViewer</li><li>lastLogin (omitted if the user has never logged in before)</li><li>sheetCount (omitted if the status attribute is not ACTIVE)</li></ul><br/><b>Note</b>: If the API request is submitted by a system administrator of an Enterprise account, and [Custom Welcome Screen](<%= CUSTOM_WELCOME_SCREEN_URL %>) is enabled, the following User attributes are included in the response (else, they are omitted from the response):<ul><li>customWelcomeScreenViewed (omitted if the user has never viewed the Custom Welcome Screen)</li></ul>
## Remove User

> Example Request: Remove User
> Example Response:
`DELETE /users/{userId}`

Removes a User from an organization. User is transitioned to a free collaborator with read-only access to owned sheets (unless those are optionally transferred to another user).

<aside class="notice">This operation is only available to system administrators.</aside>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_USERS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **transferTo** (required if user owns groups): The Id of the user to transfer ownership to.  If the user being removed owns groups, they are transferred to this user.  If the user owns sheets, *and* **transferSheets** is true, the removed user's sheets are transferred to this user.
  | **transferSheets** (optional): If `true`, and **transferTo** is specified, the removed user's sheets are transferred.  Else, sheets are not transferred.  Defaults to `false`.
  | **removeFromSharing** (optional): Set to `true` to remove the user from sharing for all sheets/workspaces in the organization. If not specified, User is not removed from sharing.
<%= RETURNS %> | Result Object

<aside class="notice">If the <b>transferTo</b> parameter is specified and the removed user owns Groups, the user specified via the <b>transferTo</b> parameter must have Group Admin rights.</aside>

<aside class="notice">The <b>transferTo</b> and <b>transferSheets</b> parameters cannot be specified for a user who has not yet accepted an invitation to join the organization (that is, if user <b>status</b> = "PENDING").</aside>

## Update User

> Example Request: Update User
> Example Response:
`PUT /users/{userId}`

Updates the User specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_USERS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | User Object containing at least one of the following attributes:<ul><li>admin (required)</li><li>licensedSheetCreator (required)</li><li>firstName (optional)</li><li>lastName (optional)</li><li>resourceViewer (optional)</li></ul>
<%= RETURNS %> | Result Object containing the User Object for the updated User

# Workspaces

## <%= OBJECTS %>

### Workspace Object

> Example Workspace Object:

```php
/**
 * @var integer Workspace Id
 * @Type("integer")
 */
private $id;

/**
 * @var string Workspace name
 * @Type("string")
 */
private $name;

/**
 * @var boolean Returned only if the user has marked the Workspace as a Favorite in their Home tab (value = 'true')
 * @Type("boolean")
 */
private $favorite;

/**
 * @var string User's permissions on the Workspace
 * @Type("string")
 */
private $accessLevel;

/**
 * @var string URL that represents a direct link to the Workspace in Smartsheet
 * @Type("string")
 */
private $permalink;

/**
 * @var Sheet[] Array of Sheet Objects
 * @Type("Sheet[]")
 */
private $sheets;

/**
 * @var Folder[] Array of Folder Objects
 * @Type("Folder[]")
 */
private $folders;

/**
 * @var Report[] Array of Report Objects
 * @Type("Report[]")
 */
private $reports;

/**
 * @var Template[] Array of Template Objects
 * @Type("Template[]")
 */
private $templates;
```

## Copy Workspace

> Example Request: Copy Workspace
> Example Response:
`POST /workspaces/{workspaceId}/copy`

Creates a copy of the specified Workspace.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WORKSPACES
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= PARAMETERS %> | **include** (optional) -- a comma-separated list of optional elements to copy:<ul><li>data</li><li>attachments</li><li>discussions</li><li>cellLinks</li><li>forms</li><li>brand</li><li>shares</li><li>**all** - specify a value of "all" to include everything (data, attachments, discussions, cellLinks, forms, brand, and shares)</li></ul><i>Note</i>: Cell history is not copied, regardless of which **include** parameter values are specified.
 | **skipRemap** (optional) --  -- comma-separated list of references to NOT re-map for the newly created workspace:<ul><li>cellLinks</li><li>reports</li><li>sheetHyperlinks</li><li>Sights</li></ul>By default, all cell links, reports, sheet hyperlinks, and Sights that reference objects in the source workspace are re-mapped to reference corresponding objects in the newly created workspace. The **skipRemap** parameter can be specified to change that default behavior:<ul><li>If "cellLinks" is specified in the <b>skipRemap</b> parameter value, the cell links within the newly created workspace continue to point to the original source sheets.</li><li>If "reports" is specified in the <b>skipRemap</b> parameter value, the reports within the newly created workspace continue to point to the original source sheets.</li><li>If "sheetHyperlinks" is specified in the <b>skipRemap</b> parameter value, the sheet hyperlinks within the newly created workspace continue to point to the original source sheets.</li><li>If "Sights" is specified in the <b>skipRemap</b> parameter value, the widgets within Sights in the newly created workspace continue to point to the original source sheets / reports.</li></ul>
<%= REQUEST %> | ContainerDestination Object, limited to the following attribute:<ul><li>newName (string) - required</li></ul>
<%= RETURNS %> | Result Object containing a Workspace Object for the newly created Workspace

## Create Workspace

> Example Request: Create Workspace
> Example Response:
`POST /workspaces`

Creates a Workspace.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WORKSPACES
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | Workspace Object, limited to the following attribute:<ul><li>name (string) - required</li></ul>
<%= RETURNS %> | Result Object containing a Workspace Object for the newly created Workspace
## Delete Workspace

> Example Request: Delete Workspace
> Example Response:
`DELETE /workspaces/{workspaceId}`

Deletes the specified Workspace (and its contents).

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WORKSPACES
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | Result Object

## Get Workspace

> Example Request: Get Workspace
> Example Response:
`GET /workspaces/{workspaceid}`

Gets the specified Workspace (and lists its contents).

<aside class="notice">By default, this operation only returns the top-level items in the Workspace. To load all of the contents, including nested Folders, include the <b>loadAll</b> query string parameter with a value of <b>true</b>.</aside>

<aside class="notice">If no Folders, Sheets, Reports, Templates, or Sights are present in the Workspace, the corresponding attribute (for example, "folders", "sheets") is not present in the response.</aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | **loadAll** (optional) -- **true** or **false** (defaults to **false**)
	| **include** (optional) -- a comma-separated list of optional elements to include in the response:<ul><li>ownerInfo - owner's email address and user Id for each sheet</li><li>source - the source for any sheet that was created from another sheet or template</li></ul>
<%= RETURNS %> | Workspace Object, populated according to the **include** parameter

## List Workspaces

> Example Request: List Workspaces
> Example Response:
`GET /workspaces`

Gets the list of Workspaces to which the user has access.

<aside class="notice"><%= SUPPORTS_PAGING %></aside>

     |     |
-----|-----|
<%= SCOPE %> | READ_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= PARAMETERS %> | <%= PAGING_PARAMETERS %>
<%= RETURNS %> | IndexResult Object containing an array of Workspace Objects

## Share Workspace

For details about Workspace sharing, see Workspace Sharing.

## Update Workspace

> Example Request: Update Workspace
> Example Response:
`PUT /workspaces/{workspaceId}`

Updates the Workspace specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WORKSPACES
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | Workspace Object limited to the following attribute:<ul><li>name (string)</li></ul>
<%= RETURNS %> | Result Object containing the updated Workspace Object

## <%= RELATED %>

### Workspace Folders

For details about working with folders in a Workspace, see Folders.

### Workspace Sheets

For details about working with sheets in a Workspace, see Sheets.</br>

# <span class="customTOCSectionHeading">Additional Reference</span>

# Other Objects

## AutoNumberFormat Object

Object that describes how the the System Column type of "AUTO_NUMBER" is auto-generated.

/**
 * @var string The prefix. Can include the date tokens:<ul><li>{YY}</li><li>{YYYY}</li><li>{MM}</li><li>{DD}</li></ul>
 * @Type("string")
 */
private $prefix;

/**
 * @var string The suffix. Can include the date tokens:<ul><li>{YY}</li><li>{YYYY}</li><li>{MM}</li><li>{DD}</li></ul>
 * @Type("string")
 */
private $suffix;

/**
 * @var string Indicates zero-padding. Must be between 0 and 10 "0" (zero) characters.
 * @Type("string")
 */
private $fill;

/**
 * @var integer The starting integer for the auto-id
 * @Type("integer")
 */
private $startingNumber;
```

## ContainerDestination Object

Object that describes the destination container when a Sheet or Folder is moved, or when a Sheet, Folder, or Workspace is copied.

/**
 * @var string Type of the destination container (when copying or moving a Sheet or a Folder). One of the following values:<ul><li>home</li><li>workspace</li><li>folder</li></ul>
 * @Type("string")
 */
private $destinationType;

/**
 * @var integer Id of the destination container (when copying or moving a Sheet or a Folder). Required if **destinationType** is "folder" or "workspace" If **destinationType** is "home", this value must be null.
 * @Type("integer")
 */
private $destinationId;

/**
 * @var string Name of the newly created object (when creating a copy of a Sheet, Folder, Sight, or Workspace). This attribute is not supported for "move" operations (that is, a moved Sheet, Folder, Sight, or Workspace retains its original name).
 * @Type("string")
 */
private $newName;


## IndexResult Object

Object returned for all `GET` operations against index endpoints.  This object provides metadata which can be used to perform paging on potentially large data sets.  See the Paging section for more information.

<%= partial "snippets/indexResult_object.md.erb" %>

## Result Object

Object returned for all `PUT` operations and `POST` operations (and for some other operations).

/**
 * @var integer 0 (zero) if successful, 3 for partial success of a bulk operation.
 * @Type("integer")
 */
private $resultCode;

/**
 * @var string Message that indicates the outcome of the request. (One of SUCCESS or PARTIAL_SUCCESS)
 * @Type("string")
 */
private $message;

/**
 * @var Object Object that was created or updated (if applicable)
 * @Type("Object")
 */
private $result;

/**
 * @var integer New version of the Sheet.<br/>*Applicable only for operations which update sheet data*
 * @Type("integer")
 */
private $version;

/**
 * @var BulkItemFailure[] Array of BulkItemFailure Objects which represents the items that failed to be added or updated. See Partial Success for more information.<br/>*Applicable only for bulk operations that support partial success*
 * @Type("BulkItemFailure[]")
 */
private $failedItems;
```

## BulkItemFailure Object

Object that contains information about an item that failed to be added or updated as specified by a bulk request.

/**
 * @var integer The index of the failed item in the bulk request array
 * @Type("integer")
 */
private $index;

/**
 * @var Error Object The error caused by the failed item
 * @Type("Error Object")
 */
private $error;

/**
 * @var integer The id of the Row that failed.<br/>*Applicable only to bulk row operations*
 * @Type("integer")
 */
private $rowId;
```

# Complete Error Code List

For an explanation of the logic behind Smartsheet error codes and error handling, see the HTTP and REST portion of the Introduction.

## 400-Level Error Codes

400-level error codes generally indicate that there is something you should fix or add to your request before you try the request again.

HTTP status code | Smartsheet errorCode | Smartsheet message
-----|-----|-----|
401 | 1001 | An Access Token is required.
401 | 1002 | Your Access Token is invalid.
401 | 1003 | Your Access Token has expired.
403 | 1004 | You are not authorized to perform this action.
401 | 1005 | Single Sign-On is required for this account.
404 | 1006 | Not Found.
404 | 1007 | Version not supported.
400 | 1008 | Unable to parse request. The following error occurred: {0}
400 | 1009 | A required parameter is missing from your request: {0}.
405 | 1010 | HTTP Method not supported.
400 | 1011 | A required header was missing or invalid: {0}
400 | 1012 | A required object attribute is missing from your request: {0}.
403 | 1013 | The operation you are attempting to perform is not supported by your plan.
403 | 1014 | There are no licenses available on your account.
403 | 1015 | The user exists in another account. The user must be removed from that account before they can be added to yours.
403 | 1016 | The user is already a member of your account.
403 | 1017 | The user already has a paid account. The user must cancel that account before they can be added to yours.
400 | 1018 | The value {0} was not valid for the parameter {1}.
400 | 1019 | Cannot transfer to the user specified. User not found.
404 | 1020 | User not found.
403 | 1021 | Cannot transfer to the user specified. They are not a member of your account.
403 | 1022 | Cannot delete the user specified. They are not a member of your account.
400 | 1023 | The sheet specified is shared at the Workspace level.
400 | 1024 | The HTTP request body is required for this Method.
400 | 1025 | The share already exists.
403 | 1026 | Transferring ownership is not currently supported.
404 | 1027 | Share not found.
400 | 1028 | You cannot edit the share of the owner.
400 | 1029 | The parameter in the URI does not match the object in the request body.
401 | 1030 | You are unable to assume the user specified.
400 | 1031 | The value {0} was not valid for the attribute {1}.
400 | 1032 | The attribute(s) {0} are not allowed for this operation.
404 | 1033 | The template was not found.
400 | 1034 | Invalid Row Id.
400 | 1035 | Attachments and discussions cannot be POSTed with a row.
400 | 1036 | The columnId {0} is invalid.
400 | 1037 | The columnId {0} is included more than once in a single row.
400 | 1038 | Invalid Cell value. Must be numeric or a string.
403 | 1039 | Cannot edit a locked column {0}.
400 | 1040 | Cannot edit your own share.
400 | 1041 | The value for {0} must be {1} characters in length or less, but was {2}.
400 | 1042 | The value for cell in column {0}, {1}, did not conform to the strict requirements for type {2}.
404 | 1043 | The row integer you requested is blank and cannot be retrieved.
400 | 1044 | Assume-User header is required for your Access Token.
403 | 1045 | The resource specified is read-only.
400 | 1046 | Cells containing formulas, links to other cells, system values, or Gantt values cannot be inserted or updated through the API.
403 | 1047 | You cannot remove yourself from the account through the API.
403 | 1048 | The user specified has declined the invitation to join your organization. You cannot modify declined invitations.
403 | 1049 | You cannot remove admin permissions from yourself through the API.
403 | 1050 | You cannot edit a locked row.
400 | 1051 | Attachments of type FILE cannot be created using JSON.
406 | 1052 | Invalid Accept header. Media type not supported.
400 | 1053 | Unknown Paper size: {0}.
400 | 1054 | The new sheet requires either a fromId or columns.
400 | 1055 | One and only one column must be primary.
400 | 1056 | Column titles must be unique.
400 | 1057 | Primary columns must be of type TEXT_NUMBER.
400 | 1058 | Column type of {1} does not support symbol of type {0}.
400 | 1059 | Column options are not allowed when a symbol is specified.
400 | 1060 | Column options are not allowed for column type {0}.
400 | 1061 | Max count exceeded for field {0}.
400 | 1062 | Invalid row location.
400 | 1063 | Invalid parentId: {0}.
400 | 1064 | Invalid siblingId: {0}.
400 | 1065 | The column specified cannot be deleted.
400 | 1066 | You can only share to {0} users at a time.
401 | 1067 | Invalid client_id
400 | 1068 | Unsupported grant type.
400 | 1069 | Invalid Request. The authorization_code has expired.
400 | 1070 | Invalid Request. Required parameter is missing: {0}.
400 | 1071 | Invalid Grant. The authorization code or refresh token provided was invalid.
400 | 1072 | Invalid hash value. The hash provided did not match the expected value.
400 | 1073 | The redirect_uri did not match the expected value.
400 | 1074 | You are trying to upload a file of {0}, but the API currently only supports {1}.
400 | 1075 | The Content-Size provided did not match the file uploaded. This may be due to network issues or because the wrong Content-Size was specified.
403 | 1076 | The user has created sheets and must be added as a licensed user.
400 | 1077 | Duplicate system column type: {0}.
400 | 1078 | System column type {0} not supported for {1} {2}.
400 | 1079 | Column type {0} is not supported for system column type {1}.
400 | 1080 | End Dates on dependency-enabled sheets cannot be created/updated. Please update either the Duration or Start Date column.
403 | 1081 | You cannot delete or update another user's discussions, comments, or comment attachments.
400 | 1082 | You cannot add options to the given column {0} because it is not a PICKLIST.
400 | 1083 | Auto integer formatting cannot be added to a column {0}.
400 | 1084 | The auto integer format is invalid.
400 | 1085 | To change this column's type you must first disable Dependencies for this sheet.
400 | 1086 | Google was not able to verify your access.
400 | 1087 | The column specified is used in a conditional formatting rule, so the column cannot be deleted and its type cannot be changed.
400 | 1088 | Invalid length for concatenated auto integer format. Concatenated format is {0}, with a length of {1}. Must be less than or equal to 40.
400 | 1089 | The type specified is only used with System Columns.
400 | 1090 | Column.type is required when changing symbol, systemColumnType or options.
400 | 1091 | Invalid Content-Type: {0}.
403 | 1092 | You cannot delete this row. Either it or one or more of its children are locked.
400 | 1095 | The Excel file is invalid/corrupt. This may be due to an invalid file extension, an outdated Excel format, or an invalid Content-Length.
403 | 1096 | This Apple payment receipt has already been applied to a user's payment profile.
403 | 1097 | A user must be a licensed sheet creator to be a resource viewer.
400 | 1098 | To delete this column you must first disable Dependencies for this sheet.
400 | 1099 | To delete this column you must first disable Resource Management for this sheet.
400 | 1100 | Uploading new versions of a discussion comment attachment is not supported.
400 | 1101 | Uploading new versions of non-FILE type attachments is not supported.
403 | 1102 | A user must be a licensed sheet creator to be a group administrator.
400 | 1103 | A group with the same name already exists.
403 | 1104 | You must be a group administrator to create a group.
400 | 1105 | The operation failed because one or more group members were not members of your account: {0}.
404 | 1106 | Group not found.
400 | 1107 | User specified in transferGroupsTo must be a group admin.
400 | 1108 | transferGroupsTo must be provided because user being deleted owns one or more groups.
400 | 1109 | Only one of cell.hyperlink or cell.linkInFromCell may be non-null.
400 | 1110 | cell.value must be null if cell.linkInFromCell is non-null.
400 | 1111 | Only one of cell.hyperlink.sheetId and cell.hyperlink.reportId may be non-null.
400 | 1112 | cell.hyperlink.url must be null for sheet or report hyperlinks.
400 | 1113 | cell.value must be a string when the cell is a hyperlink.
404 | 1114 | Invalid sheetId or reportId: {0}.
400 | 1115 | Row must contain either cell link updates or row/cell value updates; mixing of both update types in one API call is not supported.
400 | 1116 | You cannot link a cell to its own sheet.
400 | 1117 | One of the following cell.hyperlink fields must be non-null: url, sheetId, or reportId.
400 | 1118 | You cannot set the value of a Gantt allocation column (id {0}) in a row that has child rows.
500 | 1119 | Failed to complete copy.<br/>**NOTE**: may include a "detail" object containing "topContainerType" and "topContainerId" which represent the top-level folder or workspace that were partially copied.
400 | 1120 | Too many sheets to copy.<br/>**NOTE**: includes a "detail" object containing "maxSheetCount" which represents the server-side limit on the integer of sheets allowed in a single folder/workspace copy operation.
400 | 1121 | transferTo must be provided because user being deleted owns one or more groups.
405 | 1122 | Requested URL does not support this method: {0}.
400 | 1123 | Specifying multiple row locations is not yet supported. Each row must use the same row location attribute and value (toBottom, toTop, parentId, siblingId, above).
415 | 1124 | Invalid Content-Type header. Media type not supported.
400 | 1125 | Each part in a multipart payload must have a name.
400 | 1126 | Multipart payload contained duplicate part names: {0}.
400 | 1127 | Required multipart part was missing: '{0}'
400 | 1128 | Multipart upload size limit exceeded.
400 | 1129 | The resource you tried to create already exists.
400 | 1130 | One of cell.value or objectValue may be set, but not both.
400 | 1131 | cell.{0} for column {1} was of the wrong object type. Allowed types: {2}.
400 | 1132 | The token provided has previously been revoked.
400 | 1133 | Column titles are not unique among input columns.
400 | 1134 | Duplicate system column type among input columns.
400 | 1135 | Input column index {0} is different from the first input column index {1}.
400 | 1136 | Cannot copy or move row(s) within the same sheet.
400 | 1137 | Input collection contains multiple instances of the same element.
403 | 1138 | The user is not eligible for a trial organization.
403 | 1139 | The user is an admin in another organization. Add 'allowInviteAccountAdmin=true' to the query string to invite their entire organization.
403 | 1140 | The user must be added as a licensed user.
403 | 1141 | Inviting users from an enterprise organization is not supported.
400 | 1142 | Column type {0} is reserved for project sheets and may not be manually set on a column.
400 | 1143 | To set {0}, you must first enable dependencies on the sheet.
400 | 1144 | The user owns one or more groups and must be added as a Group Admin.
400 | 1145 | Multipart upload request was invalid. Please check your request headers and payload.
400 | 1146 | Unsupported operation: {0}.
400 | 1147 | Multipart request contained an invalid part name: '{0}'
400 | 1148 | Numeric cell values must be between {0} and {1}.
400 | 1155 | You cannot set the '{0}' attribute for a cell in a 'Project Settings' column of a dependency-enabled sheet.
400 | 1156 | Invalid email.
400 | 1157 | This address is already associated with another Smartsheet account, so it cannot be added as an alternate address for this account.
400 | 1158 | This address has not been confirmed yet, so it can't be set as the primary email address.
400 | 1159 | The specified email address ({0}) is an alternate email address for a user with a primary email address of {1}.
400 | 1160 | Invalid bulk request. See detail for more information.
400 | 1161 | Cannot set altText for a cell that does not contain an image: row {0}, column {1}.
400 | 1163 | If cell.image is non-null then value, objectValue, hyperlink, and linkInFromCell must all be null.
400 | 1164 | Cannot add image to cell because this feature has been disabled by the org administrator.
400 | 1165 | Cannot add image to cell with alt text larger than 100 characters.
400 | 1166 | You cannot share Sights as an Editor.
400 | 1167 | The resource you are attempting to access has expired.
403 | 1173 | You must be in a Team/Enterprise account to specify a {0} value of '{1}'.
403 | 1174 | The value for {0} is invalid because this publish option is configured to be restricted to users in this account.
403 | 1175 | One or more publish options which you attempted to enable are disabled for this account.
400 | 1176 | Array attribute(s) may not contain null elements: {0}.
400 | 1177 | Arrays may not contain null elements.
400 | 1178 | The following combination of attributes is not allowed for this operation: {0}.
400 | 1179 | The schedule specified is invalid because endAt is earlier than the next send date.
403 | 1180 | We are unable to process this request because the email has been associated with a different Smartsheet account.
403 | 1181 | Only admins can edit shared filters.
400 | 1182 | The specified sheet filter {0} does not exist for sheet {1}.
400 | 1183 | Sheet filters must define at least one detail entry.
400 | 1184 | Sheet {0} already has a filter named '{1}' of type {2}.
400 | 1185 | Cannot create a child of a parent row that has no data in it.
403 | 1186 | User's primary email address must be a validated domain.
403 | 1187 | User's alternate address selected to be made primary must be a validated domain.
403 | 1188 | The account status of the user specified is not active.
400 | 1189 | Only Enterprise or Team accounts with security controls are able to change primary emails.
400 | 1190 | Only Enterprise or Team accounts with special permission granted are able to change primary emails.
400 | 1210 | Column validation is not supported for column type '{0}'.
400 | 1211 | The value "{0}" could not be saved to column "{1}." This column is restricted to "{2}" values only.
403 | 1212 | You must be a sheet admin to override validation.
400 | 1213 | A(n) {0} could not be saved to column "{1}" since column validation is enabled as type "{2}".
400 | 1214 | Dropdown and Contact List columns with data validation must have at least one option value.
429 | 4003 | Rate limit exceeded.
400 | 5xxx | Errors in the 5xxx range represent conditions that a developer cannot reasonably prevent or handle, most typically related to account status. These error messages are localized and can be displayed to the end-user to inform them of the condition that caused the error to occur.

## 500-Level Error Codes

500-level error codes indicate there is some kind of permanent error.

HTTP status code | Smartsheet errorCode | Smartsheet message
-----|-----|-----|
500 | 1170 | The sheet referenced by this widget is unavailable or deleted.
500 | 1171 | The report referenced by this widget is unavailable or deleted.
500 | 1172 | The referenced cell is unavailable or deleted.
500 | 4000 | An unexpected error has occurred. Please contact api@smartsheet.com for assistance.
503 | 4001 | Smartsheet.com is currently offline for system maintenance. Please check back again shortly.
500 | 4002 | Server timeout exceeded. Request has failed.
500 | 4004 | An unexpected error has occurred. Please retry your request. If you encounter this error repeatedly, please contact api@smartsheet.com for assistance.<br/><br/>**Or**<br/><br/>Request failed because sheetId {0} is currently being updated by another request that uses the same access token. Please retry your request once the previous request has completed.

# Formatting

Formatting data can optionally be included for columns, rows, and cells by adding the "include=format" query string parameter to any API operation that returns any of those objects (for example, `GET /sheets/{sheetId}`, `GET sheets/{sheetId}/rows/{rowId}`, etc.).  When this parameter is included, objects that contain non-default formatting include a **format** property.  Objects that do not have any non-default format settings applied exclude this property.

Because the amount of format data in a large sheet can potentially be very large in itself, for bandwidth reasons, format data is represented by a compact format descriptor string.  The format descriptor takes the form of a comma-separated list of numeric values.  These values represent indexes into pre-defined format lookup tables which can be retrieved using the `GET /serverinfo` operation.

## Row & Column Format

Setting the format of a row or column through the API simply sets the baseline format for new cells in that row or column.  It does not affect existing cells.

The equivalent API action for what happens when you highlight a column or row in the Smartsheet Webapp and set a format (for example, bold) would be to update the format of a column or row (via `PUT /sheets/{sheetId}/rows/{rowId}` or `PUT /sheets/{sheetId}/columns/{columnId}`), and update the format for every cell in that row or column.  All of the cells in a row can be updated in one operation (`PUT /sheets/{sheetId}/rows/{rowId}`), but there is currently no way to update all of the cells in a column in one operation.  This will be addressed in a future version of the API.

## Format Descriptor

The format descriptor contains 16 comma-separated numeric indexes.  Each index represents a format style whose value can be found in one of the lookup tables in the FormatTables Object.

/**
 * @var **Format Style** **FormatTables Lookup Table Property** |
 * @Type("**Format Style**")
 */
private $Format Descriptor Element #;

-----|-----|-----|
0 | Font Family | fontFamily
1 | Font size | fontSize
2 | Bold | bold
3 | Italic | italic
4 | Underline | underline
5 | Strikethrough | strikethrough
6 | Horizontal alignment | horizontalAlign
7 | Vertical alignment | verticalAlign
8 | Text color | color
9 | Background color | color
10 | Taskbar color | color
11 | Currency | currency
12 | Decimal count | decimalCount
13 | Thousands separator | thousandsSeparator
14 | Number format | integerFormat
15 | Text wrap | textWrap

<aside class="notice">Formats which have not been explicitly set are omitted in the descriptor string.  For example, a cell which has been set to bold and italic, but has no other formats applied to it, would have a format descriptor of ",,1,1,,,,,,,,,,,,".</aside>

<aside class="notice">As a convenience, the FormatTables Object contains a <b>defaults</b> property which is a format descriptor that describes which formats the Smartsheet Web app displays for unset formats.  Your application can use these values to display unformatted cells identically to the Smartsheet Web app.</aside>

## FormatTables Object

The FormatTables Object is retrieved via the `GET /serverinfo` operation and contains all of the lookup tables that the Format Descriptor indexes refer to, as well as a property called **defaults**, which is a Format Descriptor that describes which formats the Smartsheet Web app displays for unset formats.

<aside class="notice">Indexes and their values are guaranteed never to change or be removed for a given major API version.  However, new values could potentially be added to the ends of lookup tables.<br/><br/>Because of this possibility, your code should handle the case where a cell might contain a format index value greater than the size of a lookup table your app has loaded.  Your application should check for that case and reload the format tables if necessary.</aside>

/**
 * @var string A format descriptor where each element describes the formats the Smartsheet Web app displays for format values that have not been set.
 * @Type("string")
 */
private $defaults;

/**
 * @var array of FontFamily Objects Font families with additional font information
 * @Type("array of FontFamily Objects")
 */
private $fontFamily;

/**
 * @var array of strings Font sizes in points
 * @Type("array of strings")
 */
private $fontSize;

/**
 * @var array of strings Possible values:<ul><li>none</li><li>on</li></ul>
 * @Type("array of strings")
 */
private $bold;

/**
 * @var array of strings Possible values:<ul><li>none</li><li>on</li></ul>
 * @Type("array of strings")
 */
private $italic;

/**
 * @var array of strings Possible values:<ul><li>none</li><li>on</li></ul>
 * @Type("array of strings")
 */
private $underline;

/**
 * @var array of strings Possible values:<ul><li>none</li><li>on</li></ul>
 * @Type("array of strings")
 */
private $strikethrough;

/**
 * @var array of strings Horizontal alignment, possible values:<ul><li>default</li><li>left</li><li>center</li><li>right</li></ul>Note: "default" is the default value, which is equivalent to "left".
 * @Type("array of strings")
 */
private $horizontalAlign;

/**
 * @var array of strings Vertical alignment, possible values:<ul><li>default</li><li>top</li><li>middle</li><li>bottom</li></ul>Note: "default" is the default value, which is equivalent to "top".
 * @Type("array of strings")
 */
private $verticalAlign;

/**
 * @var array of strings Color hex values. <br/><br/>Note: "none" is the default value for all colors.  Applications must handle this value and use app-defined colors (typically this is Black for text color and White for background color)
 * @Type("array of strings")
 */
private $color;

/**
 * @var array of Currency Objects Currency codes and symbols
 * @Type("array of Currency Objects")
 */
private $currency;

/**
 * @var array of strings All allowed decimal count values
 * @Type("array of strings")
 */
private $decimalCount;

/**
 * @var array of strings Possible values:<ul><li>none</li><li>on</li></ul>
 * @Type("array of strings")
 */
private $thousandsSeparator;

/**
 * @var array of strings Possible values:<ul><li>none</li><li>NUMBER</li><li>CURRENCY</li><li>PERCENT</li></ul>
 * @Type("array of strings")
 */
private $integerFormat;

/**
 * @var array of strings Possible values:<ul><li>none</li><li>on</li></ul>
 * @Type("array of strings")
 */
private $textWrap;
```

## FontFamily Object
```php

/**
 * @var string Name of the font family (for example, "Arial")
 * @Type("string")
 */
private $name;

/**
 * @var array Platform-independent traits of the font family. One of the following values:<ul><li>serif</li><li>sans-serif</li>
 * @Type("array")
 */
private $traits;
```

## Currency Object
```php

/**
 * @var string The ISO 4217 currency code (for example, "EUR")
 * @Type("string")
 */
private $code;

/**
 * @var string The currency symbol (for example, "€")
 * @Type("string")
 */
private $symbol;
```

# <span class="customTOCSectionHeading">Deprecations</span>

Smartsheet occasionally deprecates APIs to indicate that those APIs should no longer be used in active development.
Deprecated APIs typically remain present and usable for a reasonable period of time following the release in which they were deprecated, but may be removed entirely from a future version of the API.
You should never use deprecated APIs in new development, and if you have existing code that uses deprecated APIs, Smartsheet recommends that you update that code as soon as possible.

# Endpoints

This section specifies the endpoints and parameters that have been deprecated in version 2.0 of the Smartsheet API.

## Deprecated Endpoints

The following endpoints have been deprecated in version 2.0 of the Smartsheet API.

Operation | Deprecated Endpoint | Replaced by
-------- | -------- | ----- | -----------------
 Delete Row (singular) | DELETE /sheets/{sheetId}/rows/{rowId} | new endpoint for Delete Rows
 Send Row (singular) | POST /sheets/{sheetId}/rows/{rowId}/emails | new endpoint for Send Rows

## Deprecated Parameters

Operation | Deprecated Parameter | Replaced by
-------- | -------- | --------
Create Child Folder | include | new endpoint for Copy Folder
Create Sheet | include | new endpoint for Copy Sheet
Create Workspace | include | new endpoint for Copy Workspace

# Objects

This section specifies the objects and attributes that have been deprecated in version 2.0 of the Smartsheet API.

## Deprecated Objects

No objects have been deprecated in version 2.0 of the Smartsheet API.

## Deprecated Attributes

The following attributes have been deprecated in version 2.0 of the Smartsheet API.

Object | Deprecated Attribute | Replaced by
-------- | -------- | --------
Folder Object | fromId | new endpoint for Copy Folder
Sheet Object | fromId | new endpoint for Copy Sheet
Workspace Object | fromId | new endpoint for Copy Workspace

# Troubleshooting

Should you encounter issues with the Smartsheet API while building an integration using a particular programming language (ex: Java, C#, PHP, Python, etc.), keep the following troubleshooting techniques in mind.

1. Try executing the same API Request using a tool like <a href="https://curl.haxx.se/">cURL</a> or <a href="https://www.getpostman.com/">Postman</a>. By taking your code out of the equation, you can isolate troubleshooting to the raw Request / Response.
  * If you receive a similar error when you execute the Request using cURL or Postman, this suggests an issue with the Request format or contents. Once you have the Request working in cURL or Postman, update your code accordingly.
  * If you can execute the Request successfully using cURL or Postman, but not via your code, this suggests that the Request your code is sending is somehow different than what you intend. Compare the (successful) Request from cURL or Postman with the (unsuccessful) Request that your code generates. (See step #2 below.)
2. Examine the Request that your code is sending (including the HTTP verb, URI, headers, and Request body) and the Response that it's receiving back from Smartsheet (including the HTTP status code, headers, and response body).
  * If you've implemented Request / Response logging in your application, inspect the full trace of Request and Response in the log file. Compare the Request that your application is logging with the (successful) Request from cURL or Postman, and update your code to correct any discrepancies.
  * Alternatively, you may choose to use a tool like <a href="http://www.telerik.com/fiddler" target="_blank">Fiddler</a> or <a href="https://www.charlesproxy.com/" target="_blank">Charles HTTP Proxy</a> to inspect the full trace of Request and Response as it goes across the wire. Compare the Request trace that your application generates with the (successful) Request from cURL or Postman, and update your code to correct any discrepancies.

# <span class="customTOCSectionHeading">Webhooks</span>

# Intro to Webhooks

<%= WEBHOOKS_INTRO %>

At a high-level, it works like this:

<ol>
	<li><span class="customInstructionsHeading">Your application subscribes to <a href="#event-callbacks">callbacks</a>.</span><br/>First, subscribe to event notifications (callbacks) by creating one or more webhooks.  You can create a webhook manually via the API or have your application create a webhook dynamically.  Each webhook must specify:
		<ul>
			<li>Which Smartsheet object to monitor for events</li>
			<li>Which events in that object should trigger a callback</li>
			<li>The HTTPS URL (that is, "<b>callback URL</b>") where Smartsheet should send callbacks when any of the specified events occur within the scope of the specified Smartsheet object. (Note: Smartsheet webhooks do not support callbacks to servers using self-signed certificates)</li>
		</ul>
		<br/>

		<b>Webhook examples in plain English:</b>
		<ul>
			<li><i>"When any changes occur in Sheet_A, send a callback to https://www.myapp.com/abc"</i></li>
			<li><i>"When a new row is added to Sheet_B, send a callback to https://www.myapp.com/def"</i></li>
			<li><i>"When a cell value is changed in Sheet_C, send a callback to https://www.myapp.com/ghi"</i></li>
		</ul>
		<br/>
	</li>
	<li><span class="customInstructionsHeading">When any of the specified events occur within an object that is being monitored by a webhook, Smartsheet sends an <code>HTTP POST</code> (that is, "callback") to the <b>callback URL</b> that is associated with the Webhook.</span><br/>
		<ul>
			<li><i>Note:</i> The callback payload is a "skinny" payload -- it indicates which objects changed and the type of events that occurred, but does not contain any data from the objects themselves.</li>
		</ul>
		<br/>
	</li>
	<li><span class="customInstructionsHeading">Your application receives, acknowledges, and processes callbacks.</span><br/>Your application receives the <code>HTTP POST</code>, acknowledges the callback by responding with HTTP status 200, and processes the callback.
	Because the callbacks are "skinny", make one or more requests to the Smartsheet API to retrieve the actual data associated with the change.
	</li>
</ol>

## Webhook Management

Webhooks are created and managed by using the Smartsheet API. See Webhooks API Reference for details about the related API operations.

## Webhook Ownership & Access

Webhooks can be created and managed via Direct API Access or by a third-party app.

A webhook that is created via Direct API Access:

* is owned by the User who created it
* can be managed only by the User who created it
* is not affected if the access token that was used to create it is revoked, as long as the User remains active

A webhook that is created by a third-party app:

* is owned by the User who authorized the third-party app (and is associated with the third-party app)
* can be managed by the third-party app (as long as it maintains authorization) OR by the User who owns it
* is permanently disabled if the third-party app's permissions are revoked

## Webhook Scope & Events

A webhook monitors the specified **scope** for the specified **events**.

A Webhook's **scope** attribute indicates the scope of the subscription. It is specified when creating a webhook, and cannot subsequently be changed.

* Currently, "sheet" is the only supported value for the **scope** attribute.
* Future releases of webhooks will support additional scopes such as "org", "folder", "workspace", etc.

A Webhook's **event** attribute indicates the set of events that a webhook is subscribed to (that is, which events trigger a callback).

* Events are represented as a dot-separated string in the format "*object*.*event*", where an asterisk (&#42;) can be used to represent "all objects" or "all events".
* Currently, "&#42;.&#42;" is the only supported value for the **events** attribute. This indicates a subscription to all objects in the scope, and all events for those objects.
* Future releases of webhooks will support more specific events such as "sheet.updated", "row.deleted", "column.created", etc.

<span class="customSubHeading">Example</span>

Consider a Webhook with the following attribute values:

* **scopeObjectId** = 12345678901234
* **scope** = "sheet"
* **events** = "&#42;.&#42;"

This webhook monitors the specified Sheet (id: 12345678901234) for all types of events. For example, if a row is added to the sheet, cell values are updated in the sheet, a column is deleted from the sheet, etc., a callback would be sent to the webhook's **callbackUrl**.

# Creating a Webhook

An API client can create a webhook by using the Create Webhook operation. A newly created webhook is disabled by default.
After successfully creating a webhook, the API client must subsequently initiate and complete the verification process before the webhook is enabled.
The following diagram illustrates the process of creating and enabling a Webhook.

<img src="images/v4-CreateAndEnableWebhook.png" alt="Workflow to create a Webhook" />

<span class="customSubHeading">Step-by-Step:</span>

The process occurs synchronously:

1. API Client submits a Create Webhook request.

2. Smartsheet creates the webhook, but does not initially enable the webhook (`enabled: false` and `status: "NEW_NOT_VERIFIED"`).

3. To initiate the verification process, the API Client submits an Update Webhook request to specify `enabled: true`. (*Note*: The API Client does not receive a response to this request until the Verification process (steps 4 and 5) has completed.)

4. When Smartsheet receives the request to enable the webhook, it sends a Verification Request to the Subscriber (that is, to the `callbackUrl` that the API Client specified in the **Create Webhook** request).
The request specifies a unique random value in the **Smartsheet-Hook-Challenge** header and contains only `challenge` and `webhookId` in the request body. The `challenge` value is a repeat of the header value for API clients that don't interpret header values.

5. The Subscriber responds to the Verification Request by echoing back the same unique random value in the **Smartsheet-Hook-Response** header of the response.

6. Once the Subscriber has successfully acknowledged the Verification Request, Smartsheet enables the webhook and responds to the API Client's **Update Webhook** request to confirm that the webhook has been enabled (`enabled: true` and `status: "ENABLED"`).

## Webhook Verification

> Verification Request (from Smartsheet):
> Verification Response (by Subscriber):
When an API Client attempts to enable a webhook, Smartsheet sends a verification request to the webhook's **callbackUrl** to verify that the Subscriber expects and is able to successfully receive callbacks.
The request specifies a unique random value in the **Smartsheet-Hook-Challenge** header and contains a JSON object in the request body with only `challenge` and `webhookId` attributes in the request body. The `challenge` attribute is a repeat of the header value for API clients that don't interpret header values.

* To verify the webhook, the Subscriber's response to the Verification Request must return a 200 HTTP status code and must echo back the same unique random value in the **Smartsheet-Hook-Response** header of the response. Once Smartsheet receives this verification response, the webhook is enabled (`enabled: true` and `status: "ENABLED"`).

* If the Subscriber does not successfully respond to the verification request, the webhook remains disabled (`enabled: false` and `status: "DISABLED_VERIFICATION_FAILED"`).

When a webhook is initially created through the API, the response contains the webhook's Id.  If you wish to guarantee that your server only receives callbacks for webhooks that you created,
you can check the verification request's `webhookId` attribute against your list of created webhook Ids.  If the Id is not in the list, return a response with a non-200 status code (for example, 403 Forbidden),
and the webhook that initiated the verification request is disabled as described above.

<aside class="notice"><b>IMPORTANT</b>: ONGOING VERIFICATION. Once a webhook has been enabled, Smartsheet sends a verification request to the webhook's <b>callbackUrl</b> once every 100 callbacks. The Subscriber should respond to the verification request as described above -- failure to do so results in the webhook being disabled (<code>enabled: false</code> and <code>status: "DISABLED_VERIFICATION_FAILED"</code>).</aside>

# Webhook Status

A Webhook object's **enabled** attribute indicates whether a webhook is enabled or disabled, while the **status** attribute describes the *reason* that the webhook is enabled or disabled.

<aside class="notice"><b>Note:</b><ul><li>When a Webhook's <b>enabled</b> attribute is set to <code>true</code>, Smartsheet is monitoring for the specified events and sends a <a href="#event-callbacks">callback</a> to the <b>callbackUrl</b> when the events occur.</li><li>When a Webhook's <b>enabled</b> attribute is set to <code>false</code>, Smartsheet is NOT monitoring for the specified events and does NOT send a callback to the <b>callbackUrl</b> when the events occur. Depending on the value of the <b>status</b> attribute, it may be possible to (re-)enable the Webhook. (See below for details).</li></ul></aside>

The following table lists all possible combinations of **enabled** and **status** attribute values.

Webhook.enabled | Webhook.status | Meaning | Notes
----- | ----- | ------ | -----
true  | ENABLED | Webhook is active. |
false | NEW_NOT_VERIFIED | Webhook has been created but is not enabled because it has not yet been verified. |  Owner can re-enable the webhook by using the Update Webhook operation to set **enabled** to `true`. Once the subscriber successfully acknowledges the verification request, the webhook is enabled.
false  | DISABLED_BY_OWNER | Webhook has been disabled by the owner. | Owner can re-enable the webhook by using the Update Webhook operation to set **enabled** to `true`. Once the subscriber successfully acknowledges the verification request, the webhook is enabled.
false  | DISABLED_VERIFICATION_FAILED | Webhook verification has failed. |  Owner can re-enable the webhook by using the Update Webhook operation to set **enabled** to `true`. Once the subscriber successfully acknowledges the verification request, the webhook is enabled.
false  | DISABLED_CALLBACK_FAILED | Webhook has been disabled because callback was not successfully delivered to the Callback URL. |  Owner can re-enable the webhook by using the Update Webhook operation to set **enabled** to `true`. Once the subscriber successfully acknowledges the verification request, the webhook is enabled.
false  | DISABLED_APP_REVOKED | Webhook has been disabled because the third-party app associated with the webhook has had its access revoked. | This is a terminal state (that is, webhook in this state cannot be re-enabled, and attempts to do so will result in error code 1153). If the third-party app's access is subsequently restored, it must create new webhooks.
false  | DISABLED_SCOPE_INACCESSIBLE | Webhook has been disabled because its owner lost access to the corresponding data in Smartsheet (either because the object was deleted or sharing permissions were revoked). | Webhook is automatically re-enabled if access to data is restored (for example, if deleted object is restored or sharing permissions are restored).
false  | DISABLED_ADMINISTRATIVE | Webhook has been disabled by Smartsheet support. | A webhook in this state can only be re-enabled by Smartsheet (contact <a href="mailto:api@smartsheet.com">api@smartsheet.com</a>).  Attempting to re-enable a webhook in this state results in error code 1154.

# Webhook Callbacks

A "callback" is the notification that Smartsheet sends to a webhook's **callbackUrl**. There are two types of callbacks:

* **Event** callback: Alerts the subscriber when the specified events have occurred in Smartsheet. This is the most common type of callback.

* **Status Change** callback: Alerts the subscriber that a webhook has been automatically disabled due to loss of access or automatically re-enabled due to restoration of access.

A Subscriber has the ability to verify the integrity of a callback payload (that is, ensure that the message was not tampered with en route) and authenticate the identity of its sender (that is, ensure that the callback did indeed originate from Smartsheet).
For more information, see Authenticating Callbacks.

## Event Callbacks

> Example - Event callback (row created):
Smartsheet sends an Event callback to notify the Subscriber when the specified events occur in Smartsheet.

<aside class="warning">Any events that occur while a webhook is disabled are NOT communicated via callback if/when webhook is enabled.</aside>

<span class="customSubHeading">Callback Acknowledgement</span>

The Subscriber must respond to an event callback with a 200 [HTTP status code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#2xx_Success) to acknowledge that the callback was received.

<span class="customSubHeading">Retry Logic</span>

If the Subscriber fails to respond with a 200 status, depending on the response, Smartsheet may retry delivery up to 14 times. (The first 7 retry attempts occur with a frequency that's determined using exponential backoff; thereafter, retry attempts occur once every three hours until all retries have been exhausted.)

Subscriber response | Will be retried?
----- | -----
HTTP 201 through 299 | No
HTTP 309 through 399 | No
HTTP 400 through 499 (except 410) | Yes
HTTP 410 | No
HTTP 500 through 599 | Yes
Any other HTTP status | No
Request timeout | Yes

If the response is not retriable or retry attempts have been exhausted, the webhook is disabled (`enabled: false` and `status: "DISABLED_CALLBACK_FAILED"`).
A webhook in this state can be re-enabled if the subscriber completes the verification process. (See Webhook Status for details.)

## Status Change Callbacks

> Status Change callback (access lost):
> Status Change callback (access restored):
If a webhook's owner loses access to the object that a webhook is monitoring (either because the object was deleted or the webhook owner's access to the object was revoked in Smartsheet),
Smartsheet automatically disables the webhook and sends a Status Change callback to alert the Subscriber of this change in status.
The **newWebhookStatus** attribute indicates that the webhook is now disabled (because the scope is inaccessible).

If the webhook owner's access to the object is subsequently restored,
Smartsheet automatically re-enables the webhook and sends a Status Change callback to alert the Subscriber of this change in status.
The **newWebhookStatus** attribute indicates that the webhook is now enabled.

## Authenticating Callbacks (optional)

> Calculating an HMAC
A Subscriber has the ability to verify the integrity of a callback payload (that is, ensure that the message was not tampered with en route) and authenticate the identity of its sender (that is, ensure that the callback did indeed originate from Smartsheet).

When you create a new webhook, it is assigned a randomly generated **sharedSecret** value.  The shared secret is used by Smartsheet to sign callback payloads, and should not be shared with any third parties.

To authenticate a callback request:

1. Calculate the [HMAC](https://en.wikipedia.org/wiki/Hash-based_message_authentication_code) of the webhook's **sharedSecret** and the request body.  This must be done using the SHA-256 cryptographic hash algorithm.

2. Format the calculated value as a string in base 16.

3. Compare your result with the value of the **Smartsheet-Hmac-SHA256** header of the request.

If the values match, you can be sure the request originated from Smartsheet and that the data has not been tampered with.

<aside class="notice">For maximum security, you may also choose to <a href="#reset-shared-secret">reset your webhook's shared secret</a> at periodic intervals.</aside>

# Preventing Infinite Loops

It's possible that an application which subscribes to callbacks (using webhooks) might react to those callbacks by using the API to make additional changes in Smartsheet.
But, consider the following scenario:

1. **App1** creates a Webhook to monitor **Sheet-A** for changes, specifying an **App-1** URL as the **callbackUrl** for the Webhook.

2. **App-1** updates **Sheet-A** using the API.

3. Smartsheet detects that **Sheet-A** has changed and sends a callback to **App-1** (as the webhook specified).

4. **App-1** processes the callback, and in the course of doing so, updates **Sheet-A** again using the API.

5. Return to Step 3.

To protect against infinite loops like the one outlined above, Smartsheet introduced support for a new header that an API client can include with any API request that adds, updates, or deletes data in Smartsheet.
Here's how it works:

<ul>
<li>An API client includes the <b>Smartsheet-Change-Agent</b> header in any API request that adds, updates, or deletes data in Smartsheet.<br/><br/>
	<ul>
		<li>The header value should be set to a string that the API client recognizes as identifying itself.<br/><br/></li>
	</ul>
</li>
<li>If any <a href="#event-callbacks">Event callbacks</a> fire as a result of an API request that contains the <b>Smartsheet-Change-Agent</b> header, the value of the <b>Smartsheet-Change-Agent</b> header is included in the <a href="#callbackevent-object">callback</a> in the value of the <b>changeAgent</b> attribute.<br/><br/></li>
<li>If a webhook Subscriber receives a <a href="#callbackevent-object">callback</a> that contains the <b>changeAgent</b> attribute, it should evaluate the attribute value:<br/><br/>
	<ul>
		<li>If the attribute value's comma-delimited list contains the Subscriber API client's change agent value, this indicates that the change which triggered the callback <b>WAS</b> caused by the Subscriber itself, and the Subscriber can choose to ignore the callback, thus preventing an infinite loop.<br/><br/></li>
		<li>Else, the change which triggered the callback was <b>NOT</b> caused by the Subscriber itself, and if the Subscriber is going to subsequently react to the callback by making a change in Smartsheet (via API request), the API client should append a comma and its own identifier to the original attribute value, and pass that value through using the <b>Smartsheet-Change-Agent</b> header of the API request. Doing so protects against cross-system infinite loops.<br/><br/></li>
	</ul>
</li>
</ul>

<aside class="notice">The <b>Smartsheet-Change-Agent</b> header value has a maximum length of 512 characters. If its length exceeds 512 characters, the excess is trimmed from the front of the string, so that the most recent agent information remains.</aside>

# Webhook Errors

The following table specifies the recommended action for each Smartsheet-specific error code.
Use this information to implement error handling logic according to the following guidelines:

* If the error code indicates a permanent error condition, do not retry the request.
* If the error code indicates a problem that can be fixed, do not retry the request until the problem has been fixed.
* If the error code indicates a problem that could be overcome by retrying the request after a period of time, retry the request using exponential backoff.

HTTP status code | Smartsheet errorCode | Smartsheet message | Recommended Action |
-----|-----|-----|-----|
400 | 1151 | Scope '{0}', object id {1} was not found. | Do not retry without fixing the problem.
400 | 1152 | Only URLs with a protocol of 'https' are supported for attribute '{0}'. | Do not retry without fixing the problem.
403 | 1153 | This webhook cannot be enabled because access was revoked for the application that created it. | <span class="doNotRetry">Do not retry.</span>
403 | 1154 | Please contact api@smartsheet.com in order to enable this Webhook. | <span class="doNotRetry">Do not retry.</span>

# <span class="customTOCSectionHeading">Webhooks Reference</span>

<%= WEBHOOKS_INTRO %>

For more information, see Intro to Webhooks.

# <%= OBJECTS %>

## Callback Object
```php

/**
 * @var string Random value that is distinct for each Callback
 * @Type("string")
 */
private $nonce;

/**
 * @var DateTime Time that the callback was generated
 * @Type("DateTime")
 */
private $DateTime;

/**
 * @var integer Id of the corresponding Webhook
 * @Type("integer")
 */
private $webhookId;

/**
 * @var string Scope of the Webhook. Currently, the only supported value is "sheet".
 * @Type("string")
 */
private $scope;

/**
 * @var integer Id of the object that corresponds to **scope**
 * @Type("integer")
 */
private $scopeObjectId;

/**
 * @var CallbackEvent[] Array of CallbackEvent Objects
 * @Type("CallbackEvent[]")
 */
private $events;

/**
 * @var string New status of the corresponding Webhook <br/>Only returned for "Webhook Status Change" callbacks (null for "Event" Callbacks).
 * @Type("string")
 */
private $newWebhookStatus;
```

## CallbackEvent Object
```php

/**
 * @var string Type of object for which event occurred. One of the following values:<ul><li>sheet</li><li>column</li><li>row</li><li>cell</li><li>attachment</li><li>discussion</li><li>comment</li></ul>
 * @Type("string")
 */
private $objectType;

/**
 * @var string Type of event that occurred. One of the following values:<ul><li>created</li><li>updated</li><li>deleted</li></ul>
 * @Type("string")
 */
private $eventType;

/**
 * @var integer Id of the object that corresponds to **objectType**. Omitted if **objectType** is "cell".
 * @Type("integer")
 */
private $id;

/**
 * @var integer Only present if **objectType** is "cell". The Id of the row where the cell is located.
 * @Type("integer")
 */
private $rowId;

/**
 * @var integer Only present if **objectType** is "cell". The Id of the column where the cell is located.
 * @Type("integer")
 */
private $columnId;

/**
 * @var integer The user Id of the person who caused this event.
 * @Type("integer")
 */
private $userId;

/**
 * @var DateTime Time that this event occurred. A callback may contain events with different DateTimes, as multiple separate events may be aggregated into a single callback request.
 * @Type("DateTime")
 */
private $DateTime;

/**
 * @var string A comma-delimited list of values that uniquely identify the agents responsible for making the changes that caused the callback to occur. Only present if the change agent included the **Smartsheet-Change-Agent** header in the API request that changed data in Smartsheet. For more information, see Preventing Infinite Loops.
 * @Type("string")
 */
private $changeAgent;
```

## SharedSecret Object
```php

/**
 * @var string New value for the shared secret
 * @Type("string")
 */
private $sharedSecret;
```

## Webhook Object
```php

/**
 * @var integer Webhook Id
 * @Type("integer")
 */
private $id;

/**
 * @var string Webhook name
 * @Type("string")
 */
private $name;

/**
 * @var string API Client Id corresponding to third-party app that created the Webhook. Read-only. Only present if webhook was created by third-party app.
 * @Type("string")
 */
private $apiClientId;

/**
 * @var string API Client Name corresponding to third-party app that created the Webhook. Read-only. Only present if webhook was created by third-party app.
 * @Type("string")
 */
private $apiClientName;

/**
 * @var string Scope of the subscription. Currently, the only supported value is "sheet". Specified when a webhook is created and cannot be changed.
 * @Type("string")
 */
private $scope;

/**
 * @var integer Id of the object that is subscribed to. Specified when a webhook is created and cannot be changed.
 * @Type("integer")
 */
private $scopeObjectId;

/**
 * @var string[] Array of the events that are subscribed to. Currently, must be an array of size 1 that contains the string value "&#42;.&#42;", which means "all objects" and "all events".
 * @Type("string[]")
 */
private $events;

/**
 * @var string HTTPS URL where callbacks are sent.<br/><br/>**Note:** Smartsheet webhooks do not support callbacks to servers using self-signed certificates. The callback server must be using a signed certificate from a certificate authority.
 * @Type("string")
 */
private $callbackUrl;

/**
 * @var string Shared secret for this webhook, randomly generated by Smartsheet. Read-only. See Authenticating Callbacks for details about how this value can be used.
 * @Type("string")
 */
private $sharedSecret;

/**
 * @var boolean Flag indicating whether the Webhook is on (`true`) or off (`false`)
 * @Type("boolean")
 */
private $enabled;

/**
 * @var string Webhook status. Read-only. See Webhook Status for list of possible values.
 * @Type("string")
 */
private $status;

/**
 * @var string Details about the reason the Webhook was disabled. Read-only. Only present when **enabled**=`false`.
 * @Type("string")
 */
private $disabledDetails;

/**
 * @var integer Webhook version. Currently, the only supported value is 1. This attribute is intended to ensure backward compatibility as new webhook functionality is released. For example, a webhook with a version of 1 is guaranteed to always be sent callback objects that are compatible with the version 1 release of webhooks.
 * @Type("integer")
 */
private $version;

/**
 * @var WebhookStats Useful statistics for this webhook.  Only returned once this webhook has performed a callback attempt.  Read-only.
 * @Type("WebhookStats")
 */
private $stats;

/**
 * @var DateTime Time of creation. Read-only.
 * @Type("DateTime")
 */
private $createdAt;

/**
 * @var DateTime Time of last modification. Read-only.
 * @Type("DateTime")
 */
private $modifiedAt;
```

## WebhookStats Object
```php

/**
 * @var integer The integer of retries the webhook had performed as of the last callback attempt.
 * @Type("integer")
 */
private $lastCallbackAttemptRetryCount;

/**
 * @var DateTime When this webhook last made a callback attempt.
 * @Type("DateTime")
 */
private $lastCallbackAttempt;

/**
 * @var DateTime When this webhook last made a successful callback.
 * @Type("DateTime")
 */
private $lastSuccessfulCallback;
```

# Create Webhook

> Example Request: Create Webhook
> Example Response:
`POST /webhooks`

Creates a new Webhook.

<aside class="notice">A Webhook is not enabled by default when it is created. Once you've created a Webhook, you can enable it by using the <a href="#update-webhook">Update Webhook</a> operation to set <b>enabled</b> to <code>true</code>.</aside>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WEBHOOKS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | Webhook Object, limited to the following attributes:<ul><li>name (required)</li><li>callbackUrl (required)</li><li>scope (required)</li><li>scopeObjectId (required)</li><li>events (required)</li><li>version (required)</li></ul>
<%= RETURNS %> | Result Object, containing a Webhook Object for the newly created Webhook

# Delete Webhook

> Example Request: Delete Webhook
> Example Response:
`DELETE /webhooks/{webhookId}`

Deletes the Webhook specified in the URL.

<aside class="notice">Using this operation permanently deletes the specified Webhook. To temporarily disable a webhook, use the <a href="#update-webhook">Update Webhook</a> operation to set <b>enabled</b> to <code>false</code>.</aside>

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WEBHOOKS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | Result Object

# Get Webhook

> Example Request: Get Webhook
> Example Response:
`GET /webhooks/{webhookId}`

Gets the Webhook specified in the URL.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WEBHOOKS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | Webhook Object

# List Webhooks

> Example Request: List Webhooks
> Example Response:
`GET /webhooks`

Gets the list of all Webhooks that the user owns (if a user-generated token was used to make the request)
or the list of all Webhooks associated with the third-party app (if a third-party app made the request).
Items in the response are ordered by API Client name > Webhook name > creation date.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WEBHOOKS
<%= HEADERS %> | <%= HEADER_AUTH %>
<%= RETURNS %> | IndexResult Object containing an array of Webhook Objects

# Reset Shared Secret

> Example Request: Reset Shared Secret

> Example Response:
`POST /webhooks/{webhookId}/resetsharedsecret`

Resets the shared secret for the specified Webhook. For more information about how a shared secret is used, see Authenticating Callbacks.

This operation can be used to rotate an API client's webhooks' shared secrets at periodic intervals to provide additional security.

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WEBHOOKS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | The request body should be empty.
<%= RETURNS %> | Result Object containing the SharedSecret Object

# Update Webhook

> Example Request: Update Webhook
> Example Response:
`PUT /webhooks/{webhookId}`

Updates the Webhook specified in the URL.

<aside class="notice"><b>Enabling a Webhook</b><br/><br/>When setting a webhook's <b>enabled</b> to <code>true</code> using this operation, the behavior and result depend on the webhook's <b>status</b> and may result in a webhook <a href="#webhook-verification">verification</a> being triggered, or in some cases, an error being returned.  See <a href="#webhook-status">Webhook Status</a> for more details.</aside>

<!--aside class="notice"><b>Enabling a Webhook</b><ul><li>If <b>Webhook.enabled</b>=<code>false</code> and <a href="#webhook-status"><b>Webhook.status</b></a> is any value other than "DISABLED_APP_REVOKED", "DISABLED_SCOPE_INACCESSIBLE", or "DISABLED_ADMINISTRATIVE", using this operation to set <b>Webhook.enabled</b>=<code>true</code> triggers the <a href="#webhook-verification">verification</a> process.</li><li>Verification must be successfully completed in order for the Webhook to become enabled.</li></ul></aside-->

     |     |
-----|-----|
<%= SCOPE %> | ADMIN_WEBHOOKS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | Webhook Object, limited to the following attributes:<ul><li>name (optional)</li><li>events (optional)</li><li>callbackUrl (optional)</li><li>enabled (optional)</li><li>version (optional)</li></ul>
<%= RETURNS %> | Result Object containing the Webhook Object for the updated webhook
